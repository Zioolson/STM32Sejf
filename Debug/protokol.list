
protokol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006520  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006630  08006630  00016630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006788  08006788  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006788  08006788  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006788  08006788  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800678c  0800678c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000080  0800680c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  0800680c  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011692  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002be0  00000000  00000000  00031737  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  00034318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  00035400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001968f  00000000  00000000  00036398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f563  00000000  00000000  0004fa27  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e25f  00000000  00000000  0005ef8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed1e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d40  00000000  00000000  000ed264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08006618 	.word	0x08006618

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08006618 	.word	0x08006618

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <GetPage>:
#include "FLASH_PAGE.h"
#include "string.h"
#include "stdio.h"

static uint32_t GetPage(uint32_t Address)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	e018      	b.n	8000adc <GetPage+0x40>
  {
	  if((Address < (0x08000000 + (1024 *(indx+1))) ) && (Address >= (0x08000000 + 1024*indx)))
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	029b      	lsls	r3, r3, #10
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d20c      	bcs.n	8000ad6 <GetPage+0x3a>
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000ac2:	029b      	lsls	r3, r3, #10
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d304      	bcc.n	8000ad6 <GetPage+0x3a>
	  {
		  return (0x08000000 + 1024*indx);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000ad2:	029b      	lsls	r3, r3, #10
 8000ad4:	e007      	b.n	8000ae6 <GetPage+0x4a>
  for (int indx=0; indx<128; indx++)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae0:	dde3      	ble.n	8000aaa <GetPage+0xe>
	  }
  }

  return -1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <Flash_Write_Data>:

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t * DATA_32)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]

	int numberofwords = (strlen(DATA_32)/4) + ((strlen(DATA_32) % 4) != 0);
 8000afe:	6838      	ldr	r0, [r7, #0]
 8000b00:	f7ff fb30 	bl	8000164 <strlen>
 8000b04:	4603      	mov	r3, r0
 8000b06:	089c      	lsrs	r4, r3, #2
 8000b08:	6838      	ldr	r0, [r7, #0]
 8000b0a:	f7ff fb2b 	bl	8000164 <strlen>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	bf14      	ite	ne
 8000b18:	2301      	movne	r3, #1
 8000b1a:	2300      	moveq	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4423      	add	r3, r4
 8000b20:	61bb      	str	r3, [r7, #24]

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000b22:	f001 fd6d 	bl	8002600 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ffb8 	bl	8000a9c <GetPage>
 8000b2c:	6178      	str	r0, [r7, #20]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	461a      	mov	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4413      	add	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8000b3a:	6938      	ldr	r0, [r7, #16]
 8000b3c:	f7ff ffae 	bl	8000a9c <GetPage>
 8000b40:	60f8      	str	r0, [r7, #12]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <Flash_Write_Data+0xd4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8000b48:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <Flash_Write_Data+0xd4>)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	0a9b      	lsrs	r3, r3, #10
 8000b56:	3301      	adds	r3, #1
 8000b58:	4a1a      	ldr	r2, [pc, #104]	; (8000bc4 <Flash_Write_Data+0xd4>)
 8000b5a:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	4619      	mov	r1, r3
 8000b62:	4818      	ldr	r0, [pc, #96]	; (8000bc4 <Flash_Write_Data+0xd4>)
 8000b64:	f001 fe3e 	bl	80027e4 <HAL_FLASHEx_Erase>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d01e      	beq.n	8000bac <Flash_Write_Data+0xbc>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8000b6e:	f001 fd7d 	bl	800266c <HAL_FLASH_GetError>
 8000b72:	4603      	mov	r3, r0
 8000b74:	e021      	b.n	8000bba <Flash_Write_Data+0xca>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, DATA_32[sofar]) == HAL_OK)
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f04f 0400 	mov.w	r4, #0
 8000b84:	461a      	mov	r2, r3
 8000b86:	4623      	mov	r3, r4
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f001 fcc8 	bl	8002520 <HAL_FLASH_Program>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d106      	bne.n	8000ba4 <Flash_Write_Data+0xb4>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	607b      	str	r3, [r7, #4]
	    	 sofar++;
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	61fb      	str	r3, [r7, #28]
 8000ba2:	e003      	b.n	8000bac <Flash_Write_Data+0xbc>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000ba4:	f001 fd62 	bl	800266c <HAL_FLASH_GetError>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	e006      	b.n	8000bba <Flash_Write_Data+0xca>
	   while (sofar<numberofwords)
 8000bac:	69fa      	ldr	r2, [r7, #28]
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbe0      	blt.n	8000b76 <Flash_Write_Data+0x86>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000bb4:	f001 fd4a 	bl	800264c <HAL_FLASH_Lock>

	   return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	; 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000009c 	.word	0x2000009c

08000bc8 <Flash_Read_Data>:

	   return 0;
}

void Flash_Read_Data (uint32_t StartPageAddress, __IO uint32_t * DATA_32)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
	while (1)
	{
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	601a      	str	r2, [r3, #0]
		if (*DATA_32 == 0xffffffff)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be2:	d103      	bne.n	8000bec <Flash_Read_Data+0x24>
		{
			*DATA_32 = '\0';
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
			break;
 8000bea:	e006      	b.n	8000bfa <Flash_Read_Data+0x32>
		}
		StartPageAddress += 4;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3304      	adds	r3, #4
 8000bf0:	607b      	str	r3, [r7, #4]
		DATA_32++;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	603b      	str	r3, [r7, #0]
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 8000bf8:	e7eb      	b.n	8000bd2 <Flash_Read_Data+0xa>
	}
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <Convert_To_Str>:

void Convert_To_Str (uint32_t *data, char *str)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen(data)/4) + ((strlen(data) % 4) != 0)) *4;
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff faa8 	bl	8000164 <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	089c      	lsrs	r4, r3, #2
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff faa3 	bl	8000164 <strlen>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	bf14      	ite	ne
 8000c28:	2301      	movne	r3, #1
 8000c2a:	2300      	moveq	r3, #0
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4423      	add	r3, r4
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e01b      	b.n	8000c72 <Convert_To_Str+0x6e>
	{
		str[i] = data[i/4]>>(8*(i%4));
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	da00      	bge.n	8000c42 <Convert_To_Str+0x3e>
 8000c40:	3303      	adds	r3, #3
 8000c42:	109b      	asrs	r3, r3, #2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4259      	negs	r1, r3
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	f001 0103 	and.w	r1, r1, #3
 8000c58:	bf58      	it	pl
 8000c5a:	424b      	negpl	r3, r1
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	fa22 f103 	lsr.w	r1, r2, r3
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	b2ca      	uxtb	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	dbdf      	blt.n	8000c3a <Convert_To_Str+0x36>
	}
}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd90      	pop	{r4, r7, pc}
	...

08000c84 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c98:	4b3e      	ldr	r3, [pc, #248]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a3d      	ldr	r2, [pc, #244]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb0:	4b38      	ldr	r3, [pc, #224]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a37      	ldr	r2, [pc, #220]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000cb6:	f043 0320 	orr.w	r3, r3, #32
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0320 	and.w	r3, r3, #32
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a31      	ldr	r2, [pc, #196]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0308 	and.w	r3, r3, #8
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R1_Pin|R2_Pin|R3_Pin|R4_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	21f0      	movs	r1, #240	; 0xf0
 8000cfc:	4826      	ldr	r0, [pc, #152]	; (8000d98 <MX_GPIO_Init+0x114>)
 8000cfe:	f001 ff8a 	bl	8002c16 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8
 8000d02:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000d06:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4619      	mov	r1, r3
 8000d12:	4821      	ldr	r0, [pc, #132]	; (8000d98 <MX_GPIO_Init+0x114>)
 8000d14:	f001 fe0e 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 8000d18:	230f      	movs	r3, #15
 8000d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	481b      	ldr	r0, [pc, #108]	; (8000d98 <MX_GPIO_Init+0x114>)
 8000d2c:	f001 fe02 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000d30:	f649 63f3 	movw	r3, #40691	; 0x9ef3
 8000d34:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d36:	2303      	movs	r3, #3
 8000d38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4816      	ldr	r0, [pc, #88]	; (8000d9c <MX_GPIO_Init+0x118>)
 8000d42:	f001 fdf7 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8000d46:	23f0      	movs	r3, #240	; 0xf0
 8000d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480e      	ldr	r0, [pc, #56]	; (8000d98 <MX_GPIO_Init+0x114>)
 8000d5e:	f001 fde9 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d62:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000d66:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4619      	mov	r1, r3
 8000d72:	480b      	ldr	r0, [pc, #44]	; (8000da0 <MX_GPIO_Init+0x11c>)
 8000d74:	f001 fdde 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <MX_GPIO_Init+0x120>)
 8000d88:	f001 fdd4 	bl	8002934 <HAL_GPIO_Init>

}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40011000 	.word	0x40011000
 8000d9c:	40010800 	.word	0x40010800
 8000da0:	40010c00 	.word	0x40010c00
 8000da4:	40011400 	.word	0x40011400

08000da8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_I2C1_Init+0x50>)
 8000dae:	4a13      	ldr	r2, [pc, #76]	; (8000dfc <MX_I2C1_Init+0x54>)
 8000db0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_I2C1_Init+0x50>)
 8000db4:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <MX_I2C1_Init+0x58>)
 8000db6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_I2C1_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_I2C1_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_I2C1_Init+0x50>)
 8000dc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <MX_I2C1_Init+0x50>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_I2C1_Init+0x50>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <MX_I2C1_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_I2C1_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_I2C1_Init+0x50>)
 8000de6:	f001 ff2f 	bl	8002c48 <HAL_I2C_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000df0:	f000 ff0a 	bl	8001c08 <Error_Handler>
  }

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200000c0 	.word	0x200000c0
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	000186a0 	.word	0x000186a0

08000e04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <HAL_I2C_MspInit+0x70>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d123      	bne.n	8000e6c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_I2C_MspInit+0x74>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <HAL_I2C_MspInit+0x74>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_I2C_MspInit+0x74>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e3c:	23c0      	movs	r3, #192	; 0xc0
 8000e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e40:	2312      	movs	r3, #18
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480b      	ldr	r0, [pc, #44]	; (8000e7c <HAL_I2C_MspInit+0x78>)
 8000e50:	f001 fd70 	bl	8002934 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_I2C_MspInit+0x74>)
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_I2C_MspInit+0x74>)
 8000e5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e5e:	61d3      	str	r3, [r2, #28]
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_I2C_MspInit+0x74>)
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40005400 	.word	0x40005400
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010c00 	.word	0x40010c00

08000e80 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8000e96:	2308      	movs	r3, #8
 8000e98:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8000e9a:	2028      	movs	r0, #40	; 0x28
 8000e9c:	f001 f99a 	bl	80021d4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	7bfa      	ldrb	r2, [r7, #15]
 8000ea6:	2130      	movs	r1, #48	; 0x30
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f829 	bl	8000f00 <lcd_write>
	HAL_Delay(5);
 8000eae:	2005      	movs	r0, #5
 8000eb0:	f001 f990 	bl	80021d4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	7bfa      	ldrb	r2, [r7, #15]
 8000eba:	2130      	movs	r1, #48	; 0x30
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f81f 	bl	8000f00 <lcd_write>
	HAL_Delay(1);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f001 f986 	bl	80021d4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	7bfa      	ldrb	r2, [r7, #15]
 8000ece:	2130      	movs	r1, #48	; 0x30
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f815 	bl	8000f00 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	2102      	movs	r1, #2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f80e 	bl	8000f00 <lcd_write>

	/* set cursor mode */
	//brak podkreślenia oraz migania kursora
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	210c      	movs	r1, #12
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f807 	bl	8000f00 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f89e 	bl	8001034 <lcd_clear>

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	71bb      	strb	r3, [r7, #6]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	f023 030f 	bic.w	r3, r3, #15
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	797b      	ldrb	r3, [r7, #5]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000f28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f2c:	f023 030f 	bic.w	r3, r3, #15
 8000f30:	b25a      	sxtb	r2, r3
 8000f32:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	797b      	ldrb	r3, [r7, #5]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	b25a      	sxtb	r2, r3
 8000f58:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	b299      	uxth	r1, r3
 8000f68:	f107 020c 	add.w	r2, r7, #12
 8000f6c:	2364      	movs	r3, #100	; 0x64
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2304      	movs	r3, #4
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <lcd_write+0x88>)
 8000f74:	f001 ffa0 	bl	8002eb8 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000f78:	2005      	movs	r0, #5
 8000f7a:	f001 f92b 	bl	80021d4 <HAL_Delay>
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000c0 	.word	0x200000c0

08000f8c <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f842 	bl	8001034 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ffa1 	bl	8000f00 <lcd_write>
	while(lcd->f_line[i])
 8000fbe:	e00f      	b.n	8000fe0 <lcd_display+0x54>
	{
 		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7818      	ldrb	r0, [r3, #0]
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	7859      	ldrb	r1, [r3, #1]
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f7ff ff93 	bl	8000f00 <lcd_write>
		i++;
 8000fda:	7bbb      	ldrb	r3, [r7, #14]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	785b      	ldrb	r3, [r3, #1]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1e9      	bne.n	8000fc0 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	21c0      	movs	r1, #192	; 0xc0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff81 	bl	8000f00 <lcd_write>
	while(lcd->s_line[i])
 8000ffe:	e00f      	b.n	8001020 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7818      	ldrb	r0, [r3, #0]
 8001004:	7bbb      	ldrb	r3, [r7, #14]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	7c99      	ldrb	r1, [r3, #18]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	f7ff ff73 	bl	8000f00 <lcd_write>
		i++;
 800101a:	7bbb      	ldrb	r3, [r7, #14]
 800101c:	3301      	adds	r3, #1
 800101e:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	7c9b      	ldrb	r3, [r3, #18]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1e9      	bne.n	8001000 <lcd_display+0x74>
	}
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 800104a:	2308      	movs	r3, #8
 800104c:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	2101      	movs	r1, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff52 	bl	8000f00 <lcd_write>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <encode_frame>:
/* USER CODE BEGIN 0 */
__IO uint32_t Rx_Data[4];
uint8_t string[10];
//////////////////////////////////////////FLASH

void encode_frame(char *msg,char *output){
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	int length = strlen(msg) + 3;
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff f878 	bl	8000164 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	3303      	adds	r3, #3
 8001078:	60fb      	str	r3, [r7, #12]
	int checksum = calc_checksum(msg);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f89e 	bl	80011bc <calc_checksum>
 8001080:	60b8      	str	r0, [r7, #8]
	sprintf (output, "#%02X%s%02X%c\r\n",length, msg, checksum,'$');
 8001082:	2324      	movs	r3, #36	; 0x24
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4904      	ldr	r1, [pc, #16]	; (80010a0 <encode_frame+0x3c>)
 8001090:	6838      	ldr	r0, [r7, #0]
 8001092:	f003 fe67 	bl	8004d64 <siprintf>
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	08006630 	.word	0x08006630

080010a4 <fsend>:

void fsend(char* format,...){
 80010a4:	b40f      	push	{r0, r1, r2, r3}
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b0c6      	sub	sp, #280	; 0x118
 80010aa:	af00      	add	r7, sp, #0
  char tmp_rs[128];
  int i;
  __IO int idx;
  va_list arglist;
  va_start(arglist,format);
 80010ac:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80010b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  vsprintf(tmp_rs,format,arglist);
 80010b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010b8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80010bc:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 fe85 	bl	8004dd0 <vsiprintf>
  va_end(arglist);

  char encframe[134] = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4618      	mov	r0, r3
 80010ca:	2386      	movs	r3, #134	; 0x86
 80010cc:	461a      	mov	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	f003 fe40 	bl	8004d54 <memset>
  encode_frame(tmp_rs,encframe);
 80010d4:	1d3a      	adds	r2, r7, #4
 80010d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ffc1 	bl	8001064 <encode_frame>

  idx=buff_send.tx_b;
 80010e2:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <fsend+0x110>)
 80010e4:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80010e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  for(i=0;i<strlen(encframe);i++){
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80010f2:	e019      	b.n	8001128 <fsend+0x84>
  buff_send.tx_buff[idx]=encframe[i];
 80010f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010f8:	1d39      	adds	r1, r7, #4
 80010fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80010fe:	440a      	add	r2, r1
 8001100:	7811      	ldrb	r1, [r2, #0]
 8001102:	4a2c      	ldr	r2, [pc, #176]	; (80011b4 <fsend+0x110>)
 8001104:	54d1      	strb	r1, [r2, r3]
  idx++;
 8001106:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800110a:	3301      	adds	r3, #1
 800110c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if(idx >= MAX_BUFFER_SIZE)idx=0;
 8001110:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001114:	2bff      	cmp	r3, #255	; 0xff
 8001116:	dd02      	ble.n	800111e <fsend+0x7a>
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  for(i=0;i<strlen(encframe);i++){
 800111e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001122:	3301      	adds	r3, #1
 8001124:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f81a 	bl	8000164 <strlen>
 8001130:	4602      	mov	r2, r0
 8001132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001136:	429a      	cmp	r2, r3
 8001138:	d8dc      	bhi.n	80010f4 <fsend+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113a:	b672      	cpsid	i
  }
  __disable_irq();
  if((buff_send.tx_e==buff_send.tx_b)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <fsend+0x110>)
 800113e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <fsend+0x110>)
 8001144:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8001148:	429a      	cmp	r2, r3
 800114a:	d123      	bne.n	8001194 <fsend+0xf0>
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <fsend+0x114>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001156:	2b80      	cmp	r3, #128	; 0x80
 8001158:	d11c      	bne.n	8001194 <fsend+0xf0>
  buff_send.tx_e=idx;
 800115a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <fsend+0x110>)
 8001162:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  uint8_t tmp=buff_send.tx_buff[buff_send.tx_b];
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <fsend+0x110>)
 8001168:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800116c:	461a      	mov	r2, r3
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <fsend+0x110>)
 8001170:	5c9a      	ldrb	r2, [r3, r2]
 8001172:	1cfb      	adds	r3, r7, #3
 8001174:	701a      	strb	r2, [r3, #0]
  buff_send.tx_b++;
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <fsend+0x110>)
 8001178:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800117c:	3301      	adds	r3, #1
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <fsend+0x110>)
 8001182:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  if(buff_send.tx_b >= MAX_BUFFER_SIZE)buff_send.tx_b=0;
  HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8001186:	1cfb      	adds	r3, r7, #3
 8001188:	2201      	movs	r2, #1
 800118a:	4619      	mov	r1, r3
 800118c:	480a      	ldr	r0, [pc, #40]	; (80011b8 <fsend+0x114>)
 800118e:	f003 fa6f 	bl	8004670 <HAL_UART_Transmit_IT>
  if((buff_send.tx_e==buff_send.tx_b)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){
 8001192:	e005      	b.n	80011a0 <fsend+0xfc>
  }else{
	  buff_send.tx_e=idx;
 8001194:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <fsend+0x110>)
 800119c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  __ASM volatile ("cpsie i" : : : "memory");
 80011a0:	b662      	cpsie	i
  }
  __enable_irq();
  }
 80011a2:	bf00      	nop
 80011a4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80011a8:	46bd      	mov	sp, r7
 80011aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011ae:	b004      	add	sp, #16
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000240 	.word	0x20000240
 80011b8:	20000438 	.word	0x20000438

080011bc <calc_checksum>:

int calc_checksum(const char *msg){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
    int sum_of_bytes = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
    int result = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
    for(int i = 0; i < strlen(msg);i++){
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e013      	b.n	80011fa <calc_checksum+0x3e>
        sum_of_bytes = sum_of_bytes + msg[i];
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	4413      	add	r3, r2
 80011e0:	617b      	str	r3, [r7, #20]
        result = sum_of_bytes %= 256;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	425a      	negs	r2, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	bf58      	it	pl
 80011ec:	4253      	negpl	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
    for(int i = 0; i < strlen(msg);i++){
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3301      	adds	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7fe ffb2 	bl	8000164 <strlen>
 8001200:	4602      	mov	r2, r0
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8e4      	bhi.n	80011d2 <calc_checksum+0x16>
    }
    return result;
 8001208:	693b      	ldr	r3, [r7, #16]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <hex_to_dec>:
{
    sprintf(complimentHex,"%X",complimentInt);
}

int hex_to_dec(char* hex)
{
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	int decimal = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
	  int length = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
	  length = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
	  char digit;
	  for (int i = 0; i < length; i++)
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	e06a      	b.n	8001304 <hex_to_dec+0xf0>
	    {
	      digit = hex[length - 1 - i];
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	461a      	mov	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	72fb      	strb	r3, [r7, #11]
	      if (digit >= '0' && digit <= '9')
 8001240:	7afb      	ldrb	r3, [r7, #11]
 8001242:	2b2f      	cmp	r3, #47	; 0x2f
 8001244:	d92f      	bls.n	80012a6 <hex_to_dec+0x92>
 8001246:	7afb      	ldrb	r3, [r7, #11]
 8001248:	2b39      	cmp	r3, #57	; 0x39
 800124a:	d82c      	bhi.n	80012a6 <hex_to_dec+0x92>
		decimal += (digit - '0') * pow (16, i);
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	3b30      	subs	r3, #48	; 0x30
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f8e1 	bl	8000418 <__aeabi_i2d>
 8001256:	4604      	mov	r4, r0
 8001258:	460d      	mov	r5, r1
 800125a:	6938      	ldr	r0, [r7, #16]
 800125c:	f7ff f8dc 	bl	8000418 <__aeabi_i2d>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	f04f 0000 	mov.w	r0, #0
 8001268:	492b      	ldr	r1, [pc, #172]	; (8001318 <hex_to_dec+0x104>)
 800126a:	f004 f9ad 	bl	80055c8 <pow>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4620      	mov	r0, r4
 8001274:	4629      	mov	r1, r5
 8001276:	f7ff f939 	bl	80004ec <__aeabi_dmul>
 800127a:	4603      	mov	r3, r0
 800127c:	460c      	mov	r4, r1
 800127e:	4625      	mov	r5, r4
 8001280:	461c      	mov	r4, r3
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff f8c8 	bl	8000418 <__aeabi_i2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4620      	mov	r0, r4
 800128e:	4629      	mov	r1, r5
 8001290:	f7fe ff76 	bl	8000180 <__adddf3>
 8001294:	4603      	mov	r3, r0
 8001296:	460c      	mov	r4, r1
 8001298:	4618      	mov	r0, r3
 800129a:	4621      	mov	r1, r4
 800129c:	f7ff fbd6 	bl	8000a4c <__aeabi_d2iz>
 80012a0:	4603      	mov	r3, r0
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	e02b      	b.n	80012fe <hex_to_dec+0xea>
	      else
		decimal += (digit - 'A' + 10) * pow (16, i);
 80012a6:	7afb      	ldrb	r3, [r7, #11]
 80012a8:	3b37      	subs	r3, #55	; 0x37
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8b4 	bl	8000418 <__aeabi_i2d>
 80012b0:	4604      	mov	r4, r0
 80012b2:	460d      	mov	r5, r1
 80012b4:	6938      	ldr	r0, [r7, #16]
 80012b6:	f7ff f8af 	bl	8000418 <__aeabi_i2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	f04f 0000 	mov.w	r0, #0
 80012c2:	4915      	ldr	r1, [pc, #84]	; (8001318 <hex_to_dec+0x104>)
 80012c4:	f004 f980 	bl	80055c8 <pow>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7ff f90c 	bl	80004ec <__aeabi_dmul>
 80012d4:	4603      	mov	r3, r0
 80012d6:	460c      	mov	r4, r1
 80012d8:	4625      	mov	r5, r4
 80012da:	461c      	mov	r4, r3
 80012dc:	6978      	ldr	r0, [r7, #20]
 80012de:	f7ff f89b 	bl	8000418 <__aeabi_i2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4620      	mov	r0, r4
 80012e8:	4629      	mov	r1, r5
 80012ea:	f7fe ff49 	bl	8000180 <__adddf3>
 80012ee:	4603      	mov	r3, r0
 80012f0:	460c      	mov	r4, r1
 80012f2:	4618      	mov	r0, r3
 80012f4:	4621      	mov	r1, r4
 80012f6:	f7ff fba9 	bl	8000a4c <__aeabi_d2iz>
 80012fa:	4603      	mov	r3, r0
 80012fc:	617b      	str	r3, [r7, #20]
	  for (int i = 0; i < length; i++)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	3301      	adds	r3, #1
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	db90      	blt.n	800122e <hex_to_dec+0x1a>
	    }
	  return decimal;
 800130c:	697b      	ldr	r3, [r7, #20]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bdb0      	pop	{r4, r5, r7, pc}
 8001316:	bf00      	nop
 8001318:	40300000 	.word	0x40300000

0800131c <check_cmd>:


void check_cmd()
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
	uint8_t* strippedcommand = &cmd[2];
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <check_cmd+0x7c>)
 8001324:	607b      	str	r3, [r7, #4]
	if (!strcmp((const char*) strippedcommand,"open;"))
 8001326:	491d      	ldr	r1, [pc, #116]	; (800139c <check_cmd+0x80>)
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7fe ff11 	bl	8000150 <strcmp>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d10f      	bne.n	8001354 <check_cmd+0x38>
	{
	fsend("Odebrano poprawnie\r\n");
 8001334:	481a      	ldr	r0, [pc, #104]	; (80013a0 <check_cmd+0x84>)
 8001336:	f7ff feb5 	bl	80010a4 <fsend>
	set_ang(0,0);
 800133a:	2100      	movs	r1, #0
 800133c:	2000      	movs	r0, #0
 800133e:	f000 fc69 	bl	8001c14 <set_ang>
	sprintf((char *)disp.s_line, "OTWARTE");
 8001342:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <check_cmd+0x88>)
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <check_cmd+0x8c>)
 8001346:	cb03      	ldmia	r3!, {r0, r1}
 8001348:	6010      	str	r0, [r2, #0]
 800134a:	6051      	str	r1, [r2, #4]
	lcd_display(&disp);
 800134c:	4817      	ldr	r0, [pc, #92]	; (80013ac <check_cmd+0x90>)
 800134e:	f7ff fe1d 	bl	8000f8c <lcd_display>
	set_ang(900,0);
	sprintf((char *)disp.s_line, "ZAMKNIETE");
	lcd_display(&disp);
	}
	else fsend("Nie odebrano\r\n");
}
 8001352:	e01c      	b.n	800138e <check_cmd+0x72>
	else if (!strcmp((const char*) strippedcommand,"close;"))
 8001354:	4916      	ldr	r1, [pc, #88]	; (80013b0 <check_cmd+0x94>)
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7fe fefa 	bl	8000150 <strcmp>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d112      	bne.n	8001388 <check_cmd+0x6c>
	fsend("Odebrano poprawnie\r\n");
 8001362:	480f      	ldr	r0, [pc, #60]	; (80013a0 <check_cmd+0x84>)
 8001364:	f7ff fe9e 	bl	80010a4 <fsend>
	set_ang(900,0);
 8001368:	2100      	movs	r1, #0
 800136a:	f44f 7061 	mov.w	r0, #900	; 0x384
 800136e:	f000 fc51 	bl	8001c14 <set_ang>
	sprintf((char *)disp.s_line, "ZAMKNIETE");
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <check_cmd+0x88>)
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <check_cmd+0x98>)
 8001376:	cb03      	ldmia	r3!, {r0, r1}
 8001378:	6010      	str	r0, [r2, #0]
 800137a:	6051      	str	r1, [r2, #4]
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	8113      	strh	r3, [r2, #8]
	lcd_display(&disp);
 8001380:	480a      	ldr	r0, [pc, #40]	; (80013ac <check_cmd+0x90>)
 8001382:	f7ff fe03 	bl	8000f8c <lcd_display>
}
 8001386:	e002      	b.n	800138e <check_cmd+0x72>
	else fsend("Nie odebrano\r\n");
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <check_cmd+0x9c>)
 800138a:	f7ff fe8b 	bl	80010a4 <fsend>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000036a 	.word	0x2000036a
 800139c:	08006644 	.word	0x08006644
 80013a0:	0800664c 	.word	0x0800664c
 80013a4:	20000356 	.word	0x20000356
 80013a8:	08006664 	.word	0x08006664
 80013ac:	20000344 	.word	0x20000344
 80013b0:	0800666c 	.word	0x0800666c
 80013b4:	08006674 	.word	0x08006674
 80013b8:	08006680 	.word	0x08006680

080013bc <check_frame>:

void check_frame()
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
	char frame_lenHex[2] = {cmd[0],cmd[1]};
 80013c2:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <check_frame+0xb4>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	713b      	strb	r3, [r7, #4]
 80013c8:	4b29      	ldr	r3, [pc, #164]	; (8001470 <check_frame+0xb4>)
 80013ca:	785b      	ldrb	r3, [r3, #1]
 80013cc:	717b      	strb	r3, [r7, #5]
	int frame_lenInt = hex_to_dec(frame_lenHex);
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff1f 	bl	8001214 <hex_to_dec>
 80013d6:	6178      	str	r0, [r7, #20]
	if(frame_lenInt > 128 || frame_lenInt < 3)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b80      	cmp	r3, #128	; 0x80
 80013dc:	dc02      	bgt.n	80013e4 <check_frame+0x28>
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	dc08      	bgt.n	80013f6 <check_frame+0x3a>
	{
		memset(cmd,0,sizeof cmd);
 80013e4:	2287      	movs	r2, #135	; 0x87
 80013e6:	2100      	movs	r1, #0
 80013e8:	4821      	ldr	r0, [pc, #132]	; (8001470 <check_frame+0xb4>)
 80013ea:	f003 fcb3 	bl	8004d54 <memset>
		cmd_pointer = 0;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <check_frame+0xb8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
		return;
 80013f4:	e038      	b.n	8001468 <check_frame+0xac>
	}
	int calculated_length = strlen((char*)&cmd[2]) + 1;
 80013f6:	4820      	ldr	r0, [pc, #128]	; (8001478 <check_frame+0xbc>)
 80013f8:	f7fe feb4 	bl	8000164 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	3301      	adds	r3, #1
 8001400:	613b      	str	r3, [r7, #16]
		if(frame_lenInt != calculated_length){
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	429a      	cmp	r2, r3
 8001408:	d008      	beq.n	800141c <check_frame+0x60>
			memset(cmd,0,sizeof cmd);
 800140a:	2287      	movs	r2, #135	; 0x87
 800140c:	2100      	movs	r1, #0
 800140e:	4818      	ldr	r0, [pc, #96]	; (8001470 <check_frame+0xb4>)
 8001410:	f003 fca0 	bl	8004d54 <memset>
			cmd_pointer = 0;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <check_frame+0xb8>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
			return;
 800141a:	e025      	b.n	8001468 <check_frame+0xac>
		}
	char checksum_from_frame[2] = {cmd[frame_lenInt-1],cmd[frame_lenInt]};
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3b01      	subs	r3, #1
 8001420:	4a13      	ldr	r2, [pc, #76]	; (8001470 <check_frame+0xb4>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	703b      	strb	r3, [r7, #0]
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <check_frame+0xb4>)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	707b      	strb	r3, [r7, #1]
	int  checksum_from_frameInt = hex_to_dec(checksum_from_frame);
 8001430:	463b      	mov	r3, r7
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff feee 	bl	8001214 <hex_to_dec>
 8001438:	60f8      	str	r0, [r7, #12]
	cmd[frame_lenInt-1] = '\0';
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3b01      	subs	r3, #1
 800143e:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <check_frame+0xb4>)
 8001440:	2100      	movs	r1, #0
 8001442:	54d1      	strb	r1, [r2, r3]
	int calculated_checksum = calc_checksum((char*)&cmd[2]);
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <check_frame+0xbc>)
 8001446:	f7ff feb9 	bl	80011bc <calc_checksum>
 800144a:	60b8      	str	r0, [r7, #8]

	if(calculated_checksum == checksum_from_frameInt)
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d101      	bne.n	8001458 <check_frame+0x9c>
	{
		check_cmd();
 8001454:	f7ff ff62 	bl	800131c <check_cmd>
	}
	memset(cmd,0,sizeof cmd);
 8001458:	2287      	movs	r2, #135	; 0x87
 800145a:	2100      	movs	r1, #0
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <check_frame+0xb4>)
 800145e:	f003 fc79 	bl	8004d54 <memset>
	cmd_pointer = 0;
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <check_frame+0xb8>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
}
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000368 	.word	0x20000368
 8001474:	200000ac 	.word	0x200000ac
 8001478:	2000036a 	.word	0x2000036a

0800147c <check_pin>:
void check_pin()
{
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	af00      	add	r7, sp, #0

	uint8_t i;
//	  if(!strcmp(pin, key)){
		if(!strcmp(pin, string)){
 8001480:	4921      	ldr	r1, [pc, #132]	; (8001508 <check_pin+0x8c>)
 8001482:	4822      	ldr	r0, [pc, #136]	; (800150c <check_pin+0x90>)
 8001484:	f7fe fe64 	bl	8000150 <strcmp>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d118      	bne.n	80014c0 <check_pin+0x44>
		  sprintf((char *)disp.f_line, "");
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <check_pin+0x94>)
 8001490:	2200      	movs	r2, #0
 8001492:	705a      	strb	r2, [r3, #1]
		  lcd_display(&disp);
 8001494:	481e      	ldr	r0, [pc, #120]	; (8001510 <check_pin+0x94>)
 8001496:	f7ff fd79 	bl	8000f8c <lcd_display>
		  sprintf((char *)disp.s_line, "Otwarte");
 800149a:	4a1e      	ldr	r2, [pc, #120]	; (8001514 <check_pin+0x98>)
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <check_pin+0x9c>)
 800149e:	cb03      	ldmia	r3!, {r0, r1}
 80014a0:	6010      	str	r0, [r2, #0]
 80014a2:	6051      	str	r1, [r2, #4]
		  lcd_display(&disp);
 80014a4:	481a      	ldr	r0, [pc, #104]	; (8001510 <check_pin+0x94>)
 80014a6:	f7ff fd71 	bl	8000f8c <lcd_display>
		  set_ang(0,0);
 80014aa:	2100      	movs	r1, #0
 80014ac:	2000      	movs	r0, #0
 80014ae:	f000 fbb1 	bl	8001c14 <set_ang>
		  pointer_pin = 0;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <check_pin+0xa0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
	      open = 1;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <check_pin+0xa4>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
		  pin[2]=' ';
		  pin[3]=' ';
		  pointer_pin = 0;
		  open = 0;
	  }
}
 80014be:	e020      	b.n	8001502 <check_pin+0x86>
		  sprintf((char *)disp.s_line, "Niepoprawny pin!");
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <check_pin+0x94>)
 80014c2:	4a18      	ldr	r2, [pc, #96]	; (8001524 <check_pin+0xa8>)
 80014c4:	f103 0512 	add.w	r5, r3, #18
 80014c8:	4614      	mov	r4, r2
 80014ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014cc:	6028      	str	r0, [r5, #0]
 80014ce:	6069      	str	r1, [r5, #4]
 80014d0:	60aa      	str	r2, [r5, #8]
 80014d2:	60eb      	str	r3, [r5, #12]
 80014d4:	7823      	ldrb	r3, [r4, #0]
 80014d6:	742b      	strb	r3, [r5, #16]
		  lcd_display(&disp);
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <check_pin+0x94>)
 80014da:	f7ff fd57 	bl	8000f8c <lcd_display>
		  pin[0]=' ';
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <check_pin+0x90>)
 80014e0:	2220      	movs	r2, #32
 80014e2:	701a      	strb	r2, [r3, #0]
		  pin[1]=' ';
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <check_pin+0x90>)
 80014e6:	2220      	movs	r2, #32
 80014e8:	705a      	strb	r2, [r3, #1]
		  pin[2]=' ';
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <check_pin+0x90>)
 80014ec:	2220      	movs	r2, #32
 80014ee:	709a      	strb	r2, [r3, #2]
		  pin[3]=' ';
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <check_pin+0x90>)
 80014f2:	2220      	movs	r2, #32
 80014f4:	70da      	strb	r2, [r3, #3]
		  pointer_pin = 0;
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <check_pin+0xa0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
		  open = 0;
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <check_pin+0xa4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
}
 8001502:	bf00      	nop
 8001504:	bdb0      	pop	{r4, r5, r7, pc}
 8001506:	bf00      	nop
 8001508:	20000114 	.word	0x20000114
 800150c:	20000234 	.word	0x20000234
 8001510:	20000344 	.word	0x20000344
 8001514:	20000356 	.word	0x20000356
 8001518:	08006690 	.word	0x08006690
 800151c:	200000ad 	.word	0x200000ad
 8001520:	200000af 	.word	0x200000af
 8001524:	08006698 	.word	0x08006698

08001528 <read_keypad>:

char read_keypad (void)
{
 8001528:	b598      	push	{r3, r4, r7, lr}
 800152a:	af00      	add	r7, sp, #0

	star = 0;
 800152c:	4b95      	ldr	r3, [pc, #596]	; (8001784 <read_keypad+0x25c>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  //Pull the R1 low
 8001532:	2200      	movs	r2, #0
 8001534:	2110      	movs	r1, #16
 8001536:	4894      	ldr	r0, [pc, #592]	; (8001788 <read_keypad+0x260>)
 8001538:	f001 fb6d 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 800153c:	2201      	movs	r2, #1
 800153e:	2120      	movs	r1, #32
 8001540:	4891      	ldr	r0, [pc, #580]	; (8001788 <read_keypad+0x260>)
 8001542:	f001 fb68 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8001546:	2201      	movs	r2, #1
 8001548:	2140      	movs	r1, #64	; 0x40
 800154a:	488f      	ldr	r0, [pc, #572]	; (8001788 <read_keypad+0x260>)
 800154c:	f001 fb63 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8001550:	2201      	movs	r2, #1
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	488c      	ldr	r0, [pc, #560]	; (8001788 <read_keypad+0x260>)
 8001556:	f001 fb5e 	bl	8002c16 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 800155a:	2101      	movs	r1, #1
 800155c:	488a      	ldr	r0, [pc, #552]	; (8001788 <read_keypad+0x260>)
 800155e:	f001 fb43 	bl	8002be8 <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <read_keypad+0x44>
	{
		return '1';
 8001568:	2331      	movs	r3, #49	; 0x31
 800156a:	e108      	b.n	800177e <read_keypad+0x256>

	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 800156c:	2102      	movs	r1, #2
 800156e:	4886      	ldr	r0, [pc, #536]	; (8001788 <read_keypad+0x260>)
 8001570:	f001 fb3a 	bl	8002be8 <HAL_GPIO_ReadPin>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <read_keypad+0x56>
	{
		return '2';
 800157a:	2332      	movs	r3, #50	; 0x32
 800157c:	e0ff      	b.n	800177e <read_keypad+0x256>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 800157e:	2104      	movs	r1, #4
 8001580:	4881      	ldr	r0, [pc, #516]	; (8001788 <read_keypad+0x260>)
 8001582:	f001 fb31 	bl	8002be8 <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <read_keypad+0x68>
	{
		return '3';
 800158c:	2333      	movs	r3, #51	; 0x33
 800158e:	e0f6      	b.n	800177e <read_keypad+0x256>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8001590:	2108      	movs	r1, #8
 8001592:	487d      	ldr	r0, [pc, #500]	; (8001788 <read_keypad+0x260>)
 8001594:	f001 fb28 	bl	8002be8 <HAL_GPIO_ReadPin>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <read_keypad+0x7a>
	{
		return 'A';
 800159e:	2341      	movs	r3, #65	; 0x41
 80015a0:	e0ed      	b.n	800177e <read_keypad+0x256>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 80015a2:	2201      	movs	r2, #1
 80015a4:	2110      	movs	r1, #16
 80015a6:	4878      	ldr	r0, [pc, #480]	; (8001788 <read_keypad+0x260>)
 80015a8:	f001 fb35 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);  // Pull the R2 High
 80015ac:	2200      	movs	r2, #0
 80015ae:	2120      	movs	r1, #32
 80015b0:	4875      	ldr	r0, [pc, #468]	; (8001788 <read_keypad+0x260>)
 80015b2:	f001 fb30 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 80015b6:	2201      	movs	r2, #1
 80015b8:	2140      	movs	r1, #64	; 0x40
 80015ba:	4873      	ldr	r0, [pc, #460]	; (8001788 <read_keypad+0x260>)
 80015bc:	f001 fb2b 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 80015c0:	2201      	movs	r2, #1
 80015c2:	2180      	movs	r1, #128	; 0x80
 80015c4:	4870      	ldr	r0, [pc, #448]	; (8001788 <read_keypad+0x260>)
 80015c6:	f001 fb26 	bl	8002c16 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80015ca:	2101      	movs	r1, #1
 80015cc:	486e      	ldr	r0, [pc, #440]	; (8001788 <read_keypad+0x260>)
 80015ce:	f001 fb0b 	bl	8002be8 <HAL_GPIO_ReadPin>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <read_keypad+0xb4>
	{
		return '4';
 80015d8:	2334      	movs	r3, #52	; 0x34
 80015da:	e0d0      	b.n	800177e <read_keypad+0x256>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80015dc:	2102      	movs	r1, #2
 80015de:	486a      	ldr	r0, [pc, #424]	; (8001788 <read_keypad+0x260>)
 80015e0:	f001 fb02 	bl	8002be8 <HAL_GPIO_ReadPin>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <read_keypad+0xc6>
	{
		return '5';
 80015ea:	2335      	movs	r3, #53	; 0x35
 80015ec:	e0c7      	b.n	800177e <read_keypad+0x256>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 80015ee:	2104      	movs	r1, #4
 80015f0:	4865      	ldr	r0, [pc, #404]	; (8001788 <read_keypad+0x260>)
 80015f2:	f001 faf9 	bl	8002be8 <HAL_GPIO_ReadPin>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <read_keypad+0xd8>
	{
		return '6';
 80015fc:	2336      	movs	r3, #54	; 0x36
 80015fe:	e0be      	b.n	800177e <read_keypad+0x256>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8001600:	2108      	movs	r1, #8
 8001602:	4861      	ldr	r0, [pc, #388]	; (8001788 <read_keypad+0x260>)
 8001604:	f001 faf0 	bl	8002be8 <HAL_GPIO_ReadPin>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <read_keypad+0xea>
	{
		return 'B';
 800160e:	2342      	movs	r3, #66	; 0x42
 8001610:	e0b5      	b.n	800177e <read_keypad+0x256>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 8001612:	2201      	movs	r2, #1
 8001614:	2110      	movs	r1, #16
 8001616:	485c      	ldr	r0, [pc, #368]	; (8001788 <read_keypad+0x260>)
 8001618:	f001 fafd 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 800161c:	2201      	movs	r2, #1
 800161e:	2120      	movs	r1, #32
 8001620:	4859      	ldr	r0, [pc, #356]	; (8001788 <read_keypad+0x260>)
 8001622:	f001 faf8 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);  // Pull the R3 High
 8001626:	2200      	movs	r2, #0
 8001628:	2140      	movs	r1, #64	; 0x40
 800162a:	4857      	ldr	r0, [pc, #348]	; (8001788 <read_keypad+0x260>)
 800162c:	f001 faf3 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 8001630:	2201      	movs	r2, #1
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	4854      	ldr	r0, [pc, #336]	; (8001788 <read_keypad+0x260>)
 8001636:	f001 faee 	bl	8002c16 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 800163a:	2101      	movs	r1, #1
 800163c:	4852      	ldr	r0, [pc, #328]	; (8001788 <read_keypad+0x260>)
 800163e:	f001 fad3 	bl	8002be8 <HAL_GPIO_ReadPin>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <read_keypad+0x124>
	{
		return '7';
 8001648:	2337      	movs	r3, #55	; 0x37
 800164a:	e098      	b.n	800177e <read_keypad+0x256>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 800164c:	2102      	movs	r1, #2
 800164e:	484e      	ldr	r0, [pc, #312]	; (8001788 <read_keypad+0x260>)
 8001650:	f001 faca 	bl	8002be8 <HAL_GPIO_ReadPin>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <read_keypad+0x136>
	{
		return '8';
 800165a:	2338      	movs	r3, #56	; 0x38
 800165c:	e08f      	b.n	800177e <read_keypad+0x256>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 800165e:	2104      	movs	r1, #4
 8001660:	4849      	ldr	r0, [pc, #292]	; (8001788 <read_keypad+0x260>)
 8001662:	f001 fac1 	bl	8002be8 <HAL_GPIO_ReadPin>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <read_keypad+0x148>
	{
		return '9';
 800166c:	2339      	movs	r3, #57	; 0x39
 800166e:	e086      	b.n	800177e <read_keypad+0x256>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8001670:	2108      	movs	r1, #8
 8001672:	4845      	ldr	r0, [pc, #276]	; (8001788 <read_keypad+0x260>)
 8001674:	f001 fab8 	bl	8002be8 <HAL_GPIO_ReadPin>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <read_keypad+0x15a>
	{
		return 'C';
 800167e:	2343      	movs	r3, #67	; 0x43
 8001680:	e07d      	b.n	800177e <read_keypad+0x256>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 8001682:	2201      	movs	r2, #1
 8001684:	2110      	movs	r1, #16
 8001686:	4840      	ldr	r0, [pc, #256]	; (8001788 <read_keypad+0x260>)
 8001688:	f001 fac5 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 800168c:	2201      	movs	r2, #1
 800168e:	2120      	movs	r1, #32
 8001690:	483d      	ldr	r0, [pc, #244]	; (8001788 <read_keypad+0x260>)
 8001692:	f001 fac0 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8001696:	2201      	movs	r2, #1
 8001698:	2140      	movs	r1, #64	; 0x40
 800169a:	483b      	ldr	r0, [pc, #236]	; (8001788 <read_keypad+0x260>)
 800169c:	f001 fabb 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);  // Pull the R4 High
 80016a0:	2200      	movs	r2, #0
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	4838      	ldr	r0, [pc, #224]	; (8001788 <read_keypad+0x260>)
 80016a6:	f001 fab6 	bl	8002c16 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80016aa:	2101      	movs	r1, #1
 80016ac:	4836      	ldr	r0, [pc, #216]	; (8001788 <read_keypad+0x260>)
 80016ae:	f001 fa9b 	bl	8002be8 <HAL_GPIO_ReadPin>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d11c      	bne.n	80016f2 <read_keypad+0x1ca>
	{
		star = 1;
 80016b8:	4b32      	ldr	r3, [pc, #200]	; (8001784 <read_keypad+0x25c>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]

		if(open){
 80016be:	4b33      	ldr	r3, [pc, #204]	; (800178c <read_keypad+0x264>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d013      	beq.n	80016ee <read_keypad+0x1c6>
				sprintf((char *)disp.f_line,"");
 80016c6:	4b32      	ldr	r3, [pc, #200]	; (8001790 <read_keypad+0x268>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	705a      	strb	r2, [r3, #1]
				lcd_display(&disp);
 80016cc:	4830      	ldr	r0, [pc, #192]	; (8001790 <read_keypad+0x268>)
 80016ce:	f7ff fc5d 	bl	8000f8c <lcd_display>
				sprintf((char *)disp.s_line, "WPISZ NOWY PIN");
 80016d2:	4a30      	ldr	r2, [pc, #192]	; (8001794 <read_keypad+0x26c>)
 80016d4:	4b30      	ldr	r3, [pc, #192]	; (8001798 <read_keypad+0x270>)
 80016d6:	4614      	mov	r4, r2
 80016d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80016da:	6020      	str	r0, [r4, #0]
 80016dc:	6061      	str	r1, [r4, #4]
 80016de:	60a2      	str	r2, [r4, #8]
 80016e0:	881a      	ldrh	r2, [r3, #0]
 80016e2:	789b      	ldrb	r3, [r3, #2]
 80016e4:	81a2      	strh	r2, [r4, #12]
 80016e6:	73a3      	strb	r3, [r4, #14]
				lcd_display(&disp);
 80016e8:	4829      	ldr	r0, [pc, #164]	; (8001790 <read_keypad+0x268>)
 80016ea:	f7ff fc4f 	bl	8000f8c <lcd_display>
		}
		return '*';
 80016ee:	232a      	movs	r3, #42	; 0x2a
 80016f0:	e045      	b.n	800177e <read_keypad+0x256>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80016f2:	2102      	movs	r1, #2
 80016f4:	4824      	ldr	r0, [pc, #144]	; (8001788 <read_keypad+0x260>)
 80016f6:	f001 fa77 	bl	8002be8 <HAL_GPIO_ReadPin>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <read_keypad+0x1dc>
	{
		return '0';
 8001700:	2330      	movs	r3, #48	; 0x30
 8001702:	e03c      	b.n	800177e <read_keypad+0x256>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 8001704:	2104      	movs	r1, #4
 8001706:	4820      	ldr	r0, [pc, #128]	; (8001788 <read_keypad+0x260>)
 8001708:	f001 fa6e 	bl	8002be8 <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d12b      	bne.n	800176a <read_keypad+0x242>
	{
		sprintf((char *)disp.f_line, "");
 8001712:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <read_keypad+0x268>)
 8001714:	2200      	movs	r2, #0
 8001716:	705a      	strb	r2, [r3, #1]
				lcd_display(&disp);
 8001718:	481d      	ldr	r0, [pc, #116]	; (8001790 <read_keypad+0x268>)
 800171a:	f7ff fc37 	bl	8000f8c <lcd_display>
				sprintf((char *)disp.s_line, "ZAMKNIETE");
 800171e:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <read_keypad+0x26c>)
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <read_keypad+0x274>)
 8001722:	cb03      	ldmia	r3!, {r0, r1}
 8001724:	6010      	str	r0, [r2, #0]
 8001726:	6051      	str	r1, [r2, #4]
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	8113      	strh	r3, [r2, #8]
				lcd_display(&disp);
 800172c:	4818      	ldr	r0, [pc, #96]	; (8001790 <read_keypad+0x268>)
 800172e:	f7ff fc2d 	bl	8000f8c <lcd_display>
				set_ang(900,0);
 8001732:	2100      	movs	r1, #0
 8001734:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001738:	f000 fa6c 	bl	8001c14 <set_ang>

				pin[0]=' ';
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <read_keypad+0x278>)
 800173e:	2220      	movs	r2, #32
 8001740:	701a      	strb	r2, [r3, #0]
				pin[1]=' ';
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <read_keypad+0x278>)
 8001744:	2220      	movs	r2, #32
 8001746:	705a      	strb	r2, [r3, #1]
				pin[2]=' ';
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <read_keypad+0x278>)
 800174a:	2220      	movs	r2, #32
 800174c:	709a      	strb	r2, [r3, #2]
				pin[3]=' ';
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <read_keypad+0x278>)
 8001750:	2220      	movs	r2, #32
 8001752:	70da      	strb	r2, [r3, #3]
				pointer_pin = 0;
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <read_keypad+0x27c>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
				star = 1;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <read_keypad+0x25c>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
				open = 0;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <read_keypad+0x264>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]

		return '#';
 8001766:	2323      	movs	r3, #35	; 0x23
 8001768:	e009      	b.n	800177e <read_keypad+0x256>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 800176a:	2108      	movs	r1, #8
 800176c:	4806      	ldr	r0, [pc, #24]	; (8001788 <read_keypad+0x260>)
 800176e:	f001 fa3b 	bl	8002be8 <HAL_GPIO_ReadPin>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <read_keypad+0x254>
	{
		return 'D';
 8001778:	2344      	movs	r3, #68	; 0x44
 800177a:	e000      	b.n	800177e <read_keypad+0x256>
	}
	return 0;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd98      	pop	{r3, r4, r7, pc}
 8001782:	bf00      	nop
 8001784:	200000ae 	.word	0x200000ae
 8001788:	40011000 	.word	0x40011000
 800178c:	200000af 	.word	0x200000af
 8001790:	20000344 	.word	0x20000344
 8001794:	20000356 	.word	0x20000356
 8001798:	080066ac 	.word	0x080066ac
 800179c:	08006674 	.word	0x08006674
 80017a0:	20000234 	.word	0x20000234
 80017a4:	200000ad 	.word	0x200000ad

080017a8 <check_char>:
//			first_addr = first_addr + jump_addr;
////			first_addr = first + jump;
//
//	}

	void check_char(){
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
		if(rec_char > 34 && rec_char < 126)
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <check_char+0x2c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b22      	cmp	r3, #34	; 0x22
 80017b2:	d907      	bls.n	80017c4 <check_char+0x1c>
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <check_char+0x2c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b7d      	cmp	r3, #125	; 0x7d
 80017ba:	d803      	bhi.n	80017c4 <check_char+0x1c>
		{
			bad_char = 0;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <check_char+0x30>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
 80017c2:	e002      	b.n	80017ca <check_char+0x22>
		}
		else{
			bad_char = 1;
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <check_char+0x30>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
		}
	}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000233 	.word	0x20000233
 80017d8:	200000b1 	.word	0x200000b1

080017dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017dc:	b598      	push	{r3, r4, r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e0:	f000 fc96 	bl	8002110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e4:	f000 f984 	bl	8001af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e8:	f7ff fa4c 	bl	8000c84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017ec:	f000 fbee 	bl	8001fcc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80017f0:	f7ff fada 	bl	8000da8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80017f4:	f000 fb14 	bl	8001e20 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &buff_rec.last_rec_char, 1);
 80017f8:	2201      	movs	r2, #1
 80017fa:	49a3      	ldr	r1, [pc, #652]	; (8001a88 <main+0x2ac>)
 80017fc:	48a3      	ldr	r0, [pc, #652]	; (8001a8c <main+0x2b0>)
 80017fe:	f002 ff7b 	bl	80046f8 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001802:	2100      	movs	r1, #0
 8001804:	48a2      	ldr	r0, [pc, #648]	; (8001a90 <main+0x2b4>)
 8001806:	f002 fac9 	bl	8003d9c <HAL_TIM_PWM_Start>
  disp.addr = (0x20 << 1);
 800180a:	4ba2      	ldr	r3, [pc, #648]	; (8001a94 <main+0x2b8>)
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8001810:	4ba0      	ldr	r3, [pc, #640]	; (8001a94 <main+0x2b8>)
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 8001818:	489e      	ldr	r0, [pc, #632]	; (8001a94 <main+0x2b8>)
 800181a:	f7ff fb31 	bl	8000e80 <lcd_init>
  sprintf((char *)disp.s_line, "ZAMKNIETE");
 800181e:	4a9e      	ldr	r2, [pc, #632]	; (8001a98 <main+0x2bc>)
 8001820:	4b9e      	ldr	r3, [pc, #632]	; (8001a9c <main+0x2c0>)
 8001822:	cb03      	ldmia	r3!, {r0, r1}
 8001824:	6010      	str	r0, [r2, #0]
 8001826:	6051      	str	r1, [r2, #4]
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	8113      	strh	r3, [r2, #8]
  lcd_display(&disp);
 800182c:	4899      	ldr	r0, [pc, #612]	; (8001a94 <main+0x2b8>)
 800182e:	f7ff fbad 	bl	8000f8c <lcd_display>
  set_ang(900,0);
 8001832:	2100      	movs	r1, #0
 8001834:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001838:	f000 f9ec 	bl	8001c14 <set_ang>

  Flash_Write_Data(first_addr, key);
 800183c:	4b98      	ldr	r3, [pc, #608]	; (8001aa0 <main+0x2c4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4998      	ldr	r1, [pc, #608]	; (8001aa4 <main+0x2c8>)
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f954 	bl	8000af0 <Flash_Write_Data>
  Flash_Read_Data(first_addr, Rx_Data);
 8001848:	4b95      	ldr	r3, [pc, #596]	; (8001aa0 <main+0x2c4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4996      	ldr	r1, [pc, #600]	; (8001aa8 <main+0x2cc>)
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff f9ba 	bl	8000bc8 <Flash_Read_Data>
  Convert_To_Str(Rx_Data, string);
 8001854:	4995      	ldr	r1, [pc, #596]	; (8001aac <main+0x2d0>)
 8001856:	4894      	ldr	r0, [pc, #592]	; (8001aa8 <main+0x2cc>)
 8001858:	f7ff f9d4 	bl	8000c04 <Convert_To_Str>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(buff_rec.rx_e != buff_rec.rx_b)
 800185c:	4b8a      	ldr	r3, [pc, #552]	; (8001a88 <main+0x2ac>)
 800185e:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 8001862:	4b89      	ldr	r3, [pc, #548]	; (8001a88 <main+0x2ac>)
 8001864:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8001868:	429a      	cmp	r2, r3
 800186a:	d065      	beq.n	8001938 <main+0x15c>
	 	    {
			  rec_char = buff_rec.rx_buff[buff_rec.rx_b];
 800186c:	4b86      	ldr	r3, [pc, #536]	; (8001a88 <main+0x2ac>)
 800186e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8001872:	461a      	mov	r2, r3
 8001874:	4b84      	ldr	r3, [pc, #528]	; (8001a88 <main+0x2ac>)
 8001876:	4413      	add	r3, r2
 8001878:	785a      	ldrb	r2, [r3, #1]
 800187a:	4b8d      	ldr	r3, [pc, #564]	; (8001ab0 <main+0x2d4>)
 800187c:	701a      	strb	r2, [r3, #0]
	 		  buff_rec.rx_b++;
 800187e:	4b82      	ldr	r3, [pc, #520]	; (8001a88 <main+0x2ac>)
 8001880:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8001884:	3301      	adds	r3, #1
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b7f      	ldr	r3, [pc, #508]	; (8001a88 <main+0x2ac>)
 800188a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	 		  if(buff_rec.rx_b >= MAX_BUFFER_SIZE)
	 		  {
	 			  buff_rec.rx_b = 0;
	 		  }
	 	  	  if(rec_char == '#')
 800188e:	4b88      	ldr	r3, [pc, #544]	; (8001ab0 <main+0x2d4>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b23      	cmp	r3, #35	; 0x23
 8001894:	d10a      	bne.n	80018ac <main+0xd0>
	 	  	  {
	 	  			memset(cmd,0,sizeof cmd);
 8001896:	2287      	movs	r2, #135	; 0x87
 8001898:	2100      	movs	r1, #0
 800189a:	4886      	ldr	r0, [pc, #536]	; (8001ab4 <main+0x2d8>)
 800189c:	f003 fa5a 	bl	8004d54 <memset>
	 	  			cmd_pointer = 0;
 80018a0:	4b85      	ldr	r3, [pc, #532]	; (8001ab8 <main+0x2dc>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
	 	  		frame_activated = true;
 80018a6:	4b85      	ldr	r3, [pc, #532]	; (8001abc <main+0x2e0>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]

	 	  	  }
	 	  	  check_char();
 80018ac:	f7ff ff7c 	bl	80017a8 <check_char>
	 	  	  if(bad_char){
 80018b0:	4b83      	ldr	r3, [pc, #524]	; (8001ac0 <main+0x2e4>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00a      	beq.n	80018ce <main+0xf2>
	 	  		memset(cmd,0,sizeof cmd);
 80018b8:	2287      	movs	r2, #135	; 0x87
 80018ba:	2100      	movs	r1, #0
 80018bc:	487d      	ldr	r0, [pc, #500]	; (8001ab4 <main+0x2d8>)
 80018be:	f003 fa49 	bl	8004d54 <memset>
	 	  		cmd_pointer = 0;
 80018c2:	4b7d      	ldr	r3, [pc, #500]	; (8001ab8 <main+0x2dc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
	 	  		frame_activated = false;
 80018c8:	4b7c      	ldr	r3, [pc, #496]	; (8001abc <main+0x2e0>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
	 	  	  }

	 		  if(rec_char == '$' && frame_activated)
 80018ce:	4b78      	ldr	r3, [pc, #480]	; (8001ab0 <main+0x2d4>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b24      	cmp	r3, #36	; 0x24
 80018d4:	d108      	bne.n	80018e8 <main+0x10c>
 80018d6:	4b79      	ldr	r3, [pc, #484]	; (8001abc <main+0x2e0>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d004      	beq.n	80018e8 <main+0x10c>
	 		  {
	 				 frame_activated = false;
 80018de:	4b77      	ldr	r3, [pc, #476]	; (8001abc <main+0x2e0>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
	 				 check_frame();
 80018e4:	f7ff fd6a 	bl	80013bc <check_frame>
	 		  }
	 			  if(frame_activated && rec_char != '#' && rec_char != '$' && rec_char > 38 && rec_char < 126)
 80018e8:	4b74      	ldr	r3, [pc, #464]	; (8001abc <main+0x2e0>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d01c      	beq.n	800192a <main+0x14e>
 80018f0:	4b6f      	ldr	r3, [pc, #444]	; (8001ab0 <main+0x2d4>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b23      	cmp	r3, #35	; 0x23
 80018f6:	d018      	beq.n	800192a <main+0x14e>
 80018f8:	4b6d      	ldr	r3, [pc, #436]	; (8001ab0 <main+0x2d4>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b24      	cmp	r3, #36	; 0x24
 80018fe:	d014      	beq.n	800192a <main+0x14e>
 8001900:	4b6b      	ldr	r3, [pc, #428]	; (8001ab0 <main+0x2d4>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b26      	cmp	r3, #38	; 0x26
 8001906:	d910      	bls.n	800192a <main+0x14e>
 8001908:	4b69      	ldr	r3, [pc, #420]	; (8001ab0 <main+0x2d4>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b7d      	cmp	r3, #125	; 0x7d
 800190e:	d80c      	bhi.n	800192a <main+0x14e>
	 		 		  {
	 		 			  cmd[cmd_pointer] = rec_char;
 8001910:	4b69      	ldr	r3, [pc, #420]	; (8001ab8 <main+0x2dc>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b66      	ldr	r3, [pc, #408]	; (8001ab0 <main+0x2d4>)
 8001918:	7819      	ldrb	r1, [r3, #0]
 800191a:	4b66      	ldr	r3, [pc, #408]	; (8001ab4 <main+0x2d8>)
 800191c:	5499      	strb	r1, [r3, r2]
	 		 			  cmd_pointer++;
 800191e:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <main+0x2dc>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <main+0x2dc>)
 8001928:	701a      	strb	r2, [r3, #0]
	 		 		  }

	 		 		  if(cmd_pointer >= MAX_COMMAND_SIZE)
 800192a:	4b63      	ldr	r3, [pc, #396]	; (8001ab8 <main+0x2dc>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b86      	cmp	r3, #134	; 0x86
 8001930:	d902      	bls.n	8001938 <main+0x15c>
	 		 		  {
	 		 			  cmd_pointer = 0;
 8001932:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <main+0x2dc>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
	 		 		  }
	 		 }


	  if((znak = read_keypad())!=0)
 8001938:	f7ff fdf6 	bl	8001528 <read_keypad>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	4b60      	ldr	r3, [pc, #384]	; (8001ac4 <main+0x2e8>)
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	4b5f      	ldr	r3, [pc, #380]	; (8001ac4 <main+0x2e8>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d087      	beq.n	800185c <main+0x80>
	    {
	 	  if(star == 0)
 800194c:	4b5e      	ldr	r3, [pc, #376]	; (8001ac8 <main+0x2ec>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	f083 0301 	eor.w	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d040      	beq.n	80019dc <main+0x200>
	 	  	{
				pin[pointer_pin] = znak;
 800195a:	4b5c      	ldr	r3, [pc, #368]	; (8001acc <main+0x2f0>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <main+0x2e8>)
 8001962:	7819      	ldrb	r1, [r3, #0]
 8001964:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <main+0x2f4>)
 8001966:	5499      	strb	r1, [r3, r2]
				pointer_pin ++;
 8001968:	4b58      	ldr	r3, [pc, #352]	; (8001acc <main+0x2f0>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b56      	ldr	r3, [pc, #344]	; (8001acc <main+0x2f0>)
 8001972:	701a      	strb	r2, [r3, #0]
				switch(pointer_pin){
 8001974:	4b55      	ldr	r3, [pc, #340]	; (8001acc <main+0x2f0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	3b01      	subs	r3, #1
 800197a:	2b03      	cmp	r3, #3
 800197c:	d82e      	bhi.n	80019dc <main+0x200>
 800197e:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <main+0x1a8>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	08001995 	.word	0x08001995
 8001988:	080019a5 	.word	0x080019a5
 800198c:	080019b9 	.word	0x080019b9
 8001990:	080019c9 	.word	0x080019c9
				case 1:
				sprintf((char *)disp.f_line,"*");
 8001994:	4a4f      	ldr	r2, [pc, #316]	; (8001ad4 <main+0x2f8>)
 8001996:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <main+0x2fc>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	8013      	strh	r3, [r2, #0]
				lcd_display(&disp);
 800199c:	483d      	ldr	r0, [pc, #244]	; (8001a94 <main+0x2b8>)
 800199e:	f7ff faf5 	bl	8000f8c <lcd_display>
				break;
 80019a2:	e01b      	b.n	80019dc <main+0x200>
				case 2:
				sprintf((char *)disp.f_line,"**");
 80019a4:	4b4b      	ldr	r3, [pc, #300]	; (8001ad4 <main+0x2f8>)
 80019a6:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <main+0x300>)
 80019a8:	8811      	ldrh	r1, [r2, #0]
 80019aa:	7892      	ldrb	r2, [r2, #2]
 80019ac:	8019      	strh	r1, [r3, #0]
 80019ae:	709a      	strb	r2, [r3, #2]
				lcd_display(&disp);
 80019b0:	4838      	ldr	r0, [pc, #224]	; (8001a94 <main+0x2b8>)
 80019b2:	f7ff faeb 	bl	8000f8c <lcd_display>
				break;
 80019b6:	e011      	b.n	80019dc <main+0x200>
				case 3:
				sprintf((char *)disp.f_line,"***");
 80019b8:	4b46      	ldr	r3, [pc, #280]	; (8001ad4 <main+0x2f8>)
 80019ba:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <main+0x304>)
 80019bc:	6810      	ldr	r0, [r2, #0]
 80019be:	6018      	str	r0, [r3, #0]
				lcd_display(&disp);
 80019c0:	4834      	ldr	r0, [pc, #208]	; (8001a94 <main+0x2b8>)
 80019c2:	f7ff fae3 	bl	8000f8c <lcd_display>
				break;
 80019c6:	e009      	b.n	80019dc <main+0x200>
				case 4:
				sprintf((char *)disp.f_line,"****");
 80019c8:	4b42      	ldr	r3, [pc, #264]	; (8001ad4 <main+0x2f8>)
 80019ca:	4a46      	ldr	r2, [pc, #280]	; (8001ae4 <main+0x308>)
 80019cc:	6810      	ldr	r0, [r2, #0]
 80019ce:	6018      	str	r0, [r3, #0]
 80019d0:	7912      	ldrb	r2, [r2, #4]
 80019d2:	711a      	strb	r2, [r3, #4]
				lcd_display(&disp);
 80019d4:	482f      	ldr	r0, [pc, #188]	; (8001a94 <main+0x2b8>)
 80019d6:	f7ff fad9 	bl	8000f8c <lcd_display>
				break;
 80019da:	bf00      	nop
				}
	 	  	}

		  if(pointer_pin == 4)
 80019dc:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <main+0x2f0>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d139      	bne.n	8001a58 <main+0x27c>
			{
			  if(open == 0){
 80019e4:	4b40      	ldr	r3, [pc, #256]	; (8001ae8 <main+0x30c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	f083 0301 	eor.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <main+0x21c>
				check_pin();
 80019f2:	f7ff fd43 	bl	800147c <check_pin>
 80019f6:	e02f      	b.n	8001a58 <main+0x27c>
			  }
			  else{
				key[0] = pin[0];
 80019f8:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <main+0x2f4>)
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <main+0x2c8>)
 80019fe:	701a      	strb	r2, [r3, #0]
				key[1] = pin[1];
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <main+0x2f4>)
 8001a02:	785a      	ldrb	r2, [r3, #1]
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <main+0x2c8>)
 8001a06:	705a      	strb	r2, [r3, #1]
				key[2] = pin[2];
 8001a08:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <main+0x2f4>)
 8001a0a:	789a      	ldrb	r2, [r3, #2]
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <main+0x2c8>)
 8001a0e:	709a      	strb	r2, [r3, #2]
				key[3] = pin[3];
 8001a10:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <main+0x2f4>)
 8001a12:	78da      	ldrb	r2, [r3, #3]
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <main+0x2c8>)
 8001a16:	70da      	strb	r2, [r3, #3]
				Flash_Write_Data(first_addr, pin);
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <main+0x2c4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	492c      	ldr	r1, [pc, #176]	; (8001ad0 <main+0x2f4>)
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f866 	bl	8000af0 <Flash_Write_Data>
				Flash_Read_Data(first_addr, Rx_Data);
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <main+0x2c4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	491f      	ldr	r1, [pc, #124]	; (8001aa8 <main+0x2cc>)
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f8cc 	bl	8000bc8 <Flash_Read_Data>
				Convert_To_Str(Rx_Data, string);
 8001a30:	491e      	ldr	r1, [pc, #120]	; (8001aac <main+0x2d0>)
 8001a32:	481d      	ldr	r0, [pc, #116]	; (8001aa8 <main+0x2cc>)
 8001a34:	f7ff f8e6 	bl	8000c04 <Convert_To_Str>

				if(pointer_pin >= 4){
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <main+0x2f0>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d90b      	bls.n	8001a58 <main+0x27c>
				sprintf((char *)disp.s_line,"PIN ZMIENIONY");
 8001a40:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <main+0x2bc>)
 8001a42:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <main+0x310>)
 8001a44:	4614      	mov	r4, r2
 8001a46:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a48:	6020      	str	r0, [r4, #0]
 8001a4a:	6061      	str	r1, [r4, #4]
 8001a4c:	60a2      	str	r2, [r4, #8]
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	81a3      	strh	r3, [r4, #12]
				lcd_display(&disp);
 8001a52:	4810      	ldr	r0, [pc, #64]	; (8001a94 <main+0x2b8>)
 8001a54:	f7ff fa9a 	bl	8000f8c <lcd_display>

				}
			  }
			}
		  if(pointer_pin>=4)
 8001a58:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <main+0x2f0>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d90e      	bls.n	8001a7e <main+0x2a2>
		   {
				pointer_pin = 0;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <main+0x2f0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
				pin[0]=' ';
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <main+0x2f4>)
 8001a68:	2220      	movs	r2, #32
 8001a6a:	701a      	strb	r2, [r3, #0]
				pin[1]=' ';
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <main+0x2f4>)
 8001a6e:	2220      	movs	r2, #32
 8001a70:	705a      	strb	r2, [r3, #1]
				pin[2]=' ';
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <main+0x2f4>)
 8001a74:	2220      	movs	r2, #32
 8001a76:	709a      	strb	r2, [r3, #2]
				pin[3]=' ';
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <main+0x2f4>)
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	70da      	strb	r2, [r3, #3]
		   }
		  star=0;
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <main+0x2ec>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
	  if(buff_rec.rx_e != buff_rec.rx_b)
 8001a84:	e6ea      	b.n	800185c <main+0x80>
 8001a86:	bf00      	nop
 8001a88:	20000130 	.word	0x20000130
 8001a8c:	20000438 	.word	0x20000438
 8001a90:	200003f0 	.word	0x200003f0
 8001a94:	20000344 	.word	0x20000344
 8001a98:	20000356 	.word	0x20000356
 8001a9c:	08006674 	.word	0x08006674
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000120 	.word	0x20000120
 8001aac:	20000114 	.word	0x20000114
 8001ab0:	20000233 	.word	0x20000233
 8001ab4:	20000368 	.word	0x20000368
 8001ab8:	200000ac 	.word	0x200000ac
 8001abc:	200000b0 	.word	0x200000b0
 8001ac0:	200000b1 	.word	0x200000b1
 8001ac4:	2000011e 	.word	0x2000011e
 8001ac8:	200000ae 	.word	0x200000ae
 8001acc:	200000ad 	.word	0x200000ad
 8001ad0:	20000234 	.word	0x20000234
 8001ad4:	20000345 	.word	0x20000345
 8001ad8:	080066bc 	.word	0x080066bc
 8001adc:	080066c0 	.word	0x080066c0
 8001ae0:	080066c4 	.word	0x080066c4
 8001ae4:	080066c8 	.word	0x080066c8
 8001ae8:	200000af 	.word	0x200000af
 8001aec:	080066d0 	.word	0x080066d0

08001af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b090      	sub	sp, #64	; 0x40
 8001af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af6:	f107 0318 	add.w	r3, r7, #24
 8001afa:	2228      	movs	r2, #40	; 0x28
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 f928 	bl	8004d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b16:	2301      	movs	r3, #1
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b22:	2300      	movs	r3, #0
 8001b24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001b26:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2c:	f107 0318 	add.w	r3, r7, #24
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 fcc7 	bl	80034c4 <HAL_RCC_OscConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001b3c:	f000 f864 	bl	8001c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b40:	230f      	movs	r3, #15
 8001b42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b44:	2302      	movs	r3, #2
 8001b46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2102      	movs	r1, #2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f001 ff32 	bl	80039c4 <HAL_RCC_ClockConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001b66:	f000 f84f 	bl	8001c08 <Error_Handler>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3740      	adds	r7, #64	; 0x40
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
		buff_rec.rx_buff[buff_rec.rx_e] = buff_rec.last_rec_char;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_UART_RxCpltCallback+0x3c>)
 8001b7e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8001b82:	4619      	mov	r1, r3
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_UART_RxCpltCallback+0x3c>)
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_UART_RxCpltCallback+0x3c>)
 8001b8a:	440b      	add	r3, r1
 8001b8c:	705a      	strb	r2, [r3, #1]
		buff_rec.rx_e++;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_UART_RxCpltCallback+0x3c>)
 8001b90:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8001b94:	3301      	adds	r3, #1
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_UART_RxCpltCallback+0x3c>)
 8001b9a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		if(buff_rec.rx_e >= MAX_BUFFER_SIZE)
		{
			buff_rec.rx_e = 0;
		}
		HAL_UART_Receive_IT(&huart2, &buff_rec.last_rec_char, 1);
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4903      	ldr	r1, [pc, #12]	; (8001bb0 <HAL_UART_RxCpltCallback+0x3c>)
 8001ba2:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <HAL_UART_RxCpltCallback+0x40>)
 8001ba4:	f002 fda8 	bl	80046f8 <HAL_UART_Receive_IT>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000130 	.word	0x20000130
 8001bb4:	20000438 	.word	0x20000438

08001bb8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
			if(buff_send.tx_e != buff_send.tx_b)
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_UART_TxCpltCallback+0x48>)
 8001bc2:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_UART_TxCpltCallback+0x48>)
 8001bc8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d012      	beq.n	8001bf6 <HAL_UART_TxCpltCallback+0x3e>
			{
				HAL_UART_Transmit_IT(&huart2, &buff_send.tx_buff[buff_send.tx_b], 1);
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_UART_TxCpltCallback+0x48>)
 8001bd2:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_UART_TxCpltCallback+0x48>)
 8001bda:	4413      	add	r3, r2
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4619      	mov	r1, r3
 8001be0:	4808      	ldr	r0, [pc, #32]	; (8001c04 <HAL_UART_TxCpltCallback+0x4c>)
 8001be2:	f002 fd45 	bl	8004670 <HAL_UART_Transmit_IT>
				buff_send.tx_b++;
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_UART_TxCpltCallback+0x48>)
 8001be8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8001bec:	3301      	adds	r3, #1
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_UART_TxCpltCallback+0x48>)
 8001bf2:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
				if(buff_send.tx_b >= MAX_BUFFER_SIZE)
				{
					buff_send.tx_b = 0;
				}
			}
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000240 	.word	0x20000240
 8001c04:	20000438 	.word	0x20000438

08001c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <set_ang>:
/*
 * ang - kat obrotu walu serwomechanizmu
 * mode - tryb obrotu zgodnie/przeciwnie do wskazowek zegara
 */
void set_ang(uint16_t ang, uint8_t mode)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	80fb      	strh	r3, [r7, #6]
 8001c20:	4613      	mov	r3, r2
 8001c22:	717b      	strb	r3, [r7, #5]
	uint16_t val;

	if(ang > ANGLE_MAX)
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001c2a:	d902      	bls.n	8001c32 <set_ang+0x1e>
	{
		ang = ANGLE_MAX;
 8001c2c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001c30:	80fb      	strh	r3, [r7, #6]
	else if (ang < ANGLE_MIN)
	{
		ang = ANGLE_MIN;
	}

	if(mode)
 8001c32:	797b      	ldrb	r3, [r7, #5]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d010      	beq.n	8001c5a <set_ang+0x46>
	{
		val = PWM_MIN + ((ang - ANGLE_MIN) * STEP) / 1000;
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	015b      	lsls	r3, r3, #5
 8001c3e:	4413      	add	r3, r2
 8001c40:	015b      	lsls	r3, r3, #5
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <set_ang+0x78>)
 8001c46:	fb82 1203 	smull	r1, r2, r2, r3
 8001c4a:	1192      	asrs	r2, r2, #6
 8001c4c:	17db      	asrs	r3, r3, #31
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 8001c56:	81fb      	strh	r3, [r7, #14]
 8001c58:	e00f      	b.n	8001c7a <set_ang+0x66>
	}
	else
	{
		val = PWM_MAX - ((ang - ANGLE_MIN) * STEP) / 1000;
 8001c5a:	88fa      	ldrh	r2, [r7, #6]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	015b      	lsls	r3, r3, #5
 8001c60:	4413      	add	r3, r2
 8001c62:	015b      	lsls	r3, r3, #5
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <set_ang+0x78>)
 8001c68:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6c:	1192      	asrs	r2, r2, #6
 8001c6e:	17db      	asrs	r3, r3, #31
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	f603 0302 	addw	r3, r3, #2050	; 0x802
 8001c78:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, val);
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <set_ang+0x7c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	89fa      	ldrh	r2, [r7, #14]
 8001c80:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	10624dd3 	.word	0x10624dd3
 8001c90:	200003f0 	.word	0x200003f0

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_MspInit+0x5c>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <HAL_MspInit+0x5c>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6193      	str	r3, [r2, #24]
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_MspInit+0x5c>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_MspInit+0x5c>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <HAL_MspInit+0x5c>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	61d3      	str	r3, [r2, #28]
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_MspInit+0x5c>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_MspInit+0x60>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <HAL_MspInit+0x60>)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010000 	.word	0x40010000

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <HardFault_Handler+0x4>

08001d0a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <MemManage_Handler+0x4>

08001d10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <BusFault_Handler+0x4>

08001d16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <UsageFault_Handler+0x4>

08001d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d44:	f000 fa2a 	bl	800219c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <USART2_IRQHandler+0x10>)
 8001d52:	f002 fd25 	bl	80047a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000438 	.word	0x20000438

08001d60 <_sbrk>:
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <_sbrk+0x50>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <_sbrk+0x16>
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <_sbrk+0x50>)
 8001d72:	4a10      	ldr	r2, [pc, #64]	; (8001db4 <_sbrk+0x54>)
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <_sbrk+0x50>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <_sbrk+0x50>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	466a      	mov	r2, sp
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d907      	bls.n	8001d9a <_sbrk+0x3a>
 8001d8a:	f002 ffb9 	bl	8004d00 <__errno>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	230c      	movs	r3, #12
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295
 8001d98:	e006      	b.n	8001da8 <_sbrk+0x48>
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <_sbrk+0x50>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	4a03      	ldr	r2, [pc, #12]	; (8001db0 <_sbrk+0x50>)
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200000b4 	.word	0x200000b4
 8001db4:	200004a8 	.word	0x200004a8

08001db8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <SystemInit+0x5c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <SystemInit+0x5c>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <SystemInit+0x5c>)
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	4911      	ldr	r1, [pc, #68]	; (8001e14 <SystemInit+0x5c>)
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <SystemInit+0x60>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <SystemInit+0x5c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <SystemInit+0x5c>)
 8001dda:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <SystemInit+0x5c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <SystemInit+0x5c>)
 8001dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <SystemInit+0x5c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <SystemInit+0x5c>)
 8001df6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001dfa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <SystemInit+0x5c>)
 8001dfe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e02:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <SystemInit+0x64>)
 8001e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e0a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	40021000 	.word	0x40021000
 8001e18:	f8ff0000 	.word	0xf8ff0000
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b092      	sub	sp, #72	; 0x48
 8001e24:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
 8001e40:	615a      	str	r2, [r3, #20]
 8001e42:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	2220      	movs	r2, #32
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f002 ff82 	bl	8004d54 <memset>

  htim1.Instance = TIM1;
 8001e50:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <MX_TIM1_Init+0x100>)
 8001e52:	4a34      	ldr	r2, [pc, #208]	; (8001f24 <MX_TIM1_Init+0x104>)
 8001e54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001e56:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <MX_TIM1_Init+0x100>)
 8001e58:	223f      	movs	r2, #63	; 0x3f
 8001e5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	4b30      	ldr	r3, [pc, #192]	; (8001f20 <MX_TIM1_Init+0x100>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001e62:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <MX_TIM1_Init+0x100>)
 8001e64:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001e68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <MX_TIM1_Init+0x100>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e70:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <MX_TIM1_Init+0x100>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <MX_TIM1_Init+0x100>)
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e7c:	4828      	ldr	r0, [pc, #160]	; (8001f20 <MX_TIM1_Init+0x100>)
 8001e7e:	f001 ff3d 	bl	8003cfc <HAL_TIM_PWM_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001e88:	f7ff febe 	bl	8001c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4821      	ldr	r0, [pc, #132]	; (8001f20 <MX_TIM1_Init+0x100>)
 8001e9c:	f002 faec 	bl	8004478 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ea6:	f7ff feaf 	bl	8001c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eaa:	2360      	movs	r3, #96	; 0x60
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eca:	2200      	movs	r2, #0
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4814      	ldr	r0, [pc, #80]	; (8001f20 <MX_TIM1_Init+0x100>)
 8001ed0:	f002 f806 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001eda:	f7ff fe95 	bl	8001c08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	4807      	ldr	r0, [pc, #28]	; (8001f20 <MX_TIM1_Init+0x100>)
 8001f02:	f002 fb17 	bl	8004534 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001f0c:	f7ff fe7c 	bl	8001c08 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001f10:	4803      	ldr	r0, [pc, #12]	; (8001f20 <MX_TIM1_Init+0x100>)
 8001f12:	f000 f827 	bl	8001f64 <HAL_TIM_MspPostInit>

}
 8001f16:	bf00      	nop
 8001f18:	3748      	adds	r7, #72	; 0x48
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200003f0 	.word	0x200003f0
 8001f24:	40012c00 	.word	0x40012c00

08001f28 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_TIM_PWM_MspInit+0x34>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d10b      	bne.n	8001f52 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_TIM_PWM_MspInit+0x38>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_TIM_PWM_MspInit+0x38>)
 8001f40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f44:	6193      	str	r3, [r2, #24]
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_TIM_PWM_MspInit+0x38>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	40012c00 	.word	0x40012c00
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_TIM_MspPostInit+0x5c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d118      	bne.n	8001fb6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_TIM_MspPostInit+0x60>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <HAL_TIM_MspPostInit+0x60>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <HAL_TIM_MspPostInit+0x60>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	f107 0310 	add.w	r3, r7, #16
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <HAL_TIM_MspPostInit+0x64>)
 8001fb2:	f000 fcbf 	bl	8002934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fb6:	bf00      	nop
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010800 	.word	0x40010800

08001fcc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <MX_USART2_UART_Init+0x4c>)
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <MX_USART2_UART_Init+0x50>)
 8001fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <MX_USART2_UART_Init+0x4c>)
 8001fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <MX_USART2_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <MX_USART2_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <MX_USART2_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <MX_USART2_UART_Init+0x4c>)
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <MX_USART2_UART_Init+0x4c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <MX_USART2_UART_Init+0x4c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002002:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_USART2_UART_Init+0x4c>)
 8002004:	f002 fae7 	bl	80045d6 <HAL_UART_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800200e:	f7ff fdfb 	bl	8001c08 <Error_Handler>
  }

}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000438 	.word	0x20000438
 800201c:	40004400 	.word	0x40004400

08002020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0310 	add.w	r3, r7, #16
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <HAL_UART_MspInit+0x98>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d137      	bne.n	80020b0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <HAL_UART_MspInit+0x9c>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <HAL_UART_MspInit+0x9c>)
 8002046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204a:	61d3      	str	r3, [r2, #28]
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_UART_MspInit+0x9c>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_UART_MspInit+0x9c>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4a17      	ldr	r2, [pc, #92]	; (80020bc <HAL_UART_MspInit+0x9c>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_UART_MspInit+0x9c>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002070:	2304      	movs	r3, #4
 8002072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	4619      	mov	r1, r3
 8002082:	480f      	ldr	r0, [pc, #60]	; (80020c0 <HAL_UART_MspInit+0xa0>)
 8002084:	f000 fc56 	bl	8002934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002088:	2308      	movs	r3, #8
 800208a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	f107 0310 	add.w	r3, r7, #16
 8002098:	4619      	mov	r1, r3
 800209a:	4809      	ldr	r0, [pc, #36]	; (80020c0 <HAL_UART_MspInit+0xa0>)
 800209c:	f000 fc4a 	bl	8002934 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	2026      	movs	r0, #38	; 0x26
 80020a6:	f000 f98e 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020aa:	2026      	movs	r0, #38	; 0x26
 80020ac:	f000 f9a7 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020b0:	bf00      	nop
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40004400 	.word	0x40004400
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010800 	.word	0x40010800

080020c4 <Reset_Handler>:
 80020c4:	2100      	movs	r1, #0
 80020c6:	e003      	b.n	80020d0 <LoopCopyDataInit>

080020c8 <CopyDataInit>:
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <LoopFillZerobss+0x14>)
 80020ca:	585b      	ldr	r3, [r3, r1]
 80020cc:	5043      	str	r3, [r0, r1]
 80020ce:	3104      	adds	r1, #4

080020d0 <LoopCopyDataInit>:
 80020d0:	480a      	ldr	r0, [pc, #40]	; (80020fc <LoopFillZerobss+0x18>)
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <LoopFillZerobss+0x1c>)
 80020d4:	1842      	adds	r2, r0, r1
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d3f6      	bcc.n	80020c8 <CopyDataInit>
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <LoopFillZerobss+0x20>)
 80020dc:	e002      	b.n	80020e4 <LoopFillZerobss>

080020de <FillZerobss>:
 80020de:	2300      	movs	r3, #0
 80020e0:	f842 3b04 	str.w	r3, [r2], #4

080020e4 <LoopFillZerobss>:
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <LoopFillZerobss+0x24>)
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d3f9      	bcc.n	80020de <FillZerobss>
 80020ea:	f7ff fe65 	bl	8001db8 <SystemInit>
 80020ee:	f002 fe0d 	bl	8004d0c <__libc_init_array>
 80020f2:	f7ff fb73 	bl	80017dc <main>
 80020f6:	4770      	bx	lr
 80020f8:	08006790 	.word	0x08006790
 80020fc:	20000000 	.word	0x20000000
 8002100:	2000007c 	.word	0x2000007c
 8002104:	20000080 	.word	0x20000080
 8002108:	200004a4 	.word	0x200004a4

0800210c <ADC1_2_IRQHandler>:
 800210c:	e7fe      	b.n	800210c <ADC1_2_IRQHandler>
	...

08002110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_Init+0x28>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a07      	ldr	r2, [pc, #28]	; (8002138 <HAL_Init+0x28>)
 800211a:	f043 0310 	orr.w	r3, r3, #16
 800211e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002120:	2003      	movs	r0, #3
 8002122:	f000 f945 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002126:	2000      	movs	r0, #0
 8002128:	f000 f808 	bl	800213c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800212c:	f7ff fdb2 	bl	8001c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40022000 	.word	0x40022000

0800213c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_InitTick+0x54>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_InitTick+0x58>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4619      	mov	r1, r3
 800214e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002152:	fbb3 f3f1 	udiv	r3, r3, r1
 8002156:	fbb2 f3f3 	udiv	r3, r2, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f95d 	bl	800241a <HAL_SYSTICK_Config>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e00e      	b.n	8002188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b0f      	cmp	r3, #15
 800216e:	d80a      	bhi.n	8002186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002170:	2200      	movs	r2, #0
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	f000 f925 	bl	80023c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800217c:	4a06      	ldr	r2, [pc, #24]	; (8002198 <HAL_InitTick+0x5c>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000008 	.word	0x20000008
 8002194:	20000010 	.word	0x20000010
 8002198:	2000000c 	.word	0x2000000c

0800219c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_IncTick+0x1c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_IncTick+0x20>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	4a03      	ldr	r2, [pc, #12]	; (80021bc <HAL_IncTick+0x20>)
 80021ae:	6013      	str	r3, [r2, #0]
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	20000010 	.word	0x20000010
 80021bc:	20000478 	.word	0x20000478

080021c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return uwTick;
 80021c4:	4b02      	ldr	r3, [pc, #8]	; (80021d0 <HAL_GetTick+0x10>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	20000478 	.word	0x20000478

080021d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff fff0 	bl	80021c0 <HAL_GetTick>
 80021e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d005      	beq.n	80021fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_Delay+0x40>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4413      	add	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021fa:	bf00      	nop
 80021fc:	f7ff ffe0 	bl	80021c0 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	429a      	cmp	r2, r3
 800220a:	d8f7      	bhi.n	80021fc <HAL_Delay+0x28>
  {
  }
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000010 	.word	0x20000010

08002218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224a:	4a04      	ldr	r2, [pc, #16]	; (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	60d3      	str	r3, [r2, #12]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <__NVIC_GetPriorityGrouping+0x18>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 0307 	and.w	r3, r3, #7
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	2b00      	cmp	r3, #0
 800228c:	db0b      	blt.n	80022a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	4906      	ldr	r1, [pc, #24]	; (80022b0 <__NVIC_EnableIRQ+0x34>)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2001      	movs	r0, #1
 800229e:	fa00 f202 	lsl.w	r2, r0, r2
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0a      	blt.n	80022de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	490c      	ldr	r1, [pc, #48]	; (8002300 <__NVIC_SetPriority+0x4c>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022dc:	e00a      	b.n	80022f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4908      	ldr	r1, [pc, #32]	; (8002304 <__NVIC_SetPriority+0x50>)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	3b04      	subs	r3, #4
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	440b      	add	r3, r1
 80022f2:	761a      	strb	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e100 	.word	0xe000e100
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f1c3 0307 	rsb	r3, r3, #7
 8002322:	2b04      	cmp	r3, #4
 8002324:	bf28      	it	cs
 8002326:	2304      	movcs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <NVIC_EncodePriority+0x30>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3b03      	subs	r3, #3
 8002336:	e000      	b.n	800233a <NVIC_EncodePriority+0x32>
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43d9      	mvns	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	4313      	orrs	r3, r2
         );
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800237c:	d301      	bcc.n	8002382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <SysTick_Config+0x40>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238a:	210f      	movs	r1, #15
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f7ff ff90 	bl	80022b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <SysTick_Config+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <SysTick_Config+0x40>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	e000e010 	.word	0xe000e010

080023b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff2d 	bl	8002218 <__NVIC_SetPriorityGrouping>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff42 	bl	8002260 <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff90 	bl	8002308 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5f 	bl	80022b4 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff35 	bl	800227c <__NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffa2 	bl	800236c <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002446:	2b02      	cmp	r3, #2
 8002448:	d005      	beq.n	8002456 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2204      	movs	r2, #4
 800244e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e051      	b.n	80024fa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 020e 	bic.w	r2, r2, #14
 8002464:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a22      	ldr	r2, [pc, #136]	; (8002504 <HAL_DMA_Abort_IT+0xd0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d029      	beq.n	80024d4 <HAL_DMA_Abort_IT+0xa0>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a20      	ldr	r2, [pc, #128]	; (8002508 <HAL_DMA_Abort_IT+0xd4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d022      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x9c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1f      	ldr	r2, [pc, #124]	; (800250c <HAL_DMA_Abort_IT+0xd8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d01a      	beq.n	80024ca <HAL_DMA_Abort_IT+0x96>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_DMA_Abort_IT+0xdc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d012      	beq.n	80024c4 <HAL_DMA_Abort_IT+0x90>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <HAL_DMA_Abort_IT+0xe0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00a      	beq.n	80024be <HAL_DMA_Abort_IT+0x8a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <HAL_DMA_Abort_IT+0xe4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d102      	bne.n	80024b8 <HAL_DMA_Abort_IT+0x84>
 80024b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024b6:	e00e      	b.n	80024d6 <HAL_DMA_Abort_IT+0xa2>
 80024b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024bc:	e00b      	b.n	80024d6 <HAL_DMA_Abort_IT+0xa2>
 80024be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024c2:	e008      	b.n	80024d6 <HAL_DMA_Abort_IT+0xa2>
 80024c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c8:	e005      	b.n	80024d6 <HAL_DMA_Abort_IT+0xa2>
 80024ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ce:	e002      	b.n	80024d6 <HAL_DMA_Abort_IT+0xa2>
 80024d0:	2310      	movs	r3, #16
 80024d2:	e000      	b.n	80024d6 <HAL_DMA_Abort_IT+0xa2>
 80024d4:	2301      	movs	r3, #1
 80024d6:	4a11      	ldr	r2, [pc, #68]	; (800251c <HAL_DMA_Abort_IT+0xe8>)
 80024d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	4798      	blx	r3
    } 
  }
  return status;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40020008 	.word	0x40020008
 8002508:	4002001c 	.word	0x4002001c
 800250c:	40020030 	.word	0x40020030
 8002510:	40020044 	.word	0x40020044
 8002514:	40020058 	.word	0x40020058
 8002518:	4002006c 	.word	0x4002006c
 800251c:	40020000 	.word	0x40020000

08002520 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800253a:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_FLASH_Program+0xd8>)
 800253c:	7e1b      	ldrb	r3, [r3, #24]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_FLASH_Program+0x26>
 8002542:	2302      	movs	r3, #2
 8002544:	e054      	b.n	80025f0 <HAL_FLASH_Program+0xd0>
 8002546:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <HAL_FLASH_Program+0xd8>)
 8002548:	2201      	movs	r2, #1
 800254a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800254c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002550:	f000 f8b2 	bl	80026b8 <FLASH_WaitForLastOperation>
 8002554:	4603      	mov	r3, r0
 8002556:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002558:	7dfb      	ldrb	r3, [r7, #23]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d144      	bne.n	80025e8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d102      	bne.n	800256a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002564:	2301      	movs	r3, #1
 8002566:	757b      	strb	r3, [r7, #21]
 8002568:	e007      	b.n	800257a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d102      	bne.n	8002576 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002570:	2302      	movs	r3, #2
 8002572:	757b      	strb	r3, [r7, #21]
 8002574:	e001      	b.n	800257a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002576:	2304      	movs	r3, #4
 8002578:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800257a:	2300      	movs	r3, #0
 800257c:	75bb      	strb	r3, [r7, #22]
 800257e:	e02d      	b.n	80025dc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002580:	7dbb      	ldrb	r3, [r7, #22]
 8002582:	005a      	lsls	r2, r3, #1
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	eb02 0c03 	add.w	ip, r2, r3
 800258a:	7dbb      	ldrb	r3, [r7, #22]
 800258c:	0119      	lsls	r1, r3, #4
 800258e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002592:	f1c1 0620 	rsb	r6, r1, #32
 8002596:	f1a1 0020 	sub.w	r0, r1, #32
 800259a:	fa22 f401 	lsr.w	r4, r2, r1
 800259e:	fa03 f606 	lsl.w	r6, r3, r6
 80025a2:	4334      	orrs	r4, r6
 80025a4:	fa23 f000 	lsr.w	r0, r3, r0
 80025a8:	4304      	orrs	r4, r0
 80025aa:	fa23 f501 	lsr.w	r5, r3, r1
 80025ae:	b2a3      	uxth	r3, r4
 80025b0:	4619      	mov	r1, r3
 80025b2:	4660      	mov	r0, ip
 80025b4:	f000 f864 	bl	8002680 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025bc:	f000 f87c 	bl	80026b8 <FLASH_WaitForLastOperation>
 80025c0:	4603      	mov	r3, r0
 80025c2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80025c4:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_FLASH_Program+0xdc>)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <HAL_FLASH_Program+0xdc>)
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d107      	bne.n	80025e6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80025d6:	7dbb      	ldrb	r3, [r7, #22]
 80025d8:	3301      	adds	r3, #1
 80025da:	75bb      	strb	r3, [r7, #22]
 80025dc:	7dba      	ldrb	r2, [r7, #22]
 80025de:	7d7b      	ldrb	r3, [r7, #21]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d3cd      	bcc.n	8002580 <HAL_FLASH_Program+0x60>
 80025e4:	e000      	b.n	80025e8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80025e6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_FLASH_Program+0xd8>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	761a      	strb	r2, [r3, #24]

  return status;
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025f8:	20000480 	.word	0x20000480
 80025fc:	40022000 	.word	0x40022000

08002600 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_FLASH_Unlock+0x40>)
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00d      	beq.n	8002632 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_FLASH_Unlock+0x40>)
 8002618:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <HAL_FLASH_Unlock+0x44>)
 800261a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_FLASH_Unlock+0x40>)
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_FLASH_Unlock+0x48>)
 8002620:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <HAL_FLASH_Unlock+0x40>)
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002632:	79fb      	ldrb	r3, [r7, #7]
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40022000 	.word	0x40022000
 8002644:	45670123 	.word	0x45670123
 8002648:	cdef89ab 	.word	0xcdef89ab

0800264c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_FLASH_Lock+0x1c>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_FLASH_Lock+0x1c>)
 8002656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800265a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40022000 	.word	0x40022000

0800266c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002670:	4b02      	ldr	r3, [pc, #8]	; (800267c <HAL_FLASH_GetError+0x10>)
 8002672:	69db      	ldr	r3, [r3, #28]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	20000480 	.word	0x20000480

08002680 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <FLASH_Program_HalfWord+0x30>)
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <FLASH_Program_HalfWord+0x34>)
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <FLASH_Program_HalfWord+0x34>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	887a      	ldrh	r2, [r7, #2]
 80026a2:	801a      	strh	r2, [r3, #0]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000480 	.word	0x20000480
 80026b4:	40022000 	.word	0x40022000

080026b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80026c0:	f7ff fd7e 	bl	80021c0 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80026c6:	e010      	b.n	80026ea <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ce:	d00c      	beq.n	80026ea <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <FLASH_WaitForLastOperation+0x2e>
 80026d6:	f7ff fd73 	bl	80021c0 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d201      	bcs.n	80026ea <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e025      	b.n	8002736 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <FLASH_WaitForLastOperation+0x88>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e8      	bne.n	80026c8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <FLASH_WaitForLastOperation+0x88>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002702:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <FLASH_WaitForLastOperation+0x88>)
 8002704:	2220      	movs	r2, #32
 8002706:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <FLASH_WaitForLastOperation+0x88>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10b      	bne.n	800272c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002714:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <FLASH_WaitForLastOperation+0x88>)
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002720:	4b07      	ldr	r3, [pc, #28]	; (8002740 <FLASH_WaitForLastOperation+0x88>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800272c:	f000 f80a 	bl	8002744 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40022000 	.word	0x40022000

08002744 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800274e:	4b23      	ldr	r3, [pc, #140]	; (80027dc <FLASH_SetErrorCode+0x98>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800275a:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <FLASH_SetErrorCode+0x9c>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <FLASH_SetErrorCode+0x9c>)
 8002764:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f043 0310 	orr.w	r3, r3, #16
 800276c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <FLASH_SetErrorCode+0x98>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800277a:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <FLASH_SetErrorCode+0x9c>)
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <FLASH_SetErrorCode+0x9c>)
 8002784:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <FLASH_SetErrorCode+0x98>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <FLASH_SetErrorCode+0x9c>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	4a0f      	ldr	r2, [pc, #60]	; (80027e0 <FLASH_SetErrorCode+0x9c>)
 80027a4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <FLASH_SetErrorCode+0x98>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <FLASH_SetErrorCode+0x98>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f240 1201 	movw	r2, #257	; 0x101
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d106      	bne.n	80027ca <FLASH_SetErrorCode+0x86>
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <FLASH_SetErrorCode+0x98>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	4a06      	ldr	r2, [pc, #24]	; (80027dc <FLASH_SetErrorCode+0x98>)
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	61d3      	str	r3, [r2, #28]
}  
 80027c8:	e002      	b.n	80027d0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <FLASH_SetErrorCode+0x98>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	60d3      	str	r3, [r2, #12]
}  
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40022000 	.word	0x40022000
 80027e0:	20000480 	.word	0x20000480

080027e4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027f6:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <HAL_FLASHEx_Erase+0xd0>)
 80027f8:	7e1b      	ldrb	r3, [r3, #24]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_FLASHEx_Erase+0x1e>
 80027fe:	2302      	movs	r3, #2
 8002800:	e053      	b.n	80028aa <HAL_FLASHEx_Erase+0xc6>
 8002802:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <HAL_FLASHEx_Erase+0xd0>)
 8002804:	2201      	movs	r2, #1
 8002806:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d116      	bne.n	800283e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002810:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002814:	f7ff ff50 	bl	80026b8 <FLASH_WaitForLastOperation>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d141      	bne.n	80028a2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800281e:	2001      	movs	r0, #1
 8002820:	f000 f84c 	bl	80028bc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002824:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002828:	f7ff ff46 	bl	80026b8 <FLASH_WaitForLastOperation>
 800282c:	4603      	mov	r3, r0
 800282e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002830:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <HAL_FLASHEx_Erase+0xd4>)
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	4a20      	ldr	r2, [pc, #128]	; (80028b8 <HAL_FLASHEx_Erase+0xd4>)
 8002836:	f023 0304 	bic.w	r3, r3, #4
 800283a:	6113      	str	r3, [r2, #16]
 800283c:	e031      	b.n	80028a2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800283e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002842:	f7ff ff39 	bl	80026b8 <FLASH_WaitForLastOperation>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d12a      	bne.n	80028a2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	f04f 32ff 	mov.w	r2, #4294967295
 8002852:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	e019      	b.n	8002890 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800285c:	68b8      	ldr	r0, [r7, #8]
 800285e:	f000 f849 	bl	80028f4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002862:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002866:	f7ff ff27 	bl	80026b8 <FLASH_WaitForLastOperation>
 800286a:	4603      	mov	r3, r0
 800286c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_FLASHEx_Erase+0xd4>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <HAL_FLASHEx_Erase+0xd4>)
 8002874:	f023 0302 	bic.w	r3, r3, #2
 8002878:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	601a      	str	r2, [r3, #0]
            break;
 8002886:	e00c      	b.n	80028a2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800288e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	029a      	lsls	r2, r3, #10
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d3dc      	bcc.n	800285c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <HAL_FLASHEx_Erase+0xd0>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	761a      	strb	r2, [r3, #24]

  return status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000480 	.word	0x20000480
 80028b8:	40022000 	.word	0x40022000

080028bc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <FLASH_MassErase+0x30>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <FLASH_MassErase+0x34>)
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	4a08      	ldr	r2, [pc, #32]	; (80028f0 <FLASH_MassErase+0x34>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <FLASH_MassErase+0x34>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <FLASH_MassErase+0x34>)
 80028dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028e0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	20000480 	.word	0x20000480
 80028f0:	40022000 	.word	0x40022000

080028f4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <FLASH_PageErase+0x38>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <FLASH_PageErase+0x3c>)
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <FLASH_PageErase+0x3c>)
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800290e:	4a08      	ldr	r2, [pc, #32]	; (8002930 <FLASH_PageErase+0x3c>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <FLASH_PageErase+0x3c>)
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	4a05      	ldr	r2, [pc, #20]	; (8002930 <FLASH_PageErase+0x3c>)
 800291a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800291e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000480 	.word	0x20000480
 8002930:	40022000 	.word	0x40022000

08002934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002934:	b480      	push	{r7}
 8002936:	b08b      	sub	sp, #44	; 0x2c
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002946:	e127      	b.n	8002b98 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002948:	2201      	movs	r2, #1
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	429a      	cmp	r2, r3
 8002962:	f040 8116 	bne.w	8002b92 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b12      	cmp	r3, #18
 800296c:	d034      	beq.n	80029d8 <HAL_GPIO_Init+0xa4>
 800296e:	2b12      	cmp	r3, #18
 8002970:	d80d      	bhi.n	800298e <HAL_GPIO_Init+0x5a>
 8002972:	2b02      	cmp	r3, #2
 8002974:	d02b      	beq.n	80029ce <HAL_GPIO_Init+0x9a>
 8002976:	2b02      	cmp	r3, #2
 8002978:	d804      	bhi.n	8002984 <HAL_GPIO_Init+0x50>
 800297a:	2b00      	cmp	r3, #0
 800297c:	d031      	beq.n	80029e2 <HAL_GPIO_Init+0xae>
 800297e:	2b01      	cmp	r3, #1
 8002980:	d01c      	beq.n	80029bc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002982:	e048      	b.n	8002a16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002984:	2b03      	cmp	r3, #3
 8002986:	d043      	beq.n	8002a10 <HAL_GPIO_Init+0xdc>
 8002988:	2b11      	cmp	r3, #17
 800298a:	d01b      	beq.n	80029c4 <HAL_GPIO_Init+0x90>
          break;
 800298c:	e043      	b.n	8002a16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800298e:	4a89      	ldr	r2, [pc, #548]	; (8002bb4 <HAL_GPIO_Init+0x280>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d026      	beq.n	80029e2 <HAL_GPIO_Init+0xae>
 8002994:	4a87      	ldr	r2, [pc, #540]	; (8002bb4 <HAL_GPIO_Init+0x280>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d806      	bhi.n	80029a8 <HAL_GPIO_Init+0x74>
 800299a:	4a87      	ldr	r2, [pc, #540]	; (8002bb8 <HAL_GPIO_Init+0x284>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d020      	beq.n	80029e2 <HAL_GPIO_Init+0xae>
 80029a0:	4a86      	ldr	r2, [pc, #536]	; (8002bbc <HAL_GPIO_Init+0x288>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01d      	beq.n	80029e2 <HAL_GPIO_Init+0xae>
          break;
 80029a6:	e036      	b.n	8002a16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80029a8:	4a85      	ldr	r2, [pc, #532]	; (8002bc0 <HAL_GPIO_Init+0x28c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d019      	beq.n	80029e2 <HAL_GPIO_Init+0xae>
 80029ae:	4a85      	ldr	r2, [pc, #532]	; (8002bc4 <HAL_GPIO_Init+0x290>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d016      	beq.n	80029e2 <HAL_GPIO_Init+0xae>
 80029b4:	4a84      	ldr	r2, [pc, #528]	; (8002bc8 <HAL_GPIO_Init+0x294>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <HAL_GPIO_Init+0xae>
          break;
 80029ba:	e02c      	b.n	8002a16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	623b      	str	r3, [r7, #32]
          break;
 80029c2:	e028      	b.n	8002a16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	3304      	adds	r3, #4
 80029ca:	623b      	str	r3, [r7, #32]
          break;
 80029cc:	e023      	b.n	8002a16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	3308      	adds	r3, #8
 80029d4:	623b      	str	r3, [r7, #32]
          break;
 80029d6:	e01e      	b.n	8002a16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	330c      	adds	r3, #12
 80029de:	623b      	str	r3, [r7, #32]
          break;
 80029e0:	e019      	b.n	8002a16 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029ea:	2304      	movs	r3, #4
 80029ec:	623b      	str	r3, [r7, #32]
          break;
 80029ee:	e012      	b.n	8002a16 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029f8:	2308      	movs	r3, #8
 80029fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	611a      	str	r2, [r3, #16]
          break;
 8002a02:	e008      	b.n	8002a16 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a04:	2308      	movs	r3, #8
 8002a06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	615a      	str	r2, [r3, #20]
          break;
 8002a0e:	e002      	b.n	8002a16 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a10:	2300      	movs	r3, #0
 8002a12:	623b      	str	r3, [r7, #32]
          break;
 8002a14:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2bff      	cmp	r3, #255	; 0xff
 8002a1a:	d801      	bhi.n	8002a20 <HAL_GPIO_Init+0xec>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	e001      	b.n	8002a24 <HAL_GPIO_Init+0xf0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2bff      	cmp	r3, #255	; 0xff
 8002a2a:	d802      	bhi.n	8002a32 <HAL_GPIO_Init+0xfe>
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	e002      	b.n	8002a38 <HAL_GPIO_Init+0x104>
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	3b08      	subs	r3, #8
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	210f      	movs	r1, #15
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	401a      	ands	r2, r3
 8002a4a:	6a39      	ldr	r1, [r7, #32]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	431a      	orrs	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8096 	beq.w	8002b92 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a66:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <HAL_GPIO_Init+0x298>)
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <HAL_GPIO_Init+0x298>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6193      	str	r3, [r2, #24]
 8002a72:	4b56      	ldr	r3, [pc, #344]	; (8002bcc <HAL_GPIO_Init+0x298>)
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a7e:	4a54      	ldr	r2, [pc, #336]	; (8002bd0 <HAL_GPIO_Init+0x29c>)
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4b      	ldr	r2, [pc, #300]	; (8002bd4 <HAL_GPIO_Init+0x2a0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d013      	beq.n	8002ad2 <HAL_GPIO_Init+0x19e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4a      	ldr	r2, [pc, #296]	; (8002bd8 <HAL_GPIO_Init+0x2a4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00d      	beq.n	8002ace <HAL_GPIO_Init+0x19a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a49      	ldr	r2, [pc, #292]	; (8002bdc <HAL_GPIO_Init+0x2a8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d007      	beq.n	8002aca <HAL_GPIO_Init+0x196>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a48      	ldr	r2, [pc, #288]	; (8002be0 <HAL_GPIO_Init+0x2ac>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d101      	bne.n	8002ac6 <HAL_GPIO_Init+0x192>
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x1a0>
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	e004      	b.n	8002ad4 <HAL_GPIO_Init+0x1a0>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e002      	b.n	8002ad4 <HAL_GPIO_Init+0x1a0>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_GPIO_Init+0x1a0>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad6:	f002 0203 	and.w	r2, r2, #3
 8002ada:	0092      	lsls	r2, r2, #2
 8002adc:	4093      	lsls	r3, r2
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ae4:	493a      	ldr	r1, [pc, #232]	; (8002bd0 <HAL_GPIO_Init+0x29c>)
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3302      	adds	r3, #2
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d006      	beq.n	8002b0c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002afe:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4938      	ldr	r1, [pc, #224]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
 8002b0a:	e006      	b.n	8002b1a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b0c:	4b35      	ldr	r3, [pc, #212]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	4933      	ldr	r1, [pc, #204]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b26:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	492e      	ldr	r1, [pc, #184]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
 8002b32:	e006      	b.n	8002b42 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b34:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	4929      	ldr	r1, [pc, #164]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b4e:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	4924      	ldr	r1, [pc, #144]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
 8002b5a:	e006      	b.n	8002b6a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b5c:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	491f      	ldr	r1, [pc, #124]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d006      	beq.n	8002b84 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	491a      	ldr	r1, [pc, #104]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60cb      	str	r3, [r1, #12]
 8002b82:	e006      	b.n	8002b92 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b84:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	4915      	ldr	r1, [pc, #84]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	3301      	adds	r3, #1
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f47f aed0 	bne.w	8002948 <HAL_GPIO_Init+0x14>
  }
}
 8002ba8:	bf00      	nop
 8002baa:	372c      	adds	r7, #44	; 0x2c
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	10210000 	.word	0x10210000
 8002bb8:	10110000 	.word	0x10110000
 8002bbc:	10120000 	.word	0x10120000
 8002bc0:	10310000 	.word	0x10310000
 8002bc4:	10320000 	.word	0x10320000
 8002bc8:	10220000 	.word	0x10220000
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40010800 	.word	0x40010800
 8002bd8:	40010c00 	.word	0x40010c00
 8002bdc:	40011000 	.word	0x40011000
 8002be0:	40011400 	.word	0x40011400
 8002be4:	40010400 	.word	0x40010400

08002be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	e001      	b.n	8002c0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	807b      	strh	r3, [r7, #2]
 8002c22:	4613      	mov	r3, r2
 8002c24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c26:	787b      	ldrb	r3, [r7, #1]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2c:	887a      	ldrh	r2, [r7, #2]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c32:	e003      	b.n	8002c3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c34:	887b      	ldrh	r3, [r7, #2]
 8002c36:	041a      	lsls	r2, r3, #16
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	611a      	str	r2, [r3, #16]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
	...

08002c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e11f      	b.n	8002e9a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe f8c8 	bl	8000e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2224      	movs	r2, #36	; 0x24
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002caa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cac:	f000 ffe0 	bl	8003c70 <HAL_RCC_GetPCLK1Freq>
 8002cb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4a7b      	ldr	r2, [pc, #492]	; (8002ea4 <HAL_I2C_Init+0x25c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d807      	bhi.n	8002ccc <HAL_I2C_Init+0x84>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a7a      	ldr	r2, [pc, #488]	; (8002ea8 <HAL_I2C_Init+0x260>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	bf94      	ite	ls
 8002cc4:	2301      	movls	r3, #1
 8002cc6:	2300      	movhi	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e006      	b.n	8002cda <HAL_I2C_Init+0x92>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4a77      	ldr	r2, [pc, #476]	; (8002eac <HAL_I2C_Init+0x264>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	bf94      	ite	ls
 8002cd4:	2301      	movls	r3, #1
 8002cd6:	2300      	movhi	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0db      	b.n	8002e9a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a72      	ldr	r2, [pc, #456]	; (8002eb0 <HAL_I2C_Init+0x268>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	0c9b      	lsrs	r3, r3, #18
 8002cec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4a64      	ldr	r2, [pc, #400]	; (8002ea4 <HAL_I2C_Init+0x25c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d802      	bhi.n	8002d1c <HAL_I2C_Init+0xd4>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	e009      	b.n	8002d30 <HAL_I2C_Init+0xe8>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	4a63      	ldr	r2, [pc, #396]	; (8002eb4 <HAL_I2C_Init+0x26c>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	3301      	adds	r3, #1
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	430b      	orrs	r3, r1
 8002d36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4956      	ldr	r1, [pc, #344]	; (8002ea4 <HAL_I2C_Init+0x25c>)
 8002d4c:	428b      	cmp	r3, r1
 8002d4e:	d80d      	bhi.n	8002d6c <HAL_I2C_Init+0x124>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e59      	subs	r1, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	bf38      	it	cc
 8002d68:	2304      	movcc	r3, #4
 8002d6a:	e04f      	b.n	8002e0c <HAL_I2C_Init+0x1c4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d111      	bne.n	8002d98 <HAL_I2C_Init+0x150>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e012      	b.n	8002dbe <HAL_I2C_Init+0x176>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	0099      	lsls	r1, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Init+0x17e>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e022      	b.n	8002e0c <HAL_I2C_Init+0x1c4>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10e      	bne.n	8002dec <HAL_I2C_Init+0x1a4>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e58      	subs	r0, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6859      	ldr	r1, [r3, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	440b      	add	r3, r1
 8002ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dea:	e00f      	b.n	8002e0c <HAL_I2C_Init+0x1c4>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e58      	subs	r0, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	0099      	lsls	r1, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	6809      	ldr	r1, [r1, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6911      	ldr	r1, [r2, #16]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	000186a0 	.word	0x000186a0
 8002ea8:	001e847f 	.word	0x001e847f
 8002eac:	003d08ff 	.word	0x003d08ff
 8002eb0:	431bde83 	.word	0x431bde83
 8002eb4:	10624dd3 	.word	0x10624dd3

08002eb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	817b      	strh	r3, [r7, #10]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7ff f978 	bl	80021c0 <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	f040 80e0 	bne.w	80030a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4970      	ldr	r1, [pc, #448]	; (80030ac <HAL_I2C_Master_Transmit+0x1f4>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f964 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e0d3      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_I2C_Master_Transmit+0x50>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0cc      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d007      	beq.n	8002f2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0201 	orr.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2221      	movs	r2, #33	; 0x21
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2210      	movs	r2, #16
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	893a      	ldrh	r2, [r7, #8]
 8002f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a50      	ldr	r2, [pc, #320]	; (80030b0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f70:	8979      	ldrh	r1, [r7, #10]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	6a3a      	ldr	r2, [r7, #32]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f89c 	bl	80030b4 <I2C_MasterRequestWrite>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e08d      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f9c:	e066      	b.n	800306c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	6a39      	ldr	r1, [r7, #32]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f9de 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d107      	bne.n	8002fc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e06b      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b04      	cmp	r3, #4
 8003006:	d11b      	bne.n	8003040 <HAL_I2C_Master_Transmit+0x188>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d017      	beq.n	8003040 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	6a39      	ldr	r1, [r7, #32]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f9ce 	bl	80033e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00d      	beq.n	800306c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2b04      	cmp	r3, #4
 8003056:	d107      	bne.n	8003068 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003066:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e01a      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	d194      	bne.n	8002f9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	00100002 	.word	0x00100002
 80030b0:	ffff0000 	.word	0xffff0000

080030b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	460b      	mov	r3, r1
 80030c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d006      	beq.n	80030de <I2C_MasterRequestWrite+0x2a>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d003      	beq.n	80030de <I2C_MasterRequestWrite+0x2a>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030dc:	d108      	bne.n	80030f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e00b      	b.n	8003108 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	2b12      	cmp	r3, #18
 80030f6:	d107      	bne.n	8003108 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003106:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f84f 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800312e:	d103      	bne.n	8003138 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e035      	b.n	80031a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003144:	d108      	bne.n	8003158 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003146:	897b      	ldrh	r3, [r7, #10]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003154:	611a      	str	r2, [r3, #16]
 8003156:	e01b      	b.n	8003190 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003158:	897b      	ldrh	r3, [r7, #10]
 800315a:	11db      	asrs	r3, r3, #7
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f003 0306 	and.w	r3, r3, #6
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f063 030f 	orn	r3, r3, #15
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	490e      	ldr	r1, [pc, #56]	; (80031b0 <I2C_MasterRequestWrite+0xfc>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f875 	bl	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e010      	b.n	80031a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003186:	897b      	ldrh	r3, [r7, #10]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4907      	ldr	r1, [pc, #28]	; (80031b4 <I2C_MasterRequestWrite+0x100>)
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f865 	bl	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	00010008 	.word	0x00010008
 80031b4:	00010002 	.word	0x00010002

080031b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c8:	e025      	b.n	8003216 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d021      	beq.n	8003216 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d2:	f7fe fff5 	bl	80021c0 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d302      	bcc.n	80031e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d116      	bne.n	8003216 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f043 0220 	orr.w	r2, r3, #32
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e023      	b.n	800325e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	0c1b      	lsrs	r3, r3, #16
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10d      	bne.n	800323c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	43da      	mvns	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4013      	ands	r3, r2
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	e00c      	b.n	8003256 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	43da      	mvns	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4013      	ands	r3, r2
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf0c      	ite	eq
 800324e:	2301      	moveq	r3, #1
 8003250:	2300      	movne	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	429a      	cmp	r2, r3
 800325a:	d0b6      	beq.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003274:	e051      	b.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003284:	d123      	bne.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003294:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800329e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f043 0204 	orr.w	r2, r3, #4
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e046      	b.n	800335c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d021      	beq.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d6:	f7fe ff73 	bl	80021c0 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d302      	bcc.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d116      	bne.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f043 0220 	orr.w	r2, r3, #32
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e020      	b.n	800335c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d10c      	bne.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	43da      	mvns	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4013      	ands	r3, r2
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf14      	ite	ne
 8003336:	2301      	movne	r3, #1
 8003338:	2300      	moveq	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	e00b      	b.n	8003356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	43da      	mvns	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4013      	ands	r3, r2
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d18d      	bne.n	8003276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003370:	e02d      	b.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f878 	bl	8003468 <I2C_IsAcknowledgeFailed>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e02d      	b.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d021      	beq.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fe ff19 	bl	80021c0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d116      	bne.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f043 0220 	orr.w	r2, r3, #32
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e007      	b.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d1ca      	bne.n	8003372 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033f2:	e02d      	b.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f837 	bl	8003468 <I2C_IsAcknowledgeFailed>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e02d      	b.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d021      	beq.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340c:	f7fe fed8 	bl	80021c0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	429a      	cmp	r2, r3
 800341a:	d302      	bcc.n	8003422 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d116      	bne.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e007      	b.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b04      	cmp	r3, #4
 800345c:	d1ca      	bne.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347e:	d11b      	bne.n	80034b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003488:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f043 0204 	orr.w	r2, r3, #4
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e26c      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8087 	beq.w	80035f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034e4:	4b92      	ldr	r3, [pc, #584]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d00c      	beq.n	800350a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034f0:	4b8f      	ldr	r3, [pc, #572]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d112      	bne.n	8003522 <HAL_RCC_OscConfig+0x5e>
 80034fc:	4b8c      	ldr	r3, [pc, #560]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d10b      	bne.n	8003522 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350a:	4b89      	ldr	r3, [pc, #548]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d06c      	beq.n	80035f0 <HAL_RCC_OscConfig+0x12c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d168      	bne.n	80035f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e246      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352a:	d106      	bne.n	800353a <HAL_RCC_OscConfig+0x76>
 800352c:	4b80      	ldr	r3, [pc, #512]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a7f      	ldr	r2, [pc, #508]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	e02e      	b.n	8003598 <HAL_RCC_OscConfig+0xd4>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x98>
 8003542:	4b7b      	ldr	r3, [pc, #492]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a7a      	ldr	r2, [pc, #488]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b78      	ldr	r3, [pc, #480]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a77      	ldr	r2, [pc, #476]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e01d      	b.n	8003598 <HAL_RCC_OscConfig+0xd4>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0xbc>
 8003566:	4b72      	ldr	r3, [pc, #456]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a71      	ldr	r2, [pc, #452]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800356c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b6f      	ldr	r3, [pc, #444]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6e      	ldr	r2, [pc, #440]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0xd4>
 8003580:	4b6b      	ldr	r3, [pc, #428]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a6a      	ldr	r2, [pc, #424]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b68      	ldr	r3, [pc, #416]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a67      	ldr	r2, [pc, #412]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe fe0e 	bl	80021c0 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe fe0a 	bl	80021c0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1fa      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	4b5d      	ldr	r3, [pc, #372]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0xe4>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe fdfa 	bl	80021c0 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fdf6 	bl	80021c0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e1e6      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e2:	4b53      	ldr	r3, [pc, #332]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x10c>
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d063      	beq.n	80036c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035fe:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00b      	beq.n	8003622 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800360a:	4b49      	ldr	r3, [pc, #292]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b08      	cmp	r3, #8
 8003614:	d11c      	bne.n	8003650 <HAL_RCC_OscConfig+0x18c>
 8003616:	4b46      	ldr	r3, [pc, #280]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d116      	bne.n	8003650 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003622:	4b43      	ldr	r3, [pc, #268]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_RCC_OscConfig+0x176>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d001      	beq.n	800363a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e1ba      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363a:	4b3d      	ldr	r3, [pc, #244]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4939      	ldr	r1, [pc, #228]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	e03a      	b.n	80036c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003658:	4b36      	ldr	r3, [pc, #216]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365e:	f7fe fdaf 	bl	80021c0 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003666:	f7fe fdab 	bl	80021c0 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e19b      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003678:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003684:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4927      	ldr	r1, [pc, #156]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003694:	4313      	orrs	r3, r2
 8003696:	600b      	str	r3, [r1, #0]
 8003698:	e015      	b.n	80036c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369a:	4b26      	ldr	r3, [pc, #152]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fe fd8e 	bl	80021c0 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a8:	f7fe fd8a 	bl	80021c0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e17a      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ba:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d03a      	beq.n	8003748 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d019      	beq.n	800370e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036da:	4b17      	ldr	r3, [pc, #92]	; (8003738 <HAL_RCC_OscConfig+0x274>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e0:	f7fe fd6e 	bl	80021c0 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e8:	f7fe fd6a 	bl	80021c0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e15a      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003706:	2001      	movs	r0, #1
 8003708:	f000 fada 	bl	8003cc0 <RCC_Delay>
 800370c:	e01c      	b.n	8003748 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HAL_RCC_OscConfig+0x274>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003714:	f7fe fd54 	bl	80021c0 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371a:	e00f      	b.n	800373c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371c:	f7fe fd50 	bl	80021c0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d908      	bls.n	800373c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e140      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000
 8003734:	42420000 	.word	0x42420000
 8003738:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373c:	4b9e      	ldr	r3, [pc, #632]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e9      	bne.n	800371c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80a6 	beq.w	80038a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375a:	4b97      	ldr	r3, [pc, #604]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	4b94      	ldr	r3, [pc, #592]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	4a93      	ldr	r2, [pc, #588]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	61d3      	str	r3, [r2, #28]
 8003772:	4b91      	ldr	r3, [pc, #580]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003782:	4b8e      	ldr	r3, [pc, #568]	; (80039bc <HAL_RCC_OscConfig+0x4f8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d118      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378e:	4b8b      	ldr	r3, [pc, #556]	; (80039bc <HAL_RCC_OscConfig+0x4f8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a8a      	ldr	r2, [pc, #552]	; (80039bc <HAL_RCC_OscConfig+0x4f8>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379a:	f7fe fd11 	bl	80021c0 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a2:	f7fe fd0d 	bl	80021c0 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b64      	cmp	r3, #100	; 0x64
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e0fd      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	4b81      	ldr	r3, [pc, #516]	; (80039bc <HAL_RCC_OscConfig+0x4f8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x312>
 80037c8:	4b7b      	ldr	r3, [pc, #492]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	4a7a      	ldr	r2, [pc, #488]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6213      	str	r3, [r2, #32]
 80037d4:	e02d      	b.n	8003832 <HAL_RCC_OscConfig+0x36e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x334>
 80037de:	4b76      	ldr	r3, [pc, #472]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	4a75      	ldr	r2, [pc, #468]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	6213      	str	r3, [r2, #32]
 80037ea:	4b73      	ldr	r3, [pc, #460]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	4a72      	ldr	r2, [pc, #456]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	6213      	str	r3, [r2, #32]
 80037f6:	e01c      	b.n	8003832 <HAL_RCC_OscConfig+0x36e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d10c      	bne.n	800381a <HAL_RCC_OscConfig+0x356>
 8003800:	4b6d      	ldr	r3, [pc, #436]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4a6c      	ldr	r2, [pc, #432]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	6213      	str	r3, [r2, #32]
 800380c:	4b6a      	ldr	r3, [pc, #424]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4a69      	ldr	r2, [pc, #420]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6213      	str	r3, [r2, #32]
 8003818:	e00b      	b.n	8003832 <HAL_RCC_OscConfig+0x36e>
 800381a:	4b67      	ldr	r3, [pc, #412]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4a66      	ldr	r2, [pc, #408]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	6213      	str	r3, [r2, #32]
 8003826:	4b64      	ldr	r3, [pc, #400]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	4a63      	ldr	r2, [pc, #396]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800382c:	f023 0304 	bic.w	r3, r3, #4
 8003830:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d015      	beq.n	8003866 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383a:	f7fe fcc1 	bl	80021c0 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fe fcbd 	bl	80021c0 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e0ab      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003858:	4b57      	ldr	r3, [pc, #348]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ee      	beq.n	8003842 <HAL_RCC_OscConfig+0x37e>
 8003864:	e014      	b.n	8003890 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003866:	f7fe fcab 	bl	80021c0 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fe fca7 	bl	80021c0 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e095      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003884:	4b4c      	ldr	r3, [pc, #304]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1ee      	bne.n	800386e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d105      	bne.n	80038a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003896:	4b48      	ldr	r3, [pc, #288]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	4a47      	ldr	r2, [pc, #284]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800389c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8081 	beq.w	80039ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ac:	4b42      	ldr	r3, [pc, #264]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d061      	beq.n	800397c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d146      	bne.n	800394e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c0:	4b3f      	ldr	r3, [pc, #252]	; (80039c0 <HAL_RCC_OscConfig+0x4fc>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c6:	f7fe fc7b 	bl	80021c0 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fe fc77 	bl	80021c0 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e067      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e0:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f4:	d108      	bne.n	8003908 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038f6:	4b30      	ldr	r3, [pc, #192]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	492d      	ldr	r1, [pc, #180]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003908:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a19      	ldr	r1, [r3, #32]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	430b      	orrs	r3, r1
 800391a:	4927      	ldr	r1, [pc, #156]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003920:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <HAL_RCC_OscConfig+0x4fc>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fe fc4b 	bl	80021c0 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392e:	f7fe fc47 	bl	80021c0 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e037      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003940:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x46a>
 800394c:	e02f      	b.n	80039ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <HAL_RCC_OscConfig+0x4fc>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fe fc34 	bl	80021c0 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395c:	f7fe fc30 	bl	80021c0 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e020      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396e:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x498>
 800397a:	e018      	b.n	80039ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e013      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	429a      	cmp	r2, r3
 800399a:	d106      	bne.n	80039aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d001      	beq.n	80039ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40007000 	.word	0x40007000
 80039c0:	42420060 	.word	0x42420060

080039c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0d0      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039d8:	4b6a      	ldr	r3, [pc, #424]	; (8003b84 <HAL_RCC_ClockConfig+0x1c0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d910      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b67      	ldr	r3, [pc, #412]	; (8003b84 <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 0207 	bic.w	r2, r3, #7
 80039ee:	4965      	ldr	r1, [pc, #404]	; (8003b84 <HAL_RCC_ClockConfig+0x1c0>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b63      	ldr	r3, [pc, #396]	; (8003b84 <HAL_RCC_ClockConfig+0x1c0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0b8      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a20:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a38:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4a52      	ldr	r2, [pc, #328]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b50      	ldr	r3, [pc, #320]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	494d      	ldr	r1, [pc, #308]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d040      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d115      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a82:	4b41      	ldr	r3, [pc, #260]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e073      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a92:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e06b      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa2:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f023 0203 	bic.w	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4936      	ldr	r1, [pc, #216]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab4:	f7fe fb84 	bl	80021c0 <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	e00a      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abc:	f7fe fb80 	bl	80021c0 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e053      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 020c 	and.w	r2, r3, #12
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d1eb      	bne.n	8003abc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d210      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 0207 	bic.w	r2, r3, #7
 8003afa:	4922      	ldr	r1, [pc, #136]	; (8003b84 <HAL_RCC_ClockConfig+0x1c0>)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <HAL_RCC_ClockConfig+0x1c0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e032      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4916      	ldr	r1, [pc, #88]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	490e      	ldr	r1, [pc, #56]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b52:	f000 f821 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8003b56:	4601      	mov	r1, r0
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b64:	5cd3      	ldrb	r3, [r2, r3]
 8003b66:	fa21 f303 	lsr.w	r3, r1, r3
 8003b6a:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <HAL_RCC_ClockConfig+0x1cc>)
 8003b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_ClockConfig+0x1d0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fae2 	bl	800213c <HAL_InitTick>

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40022000 	.word	0x40022000
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	080066f4 	.word	0x080066f4
 8003b90:	20000008 	.word	0x20000008
 8003b94:	2000000c 	.word	0x2000000c

08003b98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b98:	b490      	push	{r4, r7}
 8003b9a:	b08a      	sub	sp, #40	; 0x28
 8003b9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b9e:	4b2a      	ldr	r3, [pc, #168]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ba0:	1d3c      	adds	r4, r7, #4
 8003ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ba8:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bc2:	4b23      	ldr	r3, [pc, #140]	; (8003c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d002      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d003      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0x46>
 8003bd6:	e02d      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bda:	623b      	str	r3, [r7, #32]
      break;
 8003bdc:	e02d      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	0c9b      	lsrs	r3, r3, #18
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bea:	4413      	add	r3, r2
 8003bec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003bf0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bfc:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	0c5b      	lsrs	r3, r3, #17
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	4a0f      	ldr	r2, [pc, #60]	; (8003c54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c16:	fb02 f203 	mul.w	r2, r2, r3
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
 8003c22:	e004      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	4a0c      	ldr	r2, [pc, #48]	; (8003c58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	623b      	str	r3, [r7, #32]
      break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c36:	623b      	str	r3, [r7, #32]
      break;
 8003c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3728      	adds	r7, #40	; 0x28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc90      	pop	{r4, r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	080066e0 	.word	0x080066e0
 8003c4c:	080066f0 	.word	0x080066f0
 8003c50:	40021000 	.word	0x40021000
 8003c54:	007a1200 	.word	0x007a1200
 8003c58:	003d0900 	.word	0x003d0900

08003c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c60:	4b02      	ldr	r3, [pc, #8]	; (8003c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8003c62:	681b      	ldr	r3, [r3, #0]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr
 8003c6c:	20000008 	.word	0x20000008

08003c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c74:	f7ff fff2 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003c78:	4601      	mov	r1, r0
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	4a03      	ldr	r2, [pc, #12]	; (8003c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c86:	5cd3      	ldrb	r3, [r2, r3]
 8003c88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	08006704 	.word	0x08006704

08003c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c9c:	f7ff ffde 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003ca0:	4601      	mov	r1, r0
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	0adb      	lsrs	r3, r3, #11
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	4a03      	ldr	r2, [pc, #12]	; (8003cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cae:	5cd3      	ldrb	r3, [r2, r3]
 8003cb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	08006704 	.word	0x08006704

08003cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <RCC_Delay+0x34>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <RCC_Delay+0x38>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	0a5b      	lsrs	r3, r3, #9
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cdc:	bf00      	nop
  }
  while (Delay --);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1e5a      	subs	r2, r3, #1
 8003ce2:	60fa      	str	r2, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f9      	bne.n	8003cdc <RCC_Delay+0x1c>
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000008 	.word	0x20000008
 8003cf8:	10624dd3 	.word	0x10624dd3

08003cfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e041      	b.n	8003d92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fe f900 	bl	8001f28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f000 f98e 	bl	800405c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <HAL_TIM_PWM_Start+0x24>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	e022      	b.n	8003e06 <HAL_TIM_PWM_Start+0x6a>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d109      	bne.n	8003dda <HAL_TIM_PWM_Start+0x3e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	e015      	b.n	8003e06 <HAL_TIM_PWM_Start+0x6a>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d109      	bne.n	8003df4 <HAL_TIM_PWM_Start+0x58>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e008      	b.n	8003e06 <HAL_TIM_PWM_Start+0x6a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	bf14      	ite	ne
 8003e00:	2301      	movne	r3, #1
 8003e02:	2300      	moveq	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e05e      	b.n	8003ecc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d104      	bne.n	8003e1e <HAL_TIM_PWM_Start+0x82>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e1c:	e013      	b.n	8003e46 <HAL_TIM_PWM_Start+0xaa>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d104      	bne.n	8003e2e <HAL_TIM_PWM_Start+0x92>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e2c:	e00b      	b.n	8003e46 <HAL_TIM_PWM_Start+0xaa>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_PWM_Start+0xa2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e3c:	e003      	b.n	8003e46 <HAL_TIM_PWM_Start+0xaa>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2202      	movs	r2, #2
 8003e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	6839      	ldr	r1, [r7, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 faee 	bl	8004430 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a1e      	ldr	r2, [pc, #120]	; (8003ed4 <HAL_TIM_PWM_Start+0x138>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d107      	bne.n	8003e6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <HAL_TIM_PWM_Start+0x138>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00e      	beq.n	8003e96 <HAL_TIM_PWM_Start+0xfa>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e80:	d009      	beq.n	8003e96 <HAL_TIM_PWM_Start+0xfa>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <HAL_TIM_PWM_Start+0x13c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_TIM_PWM_Start+0xfa>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a12      	ldr	r2, [pc, #72]	; (8003edc <HAL_TIM_PWM_Start+0x140>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d111      	bne.n	8003eba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b06      	cmp	r3, #6
 8003ea6:	d010      	beq.n	8003eca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb8:	e007      	b.n	8003eca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800

08003ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e0ac      	b.n	8004054 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b0c      	cmp	r3, #12
 8003f06:	f200 809f 	bhi.w	8004048 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003f0a:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f45 	.word	0x08003f45
 8003f14:	08004049 	.word	0x08004049
 8003f18:	08004049 	.word	0x08004049
 8003f1c:	08004049 	.word	0x08004049
 8003f20:	08003f85 	.word	0x08003f85
 8003f24:	08004049 	.word	0x08004049
 8003f28:	08004049 	.word	0x08004049
 8003f2c:	08004049 	.word	0x08004049
 8003f30:	08003fc7 	.word	0x08003fc7
 8003f34:	08004049 	.word	0x08004049
 8003f38:	08004049 	.word	0x08004049
 8003f3c:	08004049 	.word	0x08004049
 8003f40:	08004007 	.word	0x08004007
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f8e8 	bl	8004120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0208 	orr.w	r2, r2, #8
 8003f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0204 	bic.w	r2, r2, #4
 8003f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6999      	ldr	r1, [r3, #24]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	619a      	str	r2, [r3, #24]
      break;
 8003f82:	e062      	b.n	800404a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f92e 	bl	80041ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6999      	ldr	r1, [r3, #24]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	021a      	lsls	r2, r3, #8
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	619a      	str	r2, [r3, #24]
      break;
 8003fc4:	e041      	b.n	800404a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f977 	bl	80042c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0208 	orr.w	r2, r2, #8
 8003fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0204 	bic.w	r2, r2, #4
 8003ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69d9      	ldr	r1, [r3, #28]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	61da      	str	r2, [r3, #28]
      break;
 8004004:	e021      	b.n	800404a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 f9c1 	bl	8004394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69d9      	ldr	r1, [r3, #28]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	021a      	lsls	r2, r3, #8
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	61da      	str	r2, [r3, #28]
      break;
 8004046:	e000      	b.n	800404a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004048:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a29      	ldr	r2, [pc, #164]	; (8004114 <TIM_Base_SetConfig+0xb8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00b      	beq.n	800408c <TIM_Base_SetConfig+0x30>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407a:	d007      	beq.n	800408c <TIM_Base_SetConfig+0x30>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a26      	ldr	r2, [pc, #152]	; (8004118 <TIM_Base_SetConfig+0xbc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_Base_SetConfig+0x30>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a25      	ldr	r2, [pc, #148]	; (800411c <TIM_Base_SetConfig+0xc0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d108      	bne.n	800409e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a1c      	ldr	r2, [pc, #112]	; (8004114 <TIM_Base_SetConfig+0xb8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <TIM_Base_SetConfig+0x62>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d007      	beq.n	80040be <TIM_Base_SetConfig+0x62>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a19      	ldr	r2, [pc, #100]	; (8004118 <TIM_Base_SetConfig+0xbc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_Base_SetConfig+0x62>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a18      	ldr	r2, [pc, #96]	; (800411c <TIM_Base_SetConfig+0xc0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d108      	bne.n	80040d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a07      	ldr	r2, [pc, #28]	; (8004114 <TIM_Base_SetConfig+0xb8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d103      	bne.n	8004104 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	615a      	str	r2, [r3, #20]
}
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800

08004120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f023 0201 	bic.w	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0303 	bic.w	r3, r3, #3
 8004156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f023 0302 	bic.w	r3, r3, #2
 8004168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <TIM_OC1_SetConfig+0xc8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d10c      	bne.n	8004196 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0308 	bic.w	r3, r3, #8
 8004182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 0304 	bic.w	r3, r3, #4
 8004194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a13      	ldr	r2, [pc, #76]	; (80041e8 <TIM_OC1_SetConfig+0xc8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d111      	bne.n	80041c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	621a      	str	r2, [r3, #32]
}
 80041dc:	bf00      	nop
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40012c00 	.word	0x40012c00

080041ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f023 0210 	bic.w	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f023 0320 	bic.w	r3, r3, #32
 8004236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a1d      	ldr	r2, [pc, #116]	; (80042bc <TIM_OC2_SetConfig+0xd0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10d      	bne.n	8004268 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004266:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a14      	ldr	r2, [pc, #80]	; (80042bc <TIM_OC2_SetConfig+0xd0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d113      	bne.n	8004298 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800427e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr
 80042bc:	40012c00 	.word	0x40012c00

080042c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1d      	ldr	r2, [pc, #116]	; (8004390 <TIM_OC3_SetConfig+0xd0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d10d      	bne.n	800433a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a14      	ldr	r2, [pc, #80]	; (8004390 <TIM_OC3_SetConfig+0xd0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d113      	bne.n	800436a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	621a      	str	r2, [r3, #32]
}
 8004384:	bf00      	nop
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40012c00 	.word	0x40012c00

08004394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	031b      	lsls	r3, r3, #12
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a0f      	ldr	r2, [pc, #60]	; (800442c <TIM_OC4_SetConfig+0x98>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d109      	bne.n	8004408 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr
 800442c:	40012c00 	.word	0x40012c00

08004430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	2201      	movs	r2, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a1a      	ldr	r2, [r3, #32]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	43db      	mvns	r3, r3
 8004452:	401a      	ands	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	fa01 f303 	lsl.w	r3, r1, r3
 8004468:	431a      	orrs	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800448c:	2302      	movs	r3, #2
 800448e:	e046      	b.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a16      	ldr	r2, [pc, #88]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00e      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044dc:	d009      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a12      	ldr	r2, [pc, #72]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d004      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a10      	ldr	r2, [pc, #64]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d10c      	bne.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	4313      	orrs	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800

08004534 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800454c:	2302      	movs	r3, #2
 800454e:	e03d      	b.n	80045cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr

080045d6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e03f      	b.n	8004668 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d106      	bne.n	8004602 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fd fd0f 	bl	8002020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2224      	movs	r2, #36	; 0x24
 8004606:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004618:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fae2 	bl	8004be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800462e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800463e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800464e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	4613      	mov	r3, r2
 800467c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b20      	cmp	r3, #32
 8004688:	d130      	bne.n	80046ec <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <HAL_UART_Transmit_IT+0x26>
 8004690:	88fb      	ldrh	r3, [r7, #6]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e029      	b.n	80046ee <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_UART_Transmit_IT+0x38>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e022      	b.n	80046ee <HAL_UART_Transmit_IT+0x7e>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	88fa      	ldrh	r2, [r7, #6]
 80046c0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2221      	movs	r2, #33	; 0x21
 80046cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046e6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	e000      	b.n	80046ee <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80046ec:	2302      	movs	r3, #2
  }
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr

080046f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	4613      	mov	r3, r2
 8004704:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b20      	cmp	r3, #32
 8004710:	d140      	bne.n	8004794 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_UART_Receive_IT+0x26>
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e039      	b.n	8004796 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_UART_Receive_IT+0x38>
 800472c:	2302      	movs	r3, #2
 800472e:	e032      	b.n	8004796 <HAL_UART_Receive_IT+0x9e>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	88fa      	ldrh	r2, [r7, #6]
 8004742:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	88fa      	ldrh	r2, [r7, #6]
 8004748:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2222      	movs	r2, #34	; 0x22
 8004754:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800476e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0220 	orr.w	r2, r2, #32
 800478e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	e000      	b.n	8004796 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004794:	2302      	movs	r3, #2
  }
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10d      	bne.n	80047f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_UART_IRQHandler+0x52>
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f979 	bl	8004ae2 <UART_Receive_IT>
      return;
 80047f0:	e0d1      	b.n	8004996 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80b0 	beq.w	800495a <HAL_UART_IRQHandler+0x1ba>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d105      	bne.n	8004810 <HAL_UART_IRQHandler+0x70>
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80a5 	beq.w	800495a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_UART_IRQHandler+0x90>
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004828:	f043 0201 	orr.w	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_UART_IRQHandler+0xb0>
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004848:	f043 0202 	orr.w	r2, r3, #2
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_UART_IRQHandler+0xd0>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004868:	f043 0204 	orr.w	r2, r3, #4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00f      	beq.n	800489a <HAL_UART_IRQHandler+0xfa>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <HAL_UART_IRQHandler+0xee>
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	f043 0208 	orr.w	r2, r3, #8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d078      	beq.n	8004994 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <HAL_UART_IRQHandler+0x11c>
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f913 	bl	8004ae2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bf14      	ite	ne
 80048ca:	2301      	movne	r3, #1
 80048cc:	2300      	moveq	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d102      	bne.n	80048e4 <HAL_UART_IRQHandler+0x144>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d031      	beq.n	8004948 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f864 	bl	80049b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d023      	beq.n	8004940 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004906:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	2b00      	cmp	r3, #0
 800490e:	d013      	beq.n	8004938 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004914:	4a21      	ldr	r2, [pc, #132]	; (800499c <HAL_UART_IRQHandler+0x1fc>)
 8004916:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	4618      	mov	r0, r3
 800491e:	f7fd fd89 	bl	8002434 <HAL_DMA_Abort_IT>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d016      	beq.n	8004956 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004932:	4610      	mov	r0, r2
 8004934:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004936:	e00e      	b.n	8004956 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f831 	bl	80049a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493e:	e00a      	b.n	8004956 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f82d 	bl	80049a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004946:	e006      	b.n	8004956 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f829 	bl	80049a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004954:	e01e      	b.n	8004994 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004956:	bf00      	nop
    return;
 8004958:	e01c      	b.n	8004994 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_UART_IRQHandler+0x1d6>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f850 	bl	8004a14 <UART_Transmit_IT>
    return;
 8004974:	e00f      	b.n	8004996 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <HAL_UART_IRQHandler+0x1f6>
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f891 	bl	8004ab2 <UART_EndTransmit_IT>
    return;
 8004990:	bf00      	nop
 8004992:	e000      	b.n	8004996 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004994:	bf00      	nop
  }
}
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	080049ed 	.word	0x080049ed

080049a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049c8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr

080049ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff ffca 	bl	80049a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b21      	cmp	r3, #33	; 0x21
 8004a26:	d13e      	bne.n	8004aa6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a30:	d114      	bne.n	8004a5c <UART_Transmit_IT+0x48>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d110      	bne.n	8004a5c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	1c9a      	adds	r2, r3, #2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	621a      	str	r2, [r3, #32]
 8004a5a:	e008      	b.n	8004a6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	1c59      	adds	r1, r3, #1
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6211      	str	r1, [r2, #32]
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10f      	bne.n	8004aa2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aa0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e000      	b.n	8004aa8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
  }
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fd f870 	bl	8001bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b22      	cmp	r3, #34	; 0x22
 8004af4:	d170      	bne.n	8004bd8 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afe:	d117      	bne.n	8004b30 <UART_Receive_IT+0x4e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d113      	bne.n	8004b30 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	1c9a      	adds	r2, r3, #2
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	629a      	str	r2, [r3, #40]	; 0x28
 8004b2e:	e026      	b.n	8004b7e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b42:	d007      	beq.n	8004b54 <UART_Receive_IT+0x72>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <UART_Receive_IT+0x80>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e008      	b.n	8004b74 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d120      	bne.n	8004bd4 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0220 	bic.w	r2, r2, #32
 8004ba0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0201 	bic.w	r2, r2, #1
 8004bc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc ffd2 	bl	8001b74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e002      	b.n	8004bda <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e000      	b.n	8004bda <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004bd8:	2302      	movs	r3, #2
  }
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c1e:	f023 030c 	bic.w	r3, r3, #12
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a2c      	ldr	r2, [pc, #176]	; (8004cf8 <UART_SetConfig+0x114>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d103      	bne.n	8004c54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c4c:	f7ff f824 	bl	8003c98 <HAL_RCC_GetPCLK2Freq>
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	e002      	b.n	8004c5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c54:	f7ff f80c 	bl	8003c70 <HAL_RCC_GetPCLK1Freq>
 8004c58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	009a      	lsls	r2, r3, #2
 8004c64:	441a      	add	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	4a22      	ldr	r2, [pc, #136]	; (8004cfc <UART_SetConfig+0x118>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	0119      	lsls	r1, r3, #4
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	009a      	lsls	r2, r3, #2
 8004c84:	441a      	add	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c90:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <UART_SetConfig+0x118>)
 8004c92:	fba3 0302 	umull	r0, r3, r3, r2
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	2064      	movs	r0, #100	; 0x64
 8004c9a:	fb00 f303 	mul.w	r3, r0, r3
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	3332      	adds	r3, #50	; 0x32
 8004ca4:	4a15      	ldr	r2, [pc, #84]	; (8004cfc <UART_SetConfig+0x118>)
 8004ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb0:	4419      	add	r1, r3
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009a      	lsls	r2, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <UART_SetConfig+0x118>)
 8004cca:	fba3 0302 	umull	r0, r3, r3, r2
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	2064      	movs	r0, #100	; 0x64
 8004cd2:	fb00 f303 	mul.w	r3, r0, r3
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	3332      	adds	r3, #50	; 0x32
 8004cdc:	4a07      	ldr	r2, [pc, #28]	; (8004cfc <UART_SetConfig+0x118>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	f003 020f 	and.w	r2, r3, #15
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	440a      	add	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40013800 	.word	0x40013800
 8004cfc:	51eb851f 	.word	0x51eb851f

08004d00 <__errno>:
 8004d00:	4b01      	ldr	r3, [pc, #4]	; (8004d08 <__errno+0x8>)
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000014 	.word	0x20000014

08004d0c <__libc_init_array>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	2500      	movs	r5, #0
 8004d10:	4e0c      	ldr	r6, [pc, #48]	; (8004d44 <__libc_init_array+0x38>)
 8004d12:	4c0d      	ldr	r4, [pc, #52]	; (8004d48 <__libc_init_array+0x3c>)
 8004d14:	1ba4      	subs	r4, r4, r6
 8004d16:	10a4      	asrs	r4, r4, #2
 8004d18:	42a5      	cmp	r5, r4
 8004d1a:	d109      	bne.n	8004d30 <__libc_init_array+0x24>
 8004d1c:	f001 fc7c 	bl	8006618 <_init>
 8004d20:	2500      	movs	r5, #0
 8004d22:	4e0a      	ldr	r6, [pc, #40]	; (8004d4c <__libc_init_array+0x40>)
 8004d24:	4c0a      	ldr	r4, [pc, #40]	; (8004d50 <__libc_init_array+0x44>)
 8004d26:	1ba4      	subs	r4, r4, r6
 8004d28:	10a4      	asrs	r4, r4, #2
 8004d2a:	42a5      	cmp	r5, r4
 8004d2c:	d105      	bne.n	8004d3a <__libc_init_array+0x2e>
 8004d2e:	bd70      	pop	{r4, r5, r6, pc}
 8004d30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d34:	4798      	blx	r3
 8004d36:	3501      	adds	r5, #1
 8004d38:	e7ee      	b.n	8004d18 <__libc_init_array+0xc>
 8004d3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d3e:	4798      	blx	r3
 8004d40:	3501      	adds	r5, #1
 8004d42:	e7f2      	b.n	8004d2a <__libc_init_array+0x1e>
 8004d44:	08006788 	.word	0x08006788
 8004d48:	08006788 	.word	0x08006788
 8004d4c:	08006788 	.word	0x08006788
 8004d50:	0800678c 	.word	0x0800678c

08004d54 <memset>:
 8004d54:	4603      	mov	r3, r0
 8004d56:	4402      	add	r2, r0
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d100      	bne.n	8004d5e <memset+0xa>
 8004d5c:	4770      	bx	lr
 8004d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d62:	e7f9      	b.n	8004d58 <memset+0x4>

08004d64 <siprintf>:
 8004d64:	b40e      	push	{r1, r2, r3}
 8004d66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d6a:	b500      	push	{lr}
 8004d6c:	b09c      	sub	sp, #112	; 0x70
 8004d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d70:	9002      	str	r0, [sp, #8]
 8004d72:	9006      	str	r0, [sp, #24]
 8004d74:	9107      	str	r1, [sp, #28]
 8004d76:	9104      	str	r1, [sp, #16]
 8004d78:	4808      	ldr	r0, [pc, #32]	; (8004d9c <siprintf+0x38>)
 8004d7a:	4909      	ldr	r1, [pc, #36]	; (8004da0 <siprintf+0x3c>)
 8004d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d80:	9105      	str	r1, [sp, #20]
 8004d82:	6800      	ldr	r0, [r0, #0]
 8004d84:	a902      	add	r1, sp, #8
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	f000 f886 	bl	8004e98 <_svfiprintf_r>
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	9b02      	ldr	r3, [sp, #8]
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	b01c      	add	sp, #112	; 0x70
 8004d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d98:	b003      	add	sp, #12
 8004d9a:	4770      	bx	lr
 8004d9c:	20000014 	.word	0x20000014
 8004da0:	ffff0208 	.word	0xffff0208

08004da4 <_vsiprintf_r>:
 8004da4:	b500      	push	{lr}
 8004da6:	b09b      	sub	sp, #108	; 0x6c
 8004da8:	9100      	str	r1, [sp, #0]
 8004daa:	9104      	str	r1, [sp, #16]
 8004dac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004db0:	9105      	str	r1, [sp, #20]
 8004db2:	9102      	str	r1, [sp, #8]
 8004db4:	4905      	ldr	r1, [pc, #20]	; (8004dcc <_vsiprintf_r+0x28>)
 8004db6:	9103      	str	r1, [sp, #12]
 8004db8:	4669      	mov	r1, sp
 8004dba:	f000 f86d 	bl	8004e98 <_svfiprintf_r>
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	9b00      	ldr	r3, [sp, #0]
 8004dc2:	701a      	strb	r2, [r3, #0]
 8004dc4:	b01b      	add	sp, #108	; 0x6c
 8004dc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dca:	bf00      	nop
 8004dcc:	ffff0208 	.word	0xffff0208

08004dd0 <vsiprintf>:
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	460a      	mov	r2, r1
 8004dd4:	4601      	mov	r1, r0
 8004dd6:	4802      	ldr	r0, [pc, #8]	; (8004de0 <vsiprintf+0x10>)
 8004dd8:	6800      	ldr	r0, [r0, #0]
 8004dda:	f7ff bfe3 	b.w	8004da4 <_vsiprintf_r>
 8004dde:	bf00      	nop
 8004de0:	20000014 	.word	0x20000014

08004de4 <__ssputs_r>:
 8004de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de8:	688e      	ldr	r6, [r1, #8]
 8004dea:	4682      	mov	sl, r0
 8004dec:	429e      	cmp	r6, r3
 8004dee:	460c      	mov	r4, r1
 8004df0:	4690      	mov	r8, r2
 8004df2:	4699      	mov	r9, r3
 8004df4:	d837      	bhi.n	8004e66 <__ssputs_r+0x82>
 8004df6:	898a      	ldrh	r2, [r1, #12]
 8004df8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dfc:	d031      	beq.n	8004e62 <__ssputs_r+0x7e>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	6825      	ldr	r5, [r4, #0]
 8004e02:	6909      	ldr	r1, [r1, #16]
 8004e04:	1a6f      	subs	r7, r5, r1
 8004e06:	6965      	ldr	r5, [r4, #20]
 8004e08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e10:	f109 0301 	add.w	r3, r9, #1
 8004e14:	443b      	add	r3, r7
 8004e16:	429d      	cmp	r5, r3
 8004e18:	bf38      	it	cc
 8004e1a:	461d      	movcc	r5, r3
 8004e1c:	0553      	lsls	r3, r2, #21
 8004e1e:	d530      	bpl.n	8004e82 <__ssputs_r+0x9e>
 8004e20:	4629      	mov	r1, r5
 8004e22:	f000 fb37 	bl	8005494 <_malloc_r>
 8004e26:	4606      	mov	r6, r0
 8004e28:	b950      	cbnz	r0, 8004e40 <__ssputs_r+0x5c>
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	f8ca 3000 	str.w	r3, [sl]
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e3a:	81a3      	strh	r3, [r4, #12]
 8004e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e40:	463a      	mov	r2, r7
 8004e42:	6921      	ldr	r1, [r4, #16]
 8004e44:	f000 fab6 	bl	80053b4 <memcpy>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	6126      	str	r6, [r4, #16]
 8004e56:	443e      	add	r6, r7
 8004e58:	6026      	str	r6, [r4, #0]
 8004e5a:	464e      	mov	r6, r9
 8004e5c:	6165      	str	r5, [r4, #20]
 8004e5e:	1bed      	subs	r5, r5, r7
 8004e60:	60a5      	str	r5, [r4, #8]
 8004e62:	454e      	cmp	r6, r9
 8004e64:	d900      	bls.n	8004e68 <__ssputs_r+0x84>
 8004e66:	464e      	mov	r6, r9
 8004e68:	4632      	mov	r2, r6
 8004e6a:	4641      	mov	r1, r8
 8004e6c:	6820      	ldr	r0, [r4, #0]
 8004e6e:	f000 faac 	bl	80053ca <memmove>
 8004e72:	68a3      	ldr	r3, [r4, #8]
 8004e74:	2000      	movs	r0, #0
 8004e76:	1b9b      	subs	r3, r3, r6
 8004e78:	60a3      	str	r3, [r4, #8]
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	441e      	add	r6, r3
 8004e7e:	6026      	str	r6, [r4, #0]
 8004e80:	e7dc      	b.n	8004e3c <__ssputs_r+0x58>
 8004e82:	462a      	mov	r2, r5
 8004e84:	f000 fb60 	bl	8005548 <_realloc_r>
 8004e88:	4606      	mov	r6, r0
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d1e2      	bne.n	8004e54 <__ssputs_r+0x70>
 8004e8e:	6921      	ldr	r1, [r4, #16]
 8004e90:	4650      	mov	r0, sl
 8004e92:	f000 fab3 	bl	80053fc <_free_r>
 8004e96:	e7c8      	b.n	8004e2a <__ssputs_r+0x46>

08004e98 <_svfiprintf_r>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	461d      	mov	r5, r3
 8004e9e:	898b      	ldrh	r3, [r1, #12]
 8004ea0:	b09d      	sub	sp, #116	; 0x74
 8004ea2:	061f      	lsls	r7, r3, #24
 8004ea4:	4680      	mov	r8, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	4616      	mov	r6, r2
 8004eaa:	d50f      	bpl.n	8004ecc <_svfiprintf_r+0x34>
 8004eac:	690b      	ldr	r3, [r1, #16]
 8004eae:	b96b      	cbnz	r3, 8004ecc <_svfiprintf_r+0x34>
 8004eb0:	2140      	movs	r1, #64	; 0x40
 8004eb2:	f000 faef 	bl	8005494 <_malloc_r>
 8004eb6:	6020      	str	r0, [r4, #0]
 8004eb8:	6120      	str	r0, [r4, #16]
 8004eba:	b928      	cbnz	r0, 8004ec8 <_svfiprintf_r+0x30>
 8004ebc:	230c      	movs	r3, #12
 8004ebe:	f8c8 3000 	str.w	r3, [r8]
 8004ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec6:	e0c8      	b.n	800505a <_svfiprintf_r+0x1c2>
 8004ec8:	2340      	movs	r3, #64	; 0x40
 8004eca:	6163      	str	r3, [r4, #20]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9309      	str	r3, [sp, #36]	; 0x24
 8004ed0:	2320      	movs	r3, #32
 8004ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ed6:	2330      	movs	r3, #48	; 0x30
 8004ed8:	f04f 0b01 	mov.w	fp, #1
 8004edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ee0:	9503      	str	r5, [sp, #12]
 8004ee2:	4637      	mov	r7, r6
 8004ee4:	463d      	mov	r5, r7
 8004ee6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004eea:	b10b      	cbz	r3, 8004ef0 <_svfiprintf_r+0x58>
 8004eec:	2b25      	cmp	r3, #37	; 0x25
 8004eee:	d13e      	bne.n	8004f6e <_svfiprintf_r+0xd6>
 8004ef0:	ebb7 0a06 	subs.w	sl, r7, r6
 8004ef4:	d00b      	beq.n	8004f0e <_svfiprintf_r+0x76>
 8004ef6:	4653      	mov	r3, sl
 8004ef8:	4632      	mov	r2, r6
 8004efa:	4621      	mov	r1, r4
 8004efc:	4640      	mov	r0, r8
 8004efe:	f7ff ff71 	bl	8004de4 <__ssputs_r>
 8004f02:	3001      	adds	r0, #1
 8004f04:	f000 80a4 	beq.w	8005050 <_svfiprintf_r+0x1b8>
 8004f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0a:	4453      	add	r3, sl
 8004f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0e:	783b      	ldrb	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 809d 	beq.w	8005050 <_svfiprintf_r+0x1b8>
 8004f16:	2300      	movs	r3, #0
 8004f18:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f20:	9304      	str	r3, [sp, #16]
 8004f22:	9307      	str	r3, [sp, #28]
 8004f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f28:	931a      	str	r3, [sp, #104]	; 0x68
 8004f2a:	462f      	mov	r7, r5
 8004f2c:	2205      	movs	r2, #5
 8004f2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004f32:	4850      	ldr	r0, [pc, #320]	; (8005074 <_svfiprintf_r+0x1dc>)
 8004f34:	f000 fa30 	bl	8005398 <memchr>
 8004f38:	9b04      	ldr	r3, [sp, #16]
 8004f3a:	b9d0      	cbnz	r0, 8004f72 <_svfiprintf_r+0xda>
 8004f3c:	06d9      	lsls	r1, r3, #27
 8004f3e:	bf44      	itt	mi
 8004f40:	2220      	movmi	r2, #32
 8004f42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f46:	071a      	lsls	r2, r3, #28
 8004f48:	bf44      	itt	mi
 8004f4a:	222b      	movmi	r2, #43	; 0x2b
 8004f4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f50:	782a      	ldrb	r2, [r5, #0]
 8004f52:	2a2a      	cmp	r2, #42	; 0x2a
 8004f54:	d015      	beq.n	8004f82 <_svfiprintf_r+0xea>
 8004f56:	462f      	mov	r7, r5
 8004f58:	2000      	movs	r0, #0
 8004f5a:	250a      	movs	r5, #10
 8004f5c:	9a07      	ldr	r2, [sp, #28]
 8004f5e:	4639      	mov	r1, r7
 8004f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f64:	3b30      	subs	r3, #48	; 0x30
 8004f66:	2b09      	cmp	r3, #9
 8004f68:	d94d      	bls.n	8005006 <_svfiprintf_r+0x16e>
 8004f6a:	b1b8      	cbz	r0, 8004f9c <_svfiprintf_r+0x104>
 8004f6c:	e00f      	b.n	8004f8e <_svfiprintf_r+0xf6>
 8004f6e:	462f      	mov	r7, r5
 8004f70:	e7b8      	b.n	8004ee4 <_svfiprintf_r+0x4c>
 8004f72:	4a40      	ldr	r2, [pc, #256]	; (8005074 <_svfiprintf_r+0x1dc>)
 8004f74:	463d      	mov	r5, r7
 8004f76:	1a80      	subs	r0, r0, r2
 8004f78:	fa0b f000 	lsl.w	r0, fp, r0
 8004f7c:	4318      	orrs	r0, r3
 8004f7e:	9004      	str	r0, [sp, #16]
 8004f80:	e7d3      	b.n	8004f2a <_svfiprintf_r+0x92>
 8004f82:	9a03      	ldr	r2, [sp, #12]
 8004f84:	1d11      	adds	r1, r2, #4
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	9103      	str	r1, [sp, #12]
 8004f8a:	2a00      	cmp	r2, #0
 8004f8c:	db01      	blt.n	8004f92 <_svfiprintf_r+0xfa>
 8004f8e:	9207      	str	r2, [sp, #28]
 8004f90:	e004      	b.n	8004f9c <_svfiprintf_r+0x104>
 8004f92:	4252      	negs	r2, r2
 8004f94:	f043 0302 	orr.w	r3, r3, #2
 8004f98:	9207      	str	r2, [sp, #28]
 8004f9a:	9304      	str	r3, [sp, #16]
 8004f9c:	783b      	ldrb	r3, [r7, #0]
 8004f9e:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa0:	d10c      	bne.n	8004fbc <_svfiprintf_r+0x124>
 8004fa2:	787b      	ldrb	r3, [r7, #1]
 8004fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8004fa6:	d133      	bne.n	8005010 <_svfiprintf_r+0x178>
 8004fa8:	9b03      	ldr	r3, [sp, #12]
 8004faa:	3702      	adds	r7, #2
 8004fac:	1d1a      	adds	r2, r3, #4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	9203      	str	r2, [sp, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bfb8      	it	lt
 8004fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fba:	9305      	str	r3, [sp, #20]
 8004fbc:	4d2e      	ldr	r5, [pc, #184]	; (8005078 <_svfiprintf_r+0x1e0>)
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	7839      	ldrb	r1, [r7, #0]
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f000 f9e8 	bl	8005398 <memchr>
 8004fc8:	b138      	cbz	r0, 8004fda <_svfiprintf_r+0x142>
 8004fca:	2340      	movs	r3, #64	; 0x40
 8004fcc:	1b40      	subs	r0, r0, r5
 8004fce:	fa03 f000 	lsl.w	r0, r3, r0
 8004fd2:	9b04      	ldr	r3, [sp, #16]
 8004fd4:	3701      	adds	r7, #1
 8004fd6:	4303      	orrs	r3, r0
 8004fd8:	9304      	str	r3, [sp, #16]
 8004fda:	7839      	ldrb	r1, [r7, #0]
 8004fdc:	2206      	movs	r2, #6
 8004fde:	4827      	ldr	r0, [pc, #156]	; (800507c <_svfiprintf_r+0x1e4>)
 8004fe0:	1c7e      	adds	r6, r7, #1
 8004fe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fe6:	f000 f9d7 	bl	8005398 <memchr>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d038      	beq.n	8005060 <_svfiprintf_r+0x1c8>
 8004fee:	4b24      	ldr	r3, [pc, #144]	; (8005080 <_svfiprintf_r+0x1e8>)
 8004ff0:	bb13      	cbnz	r3, 8005038 <_svfiprintf_r+0x1a0>
 8004ff2:	9b03      	ldr	r3, [sp, #12]
 8004ff4:	3307      	adds	r3, #7
 8004ff6:	f023 0307 	bic.w	r3, r3, #7
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	9303      	str	r3, [sp, #12]
 8004ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005000:	444b      	add	r3, r9
 8005002:	9309      	str	r3, [sp, #36]	; 0x24
 8005004:	e76d      	b.n	8004ee2 <_svfiprintf_r+0x4a>
 8005006:	fb05 3202 	mla	r2, r5, r2, r3
 800500a:	2001      	movs	r0, #1
 800500c:	460f      	mov	r7, r1
 800500e:	e7a6      	b.n	8004f5e <_svfiprintf_r+0xc6>
 8005010:	2300      	movs	r3, #0
 8005012:	250a      	movs	r5, #10
 8005014:	4619      	mov	r1, r3
 8005016:	3701      	adds	r7, #1
 8005018:	9305      	str	r3, [sp, #20]
 800501a:	4638      	mov	r0, r7
 800501c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005020:	3a30      	subs	r2, #48	; 0x30
 8005022:	2a09      	cmp	r2, #9
 8005024:	d903      	bls.n	800502e <_svfiprintf_r+0x196>
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0c8      	beq.n	8004fbc <_svfiprintf_r+0x124>
 800502a:	9105      	str	r1, [sp, #20]
 800502c:	e7c6      	b.n	8004fbc <_svfiprintf_r+0x124>
 800502e:	fb05 2101 	mla	r1, r5, r1, r2
 8005032:	2301      	movs	r3, #1
 8005034:	4607      	mov	r7, r0
 8005036:	e7f0      	b.n	800501a <_svfiprintf_r+0x182>
 8005038:	ab03      	add	r3, sp, #12
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	4622      	mov	r2, r4
 800503e:	4b11      	ldr	r3, [pc, #68]	; (8005084 <_svfiprintf_r+0x1ec>)
 8005040:	a904      	add	r1, sp, #16
 8005042:	4640      	mov	r0, r8
 8005044:	f3af 8000 	nop.w
 8005048:	f1b0 3fff 	cmp.w	r0, #4294967295
 800504c:	4681      	mov	r9, r0
 800504e:	d1d6      	bne.n	8004ffe <_svfiprintf_r+0x166>
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	065b      	lsls	r3, r3, #25
 8005054:	f53f af35 	bmi.w	8004ec2 <_svfiprintf_r+0x2a>
 8005058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800505a:	b01d      	add	sp, #116	; 0x74
 800505c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005060:	ab03      	add	r3, sp, #12
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	4622      	mov	r2, r4
 8005066:	4b07      	ldr	r3, [pc, #28]	; (8005084 <_svfiprintf_r+0x1ec>)
 8005068:	a904      	add	r1, sp, #16
 800506a:	4640      	mov	r0, r8
 800506c:	f000 f882 	bl	8005174 <_printf_i>
 8005070:	e7ea      	b.n	8005048 <_svfiprintf_r+0x1b0>
 8005072:	bf00      	nop
 8005074:	0800670c 	.word	0x0800670c
 8005078:	08006712 	.word	0x08006712
 800507c:	08006716 	.word	0x08006716
 8005080:	00000000 	.word	0x00000000
 8005084:	08004de5 	.word	0x08004de5

08005088 <_printf_common>:
 8005088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800508c:	4691      	mov	r9, r2
 800508e:	461f      	mov	r7, r3
 8005090:	688a      	ldr	r2, [r1, #8]
 8005092:	690b      	ldr	r3, [r1, #16]
 8005094:	4606      	mov	r6, r0
 8005096:	4293      	cmp	r3, r2
 8005098:	bfb8      	it	lt
 800509a:	4613      	movlt	r3, r2
 800509c:	f8c9 3000 	str.w	r3, [r9]
 80050a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050a4:	460c      	mov	r4, r1
 80050a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050aa:	b112      	cbz	r2, 80050b2 <_printf_common+0x2a>
 80050ac:	3301      	adds	r3, #1
 80050ae:	f8c9 3000 	str.w	r3, [r9]
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	0699      	lsls	r1, r3, #26
 80050b6:	bf42      	ittt	mi
 80050b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80050bc:	3302      	addmi	r3, #2
 80050be:	f8c9 3000 	strmi.w	r3, [r9]
 80050c2:	6825      	ldr	r5, [r4, #0]
 80050c4:	f015 0506 	ands.w	r5, r5, #6
 80050c8:	d107      	bne.n	80050da <_printf_common+0x52>
 80050ca:	f104 0a19 	add.w	sl, r4, #25
 80050ce:	68e3      	ldr	r3, [r4, #12]
 80050d0:	f8d9 2000 	ldr.w	r2, [r9]
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	42ab      	cmp	r3, r5
 80050d8:	dc29      	bgt.n	800512e <_printf_common+0xa6>
 80050da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80050de:	6822      	ldr	r2, [r4, #0]
 80050e0:	3300      	adds	r3, #0
 80050e2:	bf18      	it	ne
 80050e4:	2301      	movne	r3, #1
 80050e6:	0692      	lsls	r2, r2, #26
 80050e8:	d42e      	bmi.n	8005148 <_printf_common+0xc0>
 80050ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050ee:	4639      	mov	r1, r7
 80050f0:	4630      	mov	r0, r6
 80050f2:	47c0      	blx	r8
 80050f4:	3001      	adds	r0, #1
 80050f6:	d021      	beq.n	800513c <_printf_common+0xb4>
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	68e5      	ldr	r5, [r4, #12]
 80050fc:	f003 0306 	and.w	r3, r3, #6
 8005100:	2b04      	cmp	r3, #4
 8005102:	bf18      	it	ne
 8005104:	2500      	movne	r5, #0
 8005106:	f8d9 2000 	ldr.w	r2, [r9]
 800510a:	f04f 0900 	mov.w	r9, #0
 800510e:	bf08      	it	eq
 8005110:	1aad      	subeq	r5, r5, r2
 8005112:	68a3      	ldr	r3, [r4, #8]
 8005114:	6922      	ldr	r2, [r4, #16]
 8005116:	bf08      	it	eq
 8005118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800511c:	4293      	cmp	r3, r2
 800511e:	bfc4      	itt	gt
 8005120:	1a9b      	subgt	r3, r3, r2
 8005122:	18ed      	addgt	r5, r5, r3
 8005124:	341a      	adds	r4, #26
 8005126:	454d      	cmp	r5, r9
 8005128:	d11a      	bne.n	8005160 <_printf_common+0xd8>
 800512a:	2000      	movs	r0, #0
 800512c:	e008      	b.n	8005140 <_printf_common+0xb8>
 800512e:	2301      	movs	r3, #1
 8005130:	4652      	mov	r2, sl
 8005132:	4639      	mov	r1, r7
 8005134:	4630      	mov	r0, r6
 8005136:	47c0      	blx	r8
 8005138:	3001      	adds	r0, #1
 800513a:	d103      	bne.n	8005144 <_printf_common+0xbc>
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005144:	3501      	adds	r5, #1
 8005146:	e7c2      	b.n	80050ce <_printf_common+0x46>
 8005148:	2030      	movs	r0, #48	; 0x30
 800514a:	18e1      	adds	r1, r4, r3
 800514c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005156:	4422      	add	r2, r4
 8005158:	3302      	adds	r3, #2
 800515a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800515e:	e7c4      	b.n	80050ea <_printf_common+0x62>
 8005160:	2301      	movs	r3, #1
 8005162:	4622      	mov	r2, r4
 8005164:	4639      	mov	r1, r7
 8005166:	4630      	mov	r0, r6
 8005168:	47c0      	blx	r8
 800516a:	3001      	adds	r0, #1
 800516c:	d0e6      	beq.n	800513c <_printf_common+0xb4>
 800516e:	f109 0901 	add.w	r9, r9, #1
 8005172:	e7d8      	b.n	8005126 <_printf_common+0x9e>

08005174 <_printf_i>:
 8005174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005178:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800517c:	460c      	mov	r4, r1
 800517e:	7e09      	ldrb	r1, [r1, #24]
 8005180:	b085      	sub	sp, #20
 8005182:	296e      	cmp	r1, #110	; 0x6e
 8005184:	4617      	mov	r7, r2
 8005186:	4606      	mov	r6, r0
 8005188:	4698      	mov	r8, r3
 800518a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800518c:	f000 80b3 	beq.w	80052f6 <_printf_i+0x182>
 8005190:	d822      	bhi.n	80051d8 <_printf_i+0x64>
 8005192:	2963      	cmp	r1, #99	; 0x63
 8005194:	d036      	beq.n	8005204 <_printf_i+0x90>
 8005196:	d80a      	bhi.n	80051ae <_printf_i+0x3a>
 8005198:	2900      	cmp	r1, #0
 800519a:	f000 80b9 	beq.w	8005310 <_printf_i+0x19c>
 800519e:	2958      	cmp	r1, #88	; 0x58
 80051a0:	f000 8083 	beq.w	80052aa <_printf_i+0x136>
 80051a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80051ac:	e032      	b.n	8005214 <_printf_i+0xa0>
 80051ae:	2964      	cmp	r1, #100	; 0x64
 80051b0:	d001      	beq.n	80051b6 <_printf_i+0x42>
 80051b2:	2969      	cmp	r1, #105	; 0x69
 80051b4:	d1f6      	bne.n	80051a4 <_printf_i+0x30>
 80051b6:	6820      	ldr	r0, [r4, #0]
 80051b8:	6813      	ldr	r3, [r2, #0]
 80051ba:	0605      	lsls	r5, r0, #24
 80051bc:	f103 0104 	add.w	r1, r3, #4
 80051c0:	d52a      	bpl.n	8005218 <_printf_i+0xa4>
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6011      	str	r1, [r2, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	da03      	bge.n	80051d2 <_printf_i+0x5e>
 80051ca:	222d      	movs	r2, #45	; 0x2d
 80051cc:	425b      	negs	r3, r3
 80051ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80051d2:	486f      	ldr	r0, [pc, #444]	; (8005390 <_printf_i+0x21c>)
 80051d4:	220a      	movs	r2, #10
 80051d6:	e039      	b.n	800524c <_printf_i+0xd8>
 80051d8:	2973      	cmp	r1, #115	; 0x73
 80051da:	f000 809d 	beq.w	8005318 <_printf_i+0x1a4>
 80051de:	d808      	bhi.n	80051f2 <_printf_i+0x7e>
 80051e0:	296f      	cmp	r1, #111	; 0x6f
 80051e2:	d020      	beq.n	8005226 <_printf_i+0xb2>
 80051e4:	2970      	cmp	r1, #112	; 0x70
 80051e6:	d1dd      	bne.n	80051a4 <_printf_i+0x30>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	f043 0320 	orr.w	r3, r3, #32
 80051ee:	6023      	str	r3, [r4, #0]
 80051f0:	e003      	b.n	80051fa <_printf_i+0x86>
 80051f2:	2975      	cmp	r1, #117	; 0x75
 80051f4:	d017      	beq.n	8005226 <_printf_i+0xb2>
 80051f6:	2978      	cmp	r1, #120	; 0x78
 80051f8:	d1d4      	bne.n	80051a4 <_printf_i+0x30>
 80051fa:	2378      	movs	r3, #120	; 0x78
 80051fc:	4865      	ldr	r0, [pc, #404]	; (8005394 <_printf_i+0x220>)
 80051fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005202:	e055      	b.n	80052b0 <_printf_i+0x13c>
 8005204:	6813      	ldr	r3, [r2, #0]
 8005206:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800520a:	1d19      	adds	r1, r3, #4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6011      	str	r1, [r2, #0]
 8005210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005214:	2301      	movs	r3, #1
 8005216:	e08c      	b.n	8005332 <_printf_i+0x1be>
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800521e:	6011      	str	r1, [r2, #0]
 8005220:	bf18      	it	ne
 8005222:	b21b      	sxthne	r3, r3
 8005224:	e7cf      	b.n	80051c6 <_printf_i+0x52>
 8005226:	6813      	ldr	r3, [r2, #0]
 8005228:	6825      	ldr	r5, [r4, #0]
 800522a:	1d18      	adds	r0, r3, #4
 800522c:	6010      	str	r0, [r2, #0]
 800522e:	0628      	lsls	r0, r5, #24
 8005230:	d501      	bpl.n	8005236 <_printf_i+0xc2>
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	e002      	b.n	800523c <_printf_i+0xc8>
 8005236:	0668      	lsls	r0, r5, #25
 8005238:	d5fb      	bpl.n	8005232 <_printf_i+0xbe>
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	296f      	cmp	r1, #111	; 0x6f
 800523e:	bf14      	ite	ne
 8005240:	220a      	movne	r2, #10
 8005242:	2208      	moveq	r2, #8
 8005244:	4852      	ldr	r0, [pc, #328]	; (8005390 <_printf_i+0x21c>)
 8005246:	2100      	movs	r1, #0
 8005248:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800524c:	6865      	ldr	r5, [r4, #4]
 800524e:	2d00      	cmp	r5, #0
 8005250:	60a5      	str	r5, [r4, #8]
 8005252:	f2c0 8095 	blt.w	8005380 <_printf_i+0x20c>
 8005256:	6821      	ldr	r1, [r4, #0]
 8005258:	f021 0104 	bic.w	r1, r1, #4
 800525c:	6021      	str	r1, [r4, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d13d      	bne.n	80052de <_printf_i+0x16a>
 8005262:	2d00      	cmp	r5, #0
 8005264:	f040 808e 	bne.w	8005384 <_printf_i+0x210>
 8005268:	4665      	mov	r5, ip
 800526a:	2a08      	cmp	r2, #8
 800526c:	d10b      	bne.n	8005286 <_printf_i+0x112>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	07db      	lsls	r3, r3, #31
 8005272:	d508      	bpl.n	8005286 <_printf_i+0x112>
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	6862      	ldr	r2, [r4, #4]
 8005278:	429a      	cmp	r2, r3
 800527a:	bfde      	ittt	le
 800527c:	2330      	movle	r3, #48	; 0x30
 800527e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005282:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005286:	ebac 0305 	sub.w	r3, ip, r5
 800528a:	6123      	str	r3, [r4, #16]
 800528c:	f8cd 8000 	str.w	r8, [sp]
 8005290:	463b      	mov	r3, r7
 8005292:	aa03      	add	r2, sp, #12
 8005294:	4621      	mov	r1, r4
 8005296:	4630      	mov	r0, r6
 8005298:	f7ff fef6 	bl	8005088 <_printf_common>
 800529c:	3001      	adds	r0, #1
 800529e:	d14d      	bne.n	800533c <_printf_i+0x1c8>
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	b005      	add	sp, #20
 80052a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052aa:	4839      	ldr	r0, [pc, #228]	; (8005390 <_printf_i+0x21c>)
 80052ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80052b0:	6813      	ldr	r3, [r2, #0]
 80052b2:	6821      	ldr	r1, [r4, #0]
 80052b4:	1d1d      	adds	r5, r3, #4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6015      	str	r5, [r2, #0]
 80052ba:	060a      	lsls	r2, r1, #24
 80052bc:	d50b      	bpl.n	80052d6 <_printf_i+0x162>
 80052be:	07ca      	lsls	r2, r1, #31
 80052c0:	bf44      	itt	mi
 80052c2:	f041 0120 	orrmi.w	r1, r1, #32
 80052c6:	6021      	strmi	r1, [r4, #0]
 80052c8:	b91b      	cbnz	r3, 80052d2 <_printf_i+0x15e>
 80052ca:	6822      	ldr	r2, [r4, #0]
 80052cc:	f022 0220 	bic.w	r2, r2, #32
 80052d0:	6022      	str	r2, [r4, #0]
 80052d2:	2210      	movs	r2, #16
 80052d4:	e7b7      	b.n	8005246 <_printf_i+0xd2>
 80052d6:	064d      	lsls	r5, r1, #25
 80052d8:	bf48      	it	mi
 80052da:	b29b      	uxthmi	r3, r3
 80052dc:	e7ef      	b.n	80052be <_printf_i+0x14a>
 80052de:	4665      	mov	r5, ip
 80052e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80052e4:	fb02 3311 	mls	r3, r2, r1, r3
 80052e8:	5cc3      	ldrb	r3, [r0, r3]
 80052ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80052ee:	460b      	mov	r3, r1
 80052f0:	2900      	cmp	r1, #0
 80052f2:	d1f5      	bne.n	80052e0 <_printf_i+0x16c>
 80052f4:	e7b9      	b.n	800526a <_printf_i+0xf6>
 80052f6:	6813      	ldr	r3, [r2, #0]
 80052f8:	6825      	ldr	r5, [r4, #0]
 80052fa:	1d18      	adds	r0, r3, #4
 80052fc:	6961      	ldr	r1, [r4, #20]
 80052fe:	6010      	str	r0, [r2, #0]
 8005300:	0628      	lsls	r0, r5, #24
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	d501      	bpl.n	800530a <_printf_i+0x196>
 8005306:	6019      	str	r1, [r3, #0]
 8005308:	e002      	b.n	8005310 <_printf_i+0x19c>
 800530a:	066a      	lsls	r2, r5, #25
 800530c:	d5fb      	bpl.n	8005306 <_printf_i+0x192>
 800530e:	8019      	strh	r1, [r3, #0]
 8005310:	2300      	movs	r3, #0
 8005312:	4665      	mov	r5, ip
 8005314:	6123      	str	r3, [r4, #16]
 8005316:	e7b9      	b.n	800528c <_printf_i+0x118>
 8005318:	6813      	ldr	r3, [r2, #0]
 800531a:	1d19      	adds	r1, r3, #4
 800531c:	6011      	str	r1, [r2, #0]
 800531e:	681d      	ldr	r5, [r3, #0]
 8005320:	6862      	ldr	r2, [r4, #4]
 8005322:	2100      	movs	r1, #0
 8005324:	4628      	mov	r0, r5
 8005326:	f000 f837 	bl	8005398 <memchr>
 800532a:	b108      	cbz	r0, 8005330 <_printf_i+0x1bc>
 800532c:	1b40      	subs	r0, r0, r5
 800532e:	6060      	str	r0, [r4, #4]
 8005330:	6863      	ldr	r3, [r4, #4]
 8005332:	6123      	str	r3, [r4, #16]
 8005334:	2300      	movs	r3, #0
 8005336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533a:	e7a7      	b.n	800528c <_printf_i+0x118>
 800533c:	6923      	ldr	r3, [r4, #16]
 800533e:	462a      	mov	r2, r5
 8005340:	4639      	mov	r1, r7
 8005342:	4630      	mov	r0, r6
 8005344:	47c0      	blx	r8
 8005346:	3001      	adds	r0, #1
 8005348:	d0aa      	beq.n	80052a0 <_printf_i+0x12c>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	079b      	lsls	r3, r3, #30
 800534e:	d413      	bmi.n	8005378 <_printf_i+0x204>
 8005350:	68e0      	ldr	r0, [r4, #12]
 8005352:	9b03      	ldr	r3, [sp, #12]
 8005354:	4298      	cmp	r0, r3
 8005356:	bfb8      	it	lt
 8005358:	4618      	movlt	r0, r3
 800535a:	e7a3      	b.n	80052a4 <_printf_i+0x130>
 800535c:	2301      	movs	r3, #1
 800535e:	464a      	mov	r2, r9
 8005360:	4639      	mov	r1, r7
 8005362:	4630      	mov	r0, r6
 8005364:	47c0      	blx	r8
 8005366:	3001      	adds	r0, #1
 8005368:	d09a      	beq.n	80052a0 <_printf_i+0x12c>
 800536a:	3501      	adds	r5, #1
 800536c:	68e3      	ldr	r3, [r4, #12]
 800536e:	9a03      	ldr	r2, [sp, #12]
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	42ab      	cmp	r3, r5
 8005374:	dcf2      	bgt.n	800535c <_printf_i+0x1e8>
 8005376:	e7eb      	b.n	8005350 <_printf_i+0x1dc>
 8005378:	2500      	movs	r5, #0
 800537a:	f104 0919 	add.w	r9, r4, #25
 800537e:	e7f5      	b.n	800536c <_printf_i+0x1f8>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1ac      	bne.n	80052de <_printf_i+0x16a>
 8005384:	7803      	ldrb	r3, [r0, #0]
 8005386:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800538a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800538e:	e76c      	b.n	800526a <_printf_i+0xf6>
 8005390:	0800671d 	.word	0x0800671d
 8005394:	0800672e 	.word	0x0800672e

08005398 <memchr>:
 8005398:	b510      	push	{r4, lr}
 800539a:	b2c9      	uxtb	r1, r1
 800539c:	4402      	add	r2, r0
 800539e:	4290      	cmp	r0, r2
 80053a0:	4603      	mov	r3, r0
 80053a2:	d101      	bne.n	80053a8 <memchr+0x10>
 80053a4:	2300      	movs	r3, #0
 80053a6:	e003      	b.n	80053b0 <memchr+0x18>
 80053a8:	781c      	ldrb	r4, [r3, #0]
 80053aa:	3001      	adds	r0, #1
 80053ac:	428c      	cmp	r4, r1
 80053ae:	d1f6      	bne.n	800539e <memchr+0x6>
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd10      	pop	{r4, pc}

080053b4 <memcpy>:
 80053b4:	b510      	push	{r4, lr}
 80053b6:	1e43      	subs	r3, r0, #1
 80053b8:	440a      	add	r2, r1
 80053ba:	4291      	cmp	r1, r2
 80053bc:	d100      	bne.n	80053c0 <memcpy+0xc>
 80053be:	bd10      	pop	{r4, pc}
 80053c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053c8:	e7f7      	b.n	80053ba <memcpy+0x6>

080053ca <memmove>:
 80053ca:	4288      	cmp	r0, r1
 80053cc:	b510      	push	{r4, lr}
 80053ce:	eb01 0302 	add.w	r3, r1, r2
 80053d2:	d807      	bhi.n	80053e4 <memmove+0x1a>
 80053d4:	1e42      	subs	r2, r0, #1
 80053d6:	4299      	cmp	r1, r3
 80053d8:	d00a      	beq.n	80053f0 <memmove+0x26>
 80053da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80053e2:	e7f8      	b.n	80053d6 <memmove+0xc>
 80053e4:	4283      	cmp	r3, r0
 80053e6:	d9f5      	bls.n	80053d4 <memmove+0xa>
 80053e8:	1881      	adds	r1, r0, r2
 80053ea:	1ad2      	subs	r2, r2, r3
 80053ec:	42d3      	cmn	r3, r2
 80053ee:	d100      	bne.n	80053f2 <memmove+0x28>
 80053f0:	bd10      	pop	{r4, pc}
 80053f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80053fa:	e7f7      	b.n	80053ec <memmove+0x22>

080053fc <_free_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4605      	mov	r5, r0
 8005400:	2900      	cmp	r1, #0
 8005402:	d043      	beq.n	800548c <_free_r+0x90>
 8005404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005408:	1f0c      	subs	r4, r1, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	bfb8      	it	lt
 800540e:	18e4      	addlt	r4, r4, r3
 8005410:	f000 f8d0 	bl	80055b4 <__malloc_lock>
 8005414:	4a1e      	ldr	r2, [pc, #120]	; (8005490 <_free_r+0x94>)
 8005416:	6813      	ldr	r3, [r2, #0]
 8005418:	4610      	mov	r0, r2
 800541a:	b933      	cbnz	r3, 800542a <_free_r+0x2e>
 800541c:	6063      	str	r3, [r4, #4]
 800541e:	6014      	str	r4, [r2, #0]
 8005420:	4628      	mov	r0, r5
 8005422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005426:	f000 b8c6 	b.w	80055b6 <__malloc_unlock>
 800542a:	42a3      	cmp	r3, r4
 800542c:	d90b      	bls.n	8005446 <_free_r+0x4a>
 800542e:	6821      	ldr	r1, [r4, #0]
 8005430:	1862      	adds	r2, r4, r1
 8005432:	4293      	cmp	r3, r2
 8005434:	bf01      	itttt	eq
 8005436:	681a      	ldreq	r2, [r3, #0]
 8005438:	685b      	ldreq	r3, [r3, #4]
 800543a:	1852      	addeq	r2, r2, r1
 800543c:	6022      	streq	r2, [r4, #0]
 800543e:	6063      	str	r3, [r4, #4]
 8005440:	6004      	str	r4, [r0, #0]
 8005442:	e7ed      	b.n	8005420 <_free_r+0x24>
 8005444:	4613      	mov	r3, r2
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	b10a      	cbz	r2, 800544e <_free_r+0x52>
 800544a:	42a2      	cmp	r2, r4
 800544c:	d9fa      	bls.n	8005444 <_free_r+0x48>
 800544e:	6819      	ldr	r1, [r3, #0]
 8005450:	1858      	adds	r0, r3, r1
 8005452:	42a0      	cmp	r0, r4
 8005454:	d10b      	bne.n	800546e <_free_r+0x72>
 8005456:	6820      	ldr	r0, [r4, #0]
 8005458:	4401      	add	r1, r0
 800545a:	1858      	adds	r0, r3, r1
 800545c:	4282      	cmp	r2, r0
 800545e:	6019      	str	r1, [r3, #0]
 8005460:	d1de      	bne.n	8005420 <_free_r+0x24>
 8005462:	6810      	ldr	r0, [r2, #0]
 8005464:	6852      	ldr	r2, [r2, #4]
 8005466:	4401      	add	r1, r0
 8005468:	6019      	str	r1, [r3, #0]
 800546a:	605a      	str	r2, [r3, #4]
 800546c:	e7d8      	b.n	8005420 <_free_r+0x24>
 800546e:	d902      	bls.n	8005476 <_free_r+0x7a>
 8005470:	230c      	movs	r3, #12
 8005472:	602b      	str	r3, [r5, #0]
 8005474:	e7d4      	b.n	8005420 <_free_r+0x24>
 8005476:	6820      	ldr	r0, [r4, #0]
 8005478:	1821      	adds	r1, r4, r0
 800547a:	428a      	cmp	r2, r1
 800547c:	bf01      	itttt	eq
 800547e:	6811      	ldreq	r1, [r2, #0]
 8005480:	6852      	ldreq	r2, [r2, #4]
 8005482:	1809      	addeq	r1, r1, r0
 8005484:	6021      	streq	r1, [r4, #0]
 8005486:	6062      	str	r2, [r4, #4]
 8005488:	605c      	str	r4, [r3, #4]
 800548a:	e7c9      	b.n	8005420 <_free_r+0x24>
 800548c:	bd38      	pop	{r3, r4, r5, pc}
 800548e:	bf00      	nop
 8005490:	200000b8 	.word	0x200000b8

08005494 <_malloc_r>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	1ccd      	adds	r5, r1, #3
 8005498:	f025 0503 	bic.w	r5, r5, #3
 800549c:	3508      	adds	r5, #8
 800549e:	2d0c      	cmp	r5, #12
 80054a0:	bf38      	it	cc
 80054a2:	250c      	movcc	r5, #12
 80054a4:	2d00      	cmp	r5, #0
 80054a6:	4606      	mov	r6, r0
 80054a8:	db01      	blt.n	80054ae <_malloc_r+0x1a>
 80054aa:	42a9      	cmp	r1, r5
 80054ac:	d903      	bls.n	80054b6 <_malloc_r+0x22>
 80054ae:	230c      	movs	r3, #12
 80054b0:	6033      	str	r3, [r6, #0]
 80054b2:	2000      	movs	r0, #0
 80054b4:	bd70      	pop	{r4, r5, r6, pc}
 80054b6:	f000 f87d 	bl	80055b4 <__malloc_lock>
 80054ba:	4a21      	ldr	r2, [pc, #132]	; (8005540 <_malloc_r+0xac>)
 80054bc:	6814      	ldr	r4, [r2, #0]
 80054be:	4621      	mov	r1, r4
 80054c0:	b991      	cbnz	r1, 80054e8 <_malloc_r+0x54>
 80054c2:	4c20      	ldr	r4, [pc, #128]	; (8005544 <_malloc_r+0xb0>)
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	b91b      	cbnz	r3, 80054d0 <_malloc_r+0x3c>
 80054c8:	4630      	mov	r0, r6
 80054ca:	f000 f863 	bl	8005594 <_sbrk_r>
 80054ce:	6020      	str	r0, [r4, #0]
 80054d0:	4629      	mov	r1, r5
 80054d2:	4630      	mov	r0, r6
 80054d4:	f000 f85e 	bl	8005594 <_sbrk_r>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d124      	bne.n	8005526 <_malloc_r+0x92>
 80054dc:	230c      	movs	r3, #12
 80054de:	4630      	mov	r0, r6
 80054e0:	6033      	str	r3, [r6, #0]
 80054e2:	f000 f868 	bl	80055b6 <__malloc_unlock>
 80054e6:	e7e4      	b.n	80054b2 <_malloc_r+0x1e>
 80054e8:	680b      	ldr	r3, [r1, #0]
 80054ea:	1b5b      	subs	r3, r3, r5
 80054ec:	d418      	bmi.n	8005520 <_malloc_r+0x8c>
 80054ee:	2b0b      	cmp	r3, #11
 80054f0:	d90f      	bls.n	8005512 <_malloc_r+0x7e>
 80054f2:	600b      	str	r3, [r1, #0]
 80054f4:	18cc      	adds	r4, r1, r3
 80054f6:	50cd      	str	r5, [r1, r3]
 80054f8:	4630      	mov	r0, r6
 80054fa:	f000 f85c 	bl	80055b6 <__malloc_unlock>
 80054fe:	f104 000b 	add.w	r0, r4, #11
 8005502:	1d23      	adds	r3, r4, #4
 8005504:	f020 0007 	bic.w	r0, r0, #7
 8005508:	1ac3      	subs	r3, r0, r3
 800550a:	d0d3      	beq.n	80054b4 <_malloc_r+0x20>
 800550c:	425a      	negs	r2, r3
 800550e:	50e2      	str	r2, [r4, r3]
 8005510:	e7d0      	b.n	80054b4 <_malloc_r+0x20>
 8005512:	684b      	ldr	r3, [r1, #4]
 8005514:	428c      	cmp	r4, r1
 8005516:	bf16      	itet	ne
 8005518:	6063      	strne	r3, [r4, #4]
 800551a:	6013      	streq	r3, [r2, #0]
 800551c:	460c      	movne	r4, r1
 800551e:	e7eb      	b.n	80054f8 <_malloc_r+0x64>
 8005520:	460c      	mov	r4, r1
 8005522:	6849      	ldr	r1, [r1, #4]
 8005524:	e7cc      	b.n	80054c0 <_malloc_r+0x2c>
 8005526:	1cc4      	adds	r4, r0, #3
 8005528:	f024 0403 	bic.w	r4, r4, #3
 800552c:	42a0      	cmp	r0, r4
 800552e:	d005      	beq.n	800553c <_malloc_r+0xa8>
 8005530:	1a21      	subs	r1, r4, r0
 8005532:	4630      	mov	r0, r6
 8005534:	f000 f82e 	bl	8005594 <_sbrk_r>
 8005538:	3001      	adds	r0, #1
 800553a:	d0cf      	beq.n	80054dc <_malloc_r+0x48>
 800553c:	6025      	str	r5, [r4, #0]
 800553e:	e7db      	b.n	80054f8 <_malloc_r+0x64>
 8005540:	200000b8 	.word	0x200000b8
 8005544:	200000bc 	.word	0x200000bc

08005548 <_realloc_r>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	4607      	mov	r7, r0
 800554c:	4614      	mov	r4, r2
 800554e:	460e      	mov	r6, r1
 8005550:	b921      	cbnz	r1, 800555c <_realloc_r+0x14>
 8005552:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005556:	4611      	mov	r1, r2
 8005558:	f7ff bf9c 	b.w	8005494 <_malloc_r>
 800555c:	b922      	cbnz	r2, 8005568 <_realloc_r+0x20>
 800555e:	f7ff ff4d 	bl	80053fc <_free_r>
 8005562:	4625      	mov	r5, r4
 8005564:	4628      	mov	r0, r5
 8005566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005568:	f000 f826 	bl	80055b8 <_malloc_usable_size_r>
 800556c:	42a0      	cmp	r0, r4
 800556e:	d20f      	bcs.n	8005590 <_realloc_r+0x48>
 8005570:	4621      	mov	r1, r4
 8005572:	4638      	mov	r0, r7
 8005574:	f7ff ff8e 	bl	8005494 <_malloc_r>
 8005578:	4605      	mov	r5, r0
 800557a:	2800      	cmp	r0, #0
 800557c:	d0f2      	beq.n	8005564 <_realloc_r+0x1c>
 800557e:	4631      	mov	r1, r6
 8005580:	4622      	mov	r2, r4
 8005582:	f7ff ff17 	bl	80053b4 <memcpy>
 8005586:	4631      	mov	r1, r6
 8005588:	4638      	mov	r0, r7
 800558a:	f7ff ff37 	bl	80053fc <_free_r>
 800558e:	e7e9      	b.n	8005564 <_realloc_r+0x1c>
 8005590:	4635      	mov	r5, r6
 8005592:	e7e7      	b.n	8005564 <_realloc_r+0x1c>

08005594 <_sbrk_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	2300      	movs	r3, #0
 8005598:	4c05      	ldr	r4, [pc, #20]	; (80055b0 <_sbrk_r+0x1c>)
 800559a:	4605      	mov	r5, r0
 800559c:	4608      	mov	r0, r1
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	f7fc fbde 	bl	8001d60 <_sbrk>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_sbrk_r+0x1a>
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_sbrk_r+0x1a>
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	200004a0 	.word	0x200004a0

080055b4 <__malloc_lock>:
 80055b4:	4770      	bx	lr

080055b6 <__malloc_unlock>:
 80055b6:	4770      	bx	lr

080055b8 <_malloc_usable_size_r>:
 80055b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055bc:	1f18      	subs	r0, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bfbc      	itt	lt
 80055c2:	580b      	ldrlt	r3, [r1, r0]
 80055c4:	18c0      	addlt	r0, r0, r3
 80055c6:	4770      	bx	lr

080055c8 <pow>:
 80055c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055cc:	b08f      	sub	sp, #60	; 0x3c
 80055ce:	461d      	mov	r5, r3
 80055d0:	4680      	mov	r8, r0
 80055d2:	4689      	mov	r9, r1
 80055d4:	4614      	mov	r4, r2
 80055d6:	f000 f953 	bl	8005880 <__ieee754_pow>
 80055da:	4fa1      	ldr	r7, [pc, #644]	; (8005860 <pow+0x298>)
 80055dc:	e9cd 0100 	strd	r0, r1, [sp]
 80055e0:	f997 3000 	ldrsb.w	r3, [r7]
 80055e4:	463e      	mov	r6, r7
 80055e6:	9302      	str	r3, [sp, #8]
 80055e8:	3301      	adds	r3, #1
 80055ea:	d05f      	beq.n	80056ac <pow+0xe4>
 80055ec:	4622      	mov	r2, r4
 80055ee:	462b      	mov	r3, r5
 80055f0:	4620      	mov	r0, r4
 80055f2:	4629      	mov	r1, r5
 80055f4:	f7fb fa14 	bl	8000a20 <__aeabi_dcmpun>
 80055f8:	4682      	mov	sl, r0
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d156      	bne.n	80056ac <pow+0xe4>
 80055fe:	4642      	mov	r2, r8
 8005600:	464b      	mov	r3, r9
 8005602:	4640      	mov	r0, r8
 8005604:	4649      	mov	r1, r9
 8005606:	f7fb fa0b 	bl	8000a20 <__aeabi_dcmpun>
 800560a:	9003      	str	r0, [sp, #12]
 800560c:	b1e8      	cbz	r0, 800564a <pow+0x82>
 800560e:	2200      	movs	r2, #0
 8005610:	2300      	movs	r3, #0
 8005612:	4620      	mov	r0, r4
 8005614:	4629      	mov	r1, r5
 8005616:	f7fb f9d1 	bl	80009bc <__aeabi_dcmpeq>
 800561a:	2800      	cmp	r0, #0
 800561c:	d046      	beq.n	80056ac <pow+0xe4>
 800561e:	2301      	movs	r3, #1
 8005620:	2200      	movs	r2, #0
 8005622:	9304      	str	r3, [sp, #16]
 8005624:	4b8f      	ldr	r3, [pc, #572]	; (8005864 <pow+0x29c>)
 8005626:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800562a:	9305      	str	r3, [sp, #20]
 800562c:	4b8e      	ldr	r3, [pc, #568]	; (8005868 <pow+0x2a0>)
 800562e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005632:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005636:	9b02      	ldr	r3, [sp, #8]
 8005638:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d031      	beq.n	80056a4 <pow+0xdc>
 8005640:	a804      	add	r0, sp, #16
 8005642:	f000 fedd 	bl	8006400 <matherr>
 8005646:	bb38      	cbnz	r0, 8005698 <pow+0xd0>
 8005648:	e058      	b.n	80056fc <pow+0x134>
 800564a:	f04f 0a00 	mov.w	sl, #0
 800564e:	f04f 0b00 	mov.w	fp, #0
 8005652:	4652      	mov	r2, sl
 8005654:	465b      	mov	r3, fp
 8005656:	4640      	mov	r0, r8
 8005658:	4649      	mov	r1, r9
 800565a:	f7fb f9af 	bl	80009bc <__aeabi_dcmpeq>
 800565e:	2800      	cmp	r0, #0
 8005660:	d051      	beq.n	8005706 <pow+0x13e>
 8005662:	4652      	mov	r2, sl
 8005664:	465b      	mov	r3, fp
 8005666:	4620      	mov	r0, r4
 8005668:	4629      	mov	r1, r5
 800566a:	f7fb f9a7 	bl	80009bc <__aeabi_dcmpeq>
 800566e:	4606      	mov	r6, r0
 8005670:	b308      	cbz	r0, 80056b6 <pow+0xee>
 8005672:	2301      	movs	r3, #1
 8005674:	9304      	str	r3, [sp, #16]
 8005676:	4b7b      	ldr	r3, [pc, #492]	; (8005864 <pow+0x29c>)
 8005678:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800567c:	9305      	str	r3, [sp, #20]
 800567e:	9b03      	ldr	r3, [sp, #12]
 8005680:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005684:	930c      	str	r3, [sp, #48]	; 0x30
 8005686:	9b02      	ldr	r3, [sp, #8]
 8005688:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0d7      	beq.n	8005640 <pow+0x78>
 8005690:	2200      	movs	r2, #0
 8005692:	4b75      	ldr	r3, [pc, #468]	; (8005868 <pow+0x2a0>)
 8005694:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800569a:	b11b      	cbz	r3, 80056a4 <pow+0xdc>
 800569c:	f7ff fb30 	bl	8004d00 <__errno>
 80056a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056a2:	6003      	str	r3, [r0, #0]
 80056a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80056a8:	e9cd 3400 	strd	r3, r4, [sp]
 80056ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056b0:	b00f      	add	sp, #60	; 0x3c
 80056b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b6:	4620      	mov	r0, r4
 80056b8:	4629      	mov	r1, r5
 80056ba:	f000 fe9b 	bl	80063f4 <finite>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d0f4      	beq.n	80056ac <pow+0xe4>
 80056c2:	4652      	mov	r2, sl
 80056c4:	465b      	mov	r3, fp
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fb f981 	bl	80009d0 <__aeabi_dcmplt>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d0ec      	beq.n	80056ac <pow+0xe4>
 80056d2:	2301      	movs	r3, #1
 80056d4:	9304      	str	r3, [sp, #16]
 80056d6:	4b63      	ldr	r3, [pc, #396]	; (8005864 <pow+0x29c>)
 80056d8:	960c      	str	r6, [sp, #48]	; 0x30
 80056da:	9305      	str	r3, [sp, #20]
 80056dc:	f997 3000 	ldrsb.w	r3, [r7]
 80056e0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80056e4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80056e8:	b913      	cbnz	r3, 80056f0 <pow+0x128>
 80056ea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80056ee:	e7a7      	b.n	8005640 <pow+0x78>
 80056f0:	2000      	movs	r0, #0
 80056f2:	495e      	ldr	r1, [pc, #376]	; (800586c <pow+0x2a4>)
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056fa:	d1a1      	bne.n	8005640 <pow+0x78>
 80056fc:	f7ff fb00 	bl	8004d00 <__errno>
 8005700:	2321      	movs	r3, #33	; 0x21
 8005702:	6003      	str	r3, [r0, #0]
 8005704:	e7c8      	b.n	8005698 <pow+0xd0>
 8005706:	e9dd 0100 	ldrd	r0, r1, [sp]
 800570a:	f000 fe73 	bl	80063f4 <finite>
 800570e:	9002      	str	r0, [sp, #8]
 8005710:	2800      	cmp	r0, #0
 8005712:	d177      	bne.n	8005804 <pow+0x23c>
 8005714:	4640      	mov	r0, r8
 8005716:	4649      	mov	r1, r9
 8005718:	f000 fe6c 	bl	80063f4 <finite>
 800571c:	2800      	cmp	r0, #0
 800571e:	d071      	beq.n	8005804 <pow+0x23c>
 8005720:	4620      	mov	r0, r4
 8005722:	4629      	mov	r1, r5
 8005724:	f000 fe66 	bl	80063f4 <finite>
 8005728:	2800      	cmp	r0, #0
 800572a:	d06b      	beq.n	8005804 <pow+0x23c>
 800572c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f7fb f974 	bl	8000a20 <__aeabi_dcmpun>
 8005738:	f997 7000 	ldrsb.w	r7, [r7]
 800573c:	4b49      	ldr	r3, [pc, #292]	; (8005864 <pow+0x29c>)
 800573e:	b1a0      	cbz	r0, 800576a <pow+0x1a2>
 8005740:	2201      	movs	r2, #1
 8005742:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005746:	9b02      	ldr	r3, [sp, #8]
 8005748:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800574c:	930c      	str	r3, [sp, #48]	; 0x30
 800574e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005752:	2f00      	cmp	r7, #0
 8005754:	d0c9      	beq.n	80056ea <pow+0x122>
 8005756:	4652      	mov	r2, sl
 8005758:	465b      	mov	r3, fp
 800575a:	4650      	mov	r0, sl
 800575c:	4659      	mov	r1, fp
 800575e:	f7fa ffef 	bl	8000740 <__aeabi_ddiv>
 8005762:	2f02      	cmp	r7, #2
 8005764:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005768:	e7c7      	b.n	80056fa <pow+0x132>
 800576a:	2203      	movs	r2, #3
 800576c:	900c      	str	r0, [sp, #48]	; 0x30
 800576e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005772:	4620      	mov	r0, r4
 8005774:	4629      	mov	r1, r5
 8005776:	2200      	movs	r2, #0
 8005778:	4b3d      	ldr	r3, [pc, #244]	; (8005870 <pow+0x2a8>)
 800577a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800577e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005782:	f7fa feb3 	bl	80004ec <__aeabi_dmul>
 8005786:	4604      	mov	r4, r0
 8005788:	460d      	mov	r5, r1
 800578a:	bb17      	cbnz	r7, 80057d2 <pow+0x20a>
 800578c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005790:	4b38      	ldr	r3, [pc, #224]	; (8005874 <pow+0x2ac>)
 8005792:	4640      	mov	r0, r8
 8005794:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005798:	4649      	mov	r1, r9
 800579a:	4652      	mov	r2, sl
 800579c:	465b      	mov	r3, fp
 800579e:	f7fb f917 	bl	80009d0 <__aeabi_dcmplt>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d054      	beq.n	8005850 <pow+0x288>
 80057a6:	4620      	mov	r0, r4
 80057a8:	4629      	mov	r1, r5
 80057aa:	f000 fe31 	bl	8006410 <rint>
 80057ae:	4622      	mov	r2, r4
 80057b0:	462b      	mov	r3, r5
 80057b2:	f7fb f903 	bl	80009bc <__aeabi_dcmpeq>
 80057b6:	b920      	cbnz	r0, 80057c2 <pow+0x1fa>
 80057b8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80057bc:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <pow+0x2b0>)
 80057be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80057c2:	f996 3000 	ldrsb.w	r3, [r6]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d142      	bne.n	8005850 <pow+0x288>
 80057ca:	f7ff fa99 	bl	8004d00 <__errno>
 80057ce:	2322      	movs	r3, #34	; 0x22
 80057d0:	e797      	b.n	8005702 <pow+0x13a>
 80057d2:	2200      	movs	r2, #0
 80057d4:	4b29      	ldr	r3, [pc, #164]	; (800587c <pow+0x2b4>)
 80057d6:	4640      	mov	r0, r8
 80057d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80057dc:	4649      	mov	r1, r9
 80057de:	4652      	mov	r2, sl
 80057e0:	465b      	mov	r3, fp
 80057e2:	f7fb f8f5 	bl	80009d0 <__aeabi_dcmplt>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d0eb      	beq.n	80057c2 <pow+0x1fa>
 80057ea:	4620      	mov	r0, r4
 80057ec:	4629      	mov	r1, r5
 80057ee:	f000 fe0f 	bl	8006410 <rint>
 80057f2:	4622      	mov	r2, r4
 80057f4:	462b      	mov	r3, r5
 80057f6:	f7fb f8e1 	bl	80009bc <__aeabi_dcmpeq>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d1e1      	bne.n	80057c2 <pow+0x1fa>
 80057fe:	2200      	movs	r2, #0
 8005800:	4b1a      	ldr	r3, [pc, #104]	; (800586c <pow+0x2a4>)
 8005802:	e7dc      	b.n	80057be <pow+0x1f6>
 8005804:	2200      	movs	r2, #0
 8005806:	e9dd 0100 	ldrd	r0, r1, [sp]
 800580a:	2300      	movs	r3, #0
 800580c:	f7fb f8d6 	bl	80009bc <__aeabi_dcmpeq>
 8005810:	2800      	cmp	r0, #0
 8005812:	f43f af4b 	beq.w	80056ac <pow+0xe4>
 8005816:	4640      	mov	r0, r8
 8005818:	4649      	mov	r1, r9
 800581a:	f000 fdeb 	bl	80063f4 <finite>
 800581e:	2800      	cmp	r0, #0
 8005820:	f43f af44 	beq.w	80056ac <pow+0xe4>
 8005824:	4620      	mov	r0, r4
 8005826:	4629      	mov	r1, r5
 8005828:	f000 fde4 	bl	80063f4 <finite>
 800582c:	2800      	cmp	r0, #0
 800582e:	f43f af3d 	beq.w	80056ac <pow+0xe4>
 8005832:	2304      	movs	r3, #4
 8005834:	9304      	str	r3, [sp, #16]
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <pow+0x29c>)
 8005838:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800583c:	9305      	str	r3, [sp, #20]
 800583e:	2300      	movs	r3, #0
 8005840:	2400      	movs	r4, #0
 8005842:	930c      	str	r3, [sp, #48]	; 0x30
 8005844:	2300      	movs	r3, #0
 8005846:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800584a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800584e:	e7b8      	b.n	80057c2 <pow+0x1fa>
 8005850:	a804      	add	r0, sp, #16
 8005852:	f000 fdd5 	bl	8006400 <matherr>
 8005856:	2800      	cmp	r0, #0
 8005858:	f47f af1e 	bne.w	8005698 <pow+0xd0>
 800585c:	e7b5      	b.n	80057ca <pow+0x202>
 800585e:	bf00      	nop
 8005860:	20000078 	.word	0x20000078
 8005864:	0800673f 	.word	0x0800673f
 8005868:	3ff00000 	.word	0x3ff00000
 800586c:	fff00000 	.word	0xfff00000
 8005870:	3fe00000 	.word	0x3fe00000
 8005874:	47efffff 	.word	0x47efffff
 8005878:	c7efffff 	.word	0xc7efffff
 800587c:	7ff00000 	.word	0x7ff00000

08005880 <__ieee754_pow>:
 8005880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005884:	b091      	sub	sp, #68	; 0x44
 8005886:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800588a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800588e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005892:	ea55 0302 	orrs.w	r3, r5, r2
 8005896:	4607      	mov	r7, r0
 8005898:	4688      	mov	r8, r1
 800589a:	f000 84b7 	beq.w	800620c <__ieee754_pow+0x98c>
 800589e:	4b80      	ldr	r3, [pc, #512]	; (8005aa0 <__ieee754_pow+0x220>)
 80058a0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80058a4:	429c      	cmp	r4, r3
 80058a6:	4689      	mov	r9, r1
 80058a8:	4682      	mov	sl, r0
 80058aa:	dc09      	bgt.n	80058c0 <__ieee754_pow+0x40>
 80058ac:	d103      	bne.n	80058b6 <__ieee754_pow+0x36>
 80058ae:	b938      	cbnz	r0, 80058c0 <__ieee754_pow+0x40>
 80058b0:	42a5      	cmp	r5, r4
 80058b2:	dc0d      	bgt.n	80058d0 <__ieee754_pow+0x50>
 80058b4:	e001      	b.n	80058ba <__ieee754_pow+0x3a>
 80058b6:	429d      	cmp	r5, r3
 80058b8:	dc02      	bgt.n	80058c0 <__ieee754_pow+0x40>
 80058ba:	429d      	cmp	r5, r3
 80058bc:	d10e      	bne.n	80058dc <__ieee754_pow+0x5c>
 80058be:	b16a      	cbz	r2, 80058dc <__ieee754_pow+0x5c>
 80058c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80058c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80058c8:	ea54 030a 	orrs.w	r3, r4, sl
 80058cc:	f000 849e 	beq.w	800620c <__ieee754_pow+0x98c>
 80058d0:	4874      	ldr	r0, [pc, #464]	; (8005aa4 <__ieee754_pow+0x224>)
 80058d2:	b011      	add	sp, #68	; 0x44
 80058d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d8:	f000 bd94 	b.w	8006404 <nan>
 80058dc:	f1b9 0f00 	cmp.w	r9, #0
 80058e0:	da53      	bge.n	800598a <__ieee754_pow+0x10a>
 80058e2:	4b71      	ldr	r3, [pc, #452]	; (8005aa8 <__ieee754_pow+0x228>)
 80058e4:	429d      	cmp	r5, r3
 80058e6:	dc4e      	bgt.n	8005986 <__ieee754_pow+0x106>
 80058e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80058ec:	429d      	cmp	r5, r3
 80058ee:	dd4c      	ble.n	800598a <__ieee754_pow+0x10a>
 80058f0:	152b      	asrs	r3, r5, #20
 80058f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80058f6:	2b14      	cmp	r3, #20
 80058f8:	dd28      	ble.n	800594c <__ieee754_pow+0xcc>
 80058fa:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80058fe:	fa22 f103 	lsr.w	r1, r2, r3
 8005902:	fa01 f303 	lsl.w	r3, r1, r3
 8005906:	4293      	cmp	r3, r2
 8005908:	d13f      	bne.n	800598a <__ieee754_pow+0x10a>
 800590a:	f001 0101 	and.w	r1, r1, #1
 800590e:	f1c1 0302 	rsb	r3, r1, #2
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	2a00      	cmp	r2, #0
 8005916:	d15c      	bne.n	80059d2 <__ieee754_pow+0x152>
 8005918:	4b61      	ldr	r3, [pc, #388]	; (8005aa0 <__ieee754_pow+0x220>)
 800591a:	429d      	cmp	r5, r3
 800591c:	d126      	bne.n	800596c <__ieee754_pow+0xec>
 800591e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005922:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005926:	ea53 030a 	orrs.w	r3, r3, sl
 800592a:	f000 846f 	beq.w	800620c <__ieee754_pow+0x98c>
 800592e:	4b5f      	ldr	r3, [pc, #380]	; (8005aac <__ieee754_pow+0x22c>)
 8005930:	429c      	cmp	r4, r3
 8005932:	dd2c      	ble.n	800598e <__ieee754_pow+0x10e>
 8005934:	2e00      	cmp	r6, #0
 8005936:	f280 846f 	bge.w	8006218 <__ieee754_pow+0x998>
 800593a:	f04f 0b00 	mov.w	fp, #0
 800593e:	f04f 0c00 	mov.w	ip, #0
 8005942:	4658      	mov	r0, fp
 8005944:	4661      	mov	r1, ip
 8005946:	b011      	add	sp, #68	; 0x44
 8005948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594c:	2a00      	cmp	r2, #0
 800594e:	d13e      	bne.n	80059ce <__ieee754_pow+0x14e>
 8005950:	f1c3 0314 	rsb	r3, r3, #20
 8005954:	fa45 f103 	asr.w	r1, r5, r3
 8005958:	fa01 f303 	lsl.w	r3, r1, r3
 800595c:	42ab      	cmp	r3, r5
 800595e:	f040 8463 	bne.w	8006228 <__ieee754_pow+0x9a8>
 8005962:	f001 0101 	and.w	r1, r1, #1
 8005966:	f1c1 0302 	rsb	r3, r1, #2
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	4b50      	ldr	r3, [pc, #320]	; (8005ab0 <__ieee754_pow+0x230>)
 800596e:	429d      	cmp	r5, r3
 8005970:	d114      	bne.n	800599c <__ieee754_pow+0x11c>
 8005972:	2e00      	cmp	r6, #0
 8005974:	f280 8454 	bge.w	8006220 <__ieee754_pow+0x9a0>
 8005978:	463a      	mov	r2, r7
 800597a:	4643      	mov	r3, r8
 800597c:	2000      	movs	r0, #0
 800597e:	494c      	ldr	r1, [pc, #304]	; (8005ab0 <__ieee754_pow+0x230>)
 8005980:	f7fa fede 	bl	8000740 <__aeabi_ddiv>
 8005984:	e013      	b.n	80059ae <__ieee754_pow+0x12e>
 8005986:	2302      	movs	r3, #2
 8005988:	e7c3      	b.n	8005912 <__ieee754_pow+0x92>
 800598a:	2300      	movs	r3, #0
 800598c:	e7c1      	b.n	8005912 <__ieee754_pow+0x92>
 800598e:	2e00      	cmp	r6, #0
 8005990:	dad3      	bge.n	800593a <__ieee754_pow+0xba>
 8005992:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005996:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800599a:	e7d2      	b.n	8005942 <__ieee754_pow+0xc2>
 800599c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80059a0:	d108      	bne.n	80059b4 <__ieee754_pow+0x134>
 80059a2:	463a      	mov	r2, r7
 80059a4:	4643      	mov	r3, r8
 80059a6:	4638      	mov	r0, r7
 80059a8:	4641      	mov	r1, r8
 80059aa:	f7fa fd9f 	bl	80004ec <__aeabi_dmul>
 80059ae:	4683      	mov	fp, r0
 80059b0:	468c      	mov	ip, r1
 80059b2:	e7c6      	b.n	8005942 <__ieee754_pow+0xc2>
 80059b4:	4b3f      	ldr	r3, [pc, #252]	; (8005ab4 <__ieee754_pow+0x234>)
 80059b6:	429e      	cmp	r6, r3
 80059b8:	d10b      	bne.n	80059d2 <__ieee754_pow+0x152>
 80059ba:	f1b9 0f00 	cmp.w	r9, #0
 80059be:	db08      	blt.n	80059d2 <__ieee754_pow+0x152>
 80059c0:	4638      	mov	r0, r7
 80059c2:	4641      	mov	r1, r8
 80059c4:	b011      	add	sp, #68	; 0x44
 80059c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ca:	f000 bc63 	b.w	8006294 <__ieee754_sqrt>
 80059ce:	2300      	movs	r3, #0
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	4638      	mov	r0, r7
 80059d4:	4641      	mov	r1, r8
 80059d6:	f000 fd09 	bl	80063ec <fabs>
 80059da:	4683      	mov	fp, r0
 80059dc:	468c      	mov	ip, r1
 80059de:	f1ba 0f00 	cmp.w	sl, #0
 80059e2:	d12b      	bne.n	8005a3c <__ieee754_pow+0x1bc>
 80059e4:	b124      	cbz	r4, 80059f0 <__ieee754_pow+0x170>
 80059e6:	4b32      	ldr	r3, [pc, #200]	; (8005ab0 <__ieee754_pow+0x230>)
 80059e8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d125      	bne.n	8005a3c <__ieee754_pow+0x1bc>
 80059f0:	2e00      	cmp	r6, #0
 80059f2:	da07      	bge.n	8005a04 <__ieee754_pow+0x184>
 80059f4:	465a      	mov	r2, fp
 80059f6:	4663      	mov	r3, ip
 80059f8:	2000      	movs	r0, #0
 80059fa:	492d      	ldr	r1, [pc, #180]	; (8005ab0 <__ieee754_pow+0x230>)
 80059fc:	f7fa fea0 	bl	8000740 <__aeabi_ddiv>
 8005a00:	4683      	mov	fp, r0
 8005a02:	468c      	mov	ip, r1
 8005a04:	f1b9 0f00 	cmp.w	r9, #0
 8005a08:	da9b      	bge.n	8005942 <__ieee754_pow+0xc2>
 8005a0a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005a0e:	9b00      	ldr	r3, [sp, #0]
 8005a10:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005a14:	4323      	orrs	r3, r4
 8005a16:	d108      	bne.n	8005a2a <__ieee754_pow+0x1aa>
 8005a18:	465a      	mov	r2, fp
 8005a1a:	4663      	mov	r3, ip
 8005a1c:	4658      	mov	r0, fp
 8005a1e:	4661      	mov	r1, ip
 8005a20:	f7fa fbac 	bl	800017c <__aeabi_dsub>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	e7aa      	b.n	8005980 <__ieee754_pow+0x100>
 8005a2a:	9b00      	ldr	r3, [sp, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d188      	bne.n	8005942 <__ieee754_pow+0xc2>
 8005a30:	4658      	mov	r0, fp
 8005a32:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005a36:	4683      	mov	fp, r0
 8005a38:	469c      	mov	ip, r3
 8005a3a:	e782      	b.n	8005942 <__ieee754_pow+0xc2>
 8005a3c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005a40:	f109 33ff 	add.w	r3, r9, #4294967295
 8005a44:	930d      	str	r3, [sp, #52]	; 0x34
 8005a46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a48:	9b00      	ldr	r3, [sp, #0]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	d104      	bne.n	8005a58 <__ieee754_pow+0x1d8>
 8005a4e:	463a      	mov	r2, r7
 8005a50:	4643      	mov	r3, r8
 8005a52:	4638      	mov	r0, r7
 8005a54:	4641      	mov	r1, r8
 8005a56:	e7e3      	b.n	8005a20 <__ieee754_pow+0x1a0>
 8005a58:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <__ieee754_pow+0x238>)
 8005a5a:	429d      	cmp	r5, r3
 8005a5c:	f340 80fe 	ble.w	8005c5c <__ieee754_pow+0x3dc>
 8005a60:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005a64:	429d      	cmp	r5, r3
 8005a66:	dd0b      	ble.n	8005a80 <__ieee754_pow+0x200>
 8005a68:	4b10      	ldr	r3, [pc, #64]	; (8005aac <__ieee754_pow+0x22c>)
 8005a6a:	429c      	cmp	r4, r3
 8005a6c:	dc0e      	bgt.n	8005a8c <__ieee754_pow+0x20c>
 8005a6e:	2e00      	cmp	r6, #0
 8005a70:	f6bf af63 	bge.w	800593a <__ieee754_pow+0xba>
 8005a74:	a308      	add	r3, pc, #32	; (adr r3, 8005a98 <__ieee754_pow+0x218>)
 8005a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	e794      	b.n	80059aa <__ieee754_pow+0x12a>
 8005a80:	4b0e      	ldr	r3, [pc, #56]	; (8005abc <__ieee754_pow+0x23c>)
 8005a82:	429c      	cmp	r4, r3
 8005a84:	ddf3      	ble.n	8005a6e <__ieee754_pow+0x1ee>
 8005a86:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <__ieee754_pow+0x230>)
 8005a88:	429c      	cmp	r4, r3
 8005a8a:	dd19      	ble.n	8005ac0 <__ieee754_pow+0x240>
 8005a8c:	2e00      	cmp	r6, #0
 8005a8e:	dcf1      	bgt.n	8005a74 <__ieee754_pow+0x1f4>
 8005a90:	e753      	b.n	800593a <__ieee754_pow+0xba>
 8005a92:	bf00      	nop
 8005a94:	f3af 8000 	nop.w
 8005a98:	8800759c 	.word	0x8800759c
 8005a9c:	7e37e43c 	.word	0x7e37e43c
 8005aa0:	7ff00000 	.word	0x7ff00000
 8005aa4:	08006711 	.word	0x08006711
 8005aa8:	433fffff 	.word	0x433fffff
 8005aac:	3fefffff 	.word	0x3fefffff
 8005ab0:	3ff00000 	.word	0x3ff00000
 8005ab4:	3fe00000 	.word	0x3fe00000
 8005ab8:	41e00000 	.word	0x41e00000
 8005abc:	3feffffe 	.word	0x3feffffe
 8005ac0:	4661      	mov	r1, ip
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	4b60      	ldr	r3, [pc, #384]	; (8005c48 <__ieee754_pow+0x3c8>)
 8005ac6:	4658      	mov	r0, fp
 8005ac8:	f7fa fb58 	bl	800017c <__aeabi_dsub>
 8005acc:	a354      	add	r3, pc, #336	; (adr r3, 8005c20 <__ieee754_pow+0x3a0>)
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	460d      	mov	r5, r1
 8005ad6:	f7fa fd09 	bl	80004ec <__aeabi_dmul>
 8005ada:	a353      	add	r3, pc, #332	; (adr r3, 8005c28 <__ieee754_pow+0x3a8>)
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	460f      	mov	r7, r1
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	f7fa fd00 	bl	80004ec <__aeabi_dmul>
 8005aec:	2200      	movs	r2, #0
 8005aee:	4682      	mov	sl, r0
 8005af0:	468b      	mov	fp, r1
 8005af2:	4b56      	ldr	r3, [pc, #344]	; (8005c4c <__ieee754_pow+0x3cc>)
 8005af4:	4620      	mov	r0, r4
 8005af6:	4629      	mov	r1, r5
 8005af8:	f7fa fcf8 	bl	80004ec <__aeabi_dmul>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	a14b      	add	r1, pc, #300	; (adr r1, 8005c30 <__ieee754_pow+0x3b0>)
 8005b02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b06:	f7fa fb39 	bl	800017c <__aeabi_dsub>
 8005b0a:	4622      	mov	r2, r4
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	f7fa fced 	bl	80004ec <__aeabi_dmul>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	2000      	movs	r0, #0
 8005b18:	494d      	ldr	r1, [pc, #308]	; (8005c50 <__ieee754_pow+0x3d0>)
 8005b1a:	f7fa fb2f 	bl	800017c <__aeabi_dsub>
 8005b1e:	4622      	mov	r2, r4
 8005b20:	462b      	mov	r3, r5
 8005b22:	4680      	mov	r8, r0
 8005b24:	4689      	mov	r9, r1
 8005b26:	4620      	mov	r0, r4
 8005b28:	4629      	mov	r1, r5
 8005b2a:	f7fa fcdf 	bl	80004ec <__aeabi_dmul>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4640      	mov	r0, r8
 8005b34:	4649      	mov	r1, r9
 8005b36:	f7fa fcd9 	bl	80004ec <__aeabi_dmul>
 8005b3a:	a33f      	add	r3, pc, #252	; (adr r3, 8005c38 <__ieee754_pow+0x3b8>)
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	f7fa fcd4 	bl	80004ec <__aeabi_dmul>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4650      	mov	r0, sl
 8005b4a:	4659      	mov	r1, fp
 8005b4c:	f7fa fb16 	bl	800017c <__aeabi_dsub>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4604      	mov	r4, r0
 8005b56:	460d      	mov	r5, r1
 8005b58:	4630      	mov	r0, r6
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	f7fa fb10 	bl	8000180 <__adddf3>
 8005b60:	2000      	movs	r0, #0
 8005b62:	468b      	mov	fp, r1
 8005b64:	4682      	mov	sl, r0
 8005b66:	4632      	mov	r2, r6
 8005b68:	463b      	mov	r3, r7
 8005b6a:	f7fa fb07 	bl	800017c <__aeabi_dsub>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4620      	mov	r0, r4
 8005b74:	4629      	mov	r1, r5
 8005b76:	f7fa fb01 	bl	800017c <__aeabi_dsub>
 8005b7a:	9b00      	ldr	r3, [sp, #0]
 8005b7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	bf0c      	ite	eq
 8005b88:	4c32      	ldreq	r4, [pc, #200]	; (8005c54 <__ieee754_pow+0x3d4>)
 8005b8a:	4c2f      	ldrne	r4, [pc, #188]	; (8005c48 <__ieee754_pow+0x3c8>)
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	e9cd 3400 	strd	r3, r4, [sp]
 8005b92:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b96:	2400      	movs	r4, #0
 8005b98:	460f      	mov	r7, r1
 8005b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	462b      	mov	r3, r5
 8005ba2:	f7fa faeb 	bl	800017c <__aeabi_dsub>
 8005ba6:	4652      	mov	r2, sl
 8005ba8:	465b      	mov	r3, fp
 8005baa:	f7fa fc9f 	bl	80004ec <__aeabi_dmul>
 8005bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bb2:	4680      	mov	r8, r0
 8005bb4:	4689      	mov	r9, r1
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	4639      	mov	r1, r7
 8005bba:	f7fa fc97 	bl	80004ec <__aeabi_dmul>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	f7fa fadb 	bl	8000180 <__adddf3>
 8005bca:	4622      	mov	r2, r4
 8005bcc:	462b      	mov	r3, r5
 8005bce:	4680      	mov	r8, r0
 8005bd0:	4689      	mov	r9, r1
 8005bd2:	4650      	mov	r0, sl
 8005bd4:	4659      	mov	r1, fp
 8005bd6:	f7fa fc89 	bl	80004ec <__aeabi_dmul>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	460d      	mov	r5, r1
 8005bde:	460b      	mov	r3, r1
 8005be0:	4602      	mov	r2, r0
 8005be2:	4649      	mov	r1, r9
 8005be4:	4640      	mov	r0, r8
 8005be6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005bea:	f7fa fac9 	bl	8000180 <__adddf3>
 8005bee:	4b1a      	ldr	r3, [pc, #104]	; (8005c58 <__ieee754_pow+0x3d8>)
 8005bf0:	4682      	mov	sl, r0
 8005bf2:	4299      	cmp	r1, r3
 8005bf4:	460f      	mov	r7, r1
 8005bf6:	460e      	mov	r6, r1
 8005bf8:	f340 82e1 	ble.w	80061be <__ieee754_pow+0x93e>
 8005bfc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005c00:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005c04:	4303      	orrs	r3, r0
 8005c06:	f000 81db 	beq.w	8005fc0 <__ieee754_pow+0x740>
 8005c0a:	a30d      	add	r3, pc, #52	; (adr r3, 8005c40 <__ieee754_pow+0x3c0>)
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c14:	f7fa fc6a 	bl	80004ec <__aeabi_dmul>
 8005c18:	a309      	add	r3, pc, #36	; (adr r3, 8005c40 <__ieee754_pow+0x3c0>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	e6c4      	b.n	80059aa <__ieee754_pow+0x12a>
 8005c20:	60000000 	.word	0x60000000
 8005c24:	3ff71547 	.word	0x3ff71547
 8005c28:	f85ddf44 	.word	0xf85ddf44
 8005c2c:	3e54ae0b 	.word	0x3e54ae0b
 8005c30:	55555555 	.word	0x55555555
 8005c34:	3fd55555 	.word	0x3fd55555
 8005c38:	652b82fe 	.word	0x652b82fe
 8005c3c:	3ff71547 	.word	0x3ff71547
 8005c40:	8800759c 	.word	0x8800759c
 8005c44:	7e37e43c 	.word	0x7e37e43c
 8005c48:	3ff00000 	.word	0x3ff00000
 8005c4c:	3fd00000 	.word	0x3fd00000
 8005c50:	3fe00000 	.word	0x3fe00000
 8005c54:	bff00000 	.word	0xbff00000
 8005c58:	408fffff 	.word	0x408fffff
 8005c5c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005c60:	f04f 0200 	mov.w	r2, #0
 8005c64:	da08      	bge.n	8005c78 <__ieee754_pow+0x3f8>
 8005c66:	4658      	mov	r0, fp
 8005c68:	4bcd      	ldr	r3, [pc, #820]	; (8005fa0 <__ieee754_pow+0x720>)
 8005c6a:	4661      	mov	r1, ip
 8005c6c:	f7fa fc3e 	bl	80004ec <__aeabi_dmul>
 8005c70:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005c74:	4683      	mov	fp, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	1523      	asrs	r3, r4, #20
 8005c7a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005c7e:	4413      	add	r3, r2
 8005c80:	930c      	str	r3, [sp, #48]	; 0x30
 8005c82:	4bc8      	ldr	r3, [pc, #800]	; (8005fa4 <__ieee754_pow+0x724>)
 8005c84:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005c88:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005c8c:	429c      	cmp	r4, r3
 8005c8e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005c92:	dd08      	ble.n	8005ca6 <__ieee754_pow+0x426>
 8005c94:	4bc4      	ldr	r3, [pc, #784]	; (8005fa8 <__ieee754_pow+0x728>)
 8005c96:	429c      	cmp	r4, r3
 8005c98:	f340 815b 	ble.w	8005f52 <__ieee754_pow+0x6d2>
 8005c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c9e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	930c      	str	r3, [sp, #48]	; 0x30
 8005ca6:	f04f 0800 	mov.w	r8, #0
 8005caa:	4658      	mov	r0, fp
 8005cac:	4629      	mov	r1, r5
 8005cae:	4bbf      	ldr	r3, [pc, #764]	; (8005fac <__ieee754_pow+0x72c>)
 8005cb0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005cb4:	444b      	add	r3, r9
 8005cb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cba:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	4623      	mov	r3, r4
 8005cc2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005cc6:	f7fa fa59 	bl	800017c <__aeabi_dsub>
 8005cca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005cce:	4606      	mov	r6, r0
 8005cd0:	460f      	mov	r7, r1
 8005cd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005cd6:	f7fa fa53 	bl	8000180 <__adddf3>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	2000      	movs	r0, #0
 8005ce0:	49b3      	ldr	r1, [pc, #716]	; (8005fb0 <__ieee754_pow+0x730>)
 8005ce2:	f7fa fd2d 	bl	8000740 <__aeabi_ddiv>
 8005ce6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4630      	mov	r0, r6
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	f7fa fbfb 	bl	80004ec <__aeabi_dmul>
 8005cf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005cfa:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005cfe:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d02:	2300      	movs	r3, #0
 8005d04:	2200      	movs	r2, #0
 8005d06:	106d      	asrs	r5, r5, #1
 8005d08:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005d0c:	9304      	str	r3, [sp, #16]
 8005d0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005d12:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005d16:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8005d1a:	4650      	mov	r0, sl
 8005d1c:	4659      	mov	r1, fp
 8005d1e:	4614      	mov	r4, r2
 8005d20:	461d      	mov	r5, r3
 8005d22:	f7fa fbe3 	bl	80004ec <__aeabi_dmul>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	4639      	mov	r1, r7
 8005d2e:	f7fa fa25 	bl	800017c <__aeabi_dsub>
 8005d32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d36:	4606      	mov	r6, r0
 8005d38:	460f      	mov	r7, r1
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	f7fa fa1d 	bl	800017c <__aeabi_dsub>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d4a:	f7fa fa17 	bl	800017c <__aeabi_dsub>
 8005d4e:	4652      	mov	r2, sl
 8005d50:	465b      	mov	r3, fp
 8005d52:	f7fa fbcb 	bl	80004ec <__aeabi_dmul>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	4639      	mov	r1, r7
 8005d5e:	f7fa fa0d 	bl	800017c <__aeabi_dsub>
 8005d62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005d66:	f7fa fbc1 	bl	80004ec <__aeabi_dmul>
 8005d6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005d72:	4610      	mov	r0, r2
 8005d74:	4619      	mov	r1, r3
 8005d76:	f7fa fbb9 	bl	80004ec <__aeabi_dmul>
 8005d7a:	a377      	add	r3, pc, #476	; (adr r3, 8005f58 <__ieee754_pow+0x6d8>)
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	4604      	mov	r4, r0
 8005d82:	460d      	mov	r5, r1
 8005d84:	f7fa fbb2 	bl	80004ec <__aeabi_dmul>
 8005d88:	a375      	add	r3, pc, #468	; (adr r3, 8005f60 <__ieee754_pow+0x6e0>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f7fa f9f7 	bl	8000180 <__adddf3>
 8005d92:	4622      	mov	r2, r4
 8005d94:	462b      	mov	r3, r5
 8005d96:	f7fa fba9 	bl	80004ec <__aeabi_dmul>
 8005d9a:	a373      	add	r3, pc, #460	; (adr r3, 8005f68 <__ieee754_pow+0x6e8>)
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f7fa f9ee 	bl	8000180 <__adddf3>
 8005da4:	4622      	mov	r2, r4
 8005da6:	462b      	mov	r3, r5
 8005da8:	f7fa fba0 	bl	80004ec <__aeabi_dmul>
 8005dac:	a370      	add	r3, pc, #448	; (adr r3, 8005f70 <__ieee754_pow+0x6f0>)
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	f7fa f9e5 	bl	8000180 <__adddf3>
 8005db6:	4622      	mov	r2, r4
 8005db8:	462b      	mov	r3, r5
 8005dba:	f7fa fb97 	bl	80004ec <__aeabi_dmul>
 8005dbe:	a36e      	add	r3, pc, #440	; (adr r3, 8005f78 <__ieee754_pow+0x6f8>)
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f7fa f9dc 	bl	8000180 <__adddf3>
 8005dc8:	4622      	mov	r2, r4
 8005dca:	462b      	mov	r3, r5
 8005dcc:	f7fa fb8e 	bl	80004ec <__aeabi_dmul>
 8005dd0:	a36b      	add	r3, pc, #428	; (adr r3, 8005f80 <__ieee754_pow+0x700>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f7fa f9d3 	bl	8000180 <__adddf3>
 8005dda:	4622      	mov	r2, r4
 8005ddc:	4606      	mov	r6, r0
 8005dde:	460f      	mov	r7, r1
 8005de0:	462b      	mov	r3, r5
 8005de2:	4620      	mov	r0, r4
 8005de4:	4629      	mov	r1, r5
 8005de6:	f7fa fb81 	bl	80004ec <__aeabi_dmul>
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	4630      	mov	r0, r6
 8005df0:	4639      	mov	r1, r7
 8005df2:	f7fa fb7b 	bl	80004ec <__aeabi_dmul>
 8005df6:	4604      	mov	r4, r0
 8005df8:	460d      	mov	r5, r1
 8005dfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dfe:	4652      	mov	r2, sl
 8005e00:	465b      	mov	r3, fp
 8005e02:	f7fa f9bd 	bl	8000180 <__adddf3>
 8005e06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e0a:	f7fa fb6f 	bl	80004ec <__aeabi_dmul>
 8005e0e:	4622      	mov	r2, r4
 8005e10:	462b      	mov	r3, r5
 8005e12:	f7fa f9b5 	bl	8000180 <__adddf3>
 8005e16:	4652      	mov	r2, sl
 8005e18:	4606      	mov	r6, r0
 8005e1a:	460f      	mov	r7, r1
 8005e1c:	465b      	mov	r3, fp
 8005e1e:	4650      	mov	r0, sl
 8005e20:	4659      	mov	r1, fp
 8005e22:	f7fa fb63 	bl	80004ec <__aeabi_dmul>
 8005e26:	2200      	movs	r2, #0
 8005e28:	4b62      	ldr	r3, [pc, #392]	; (8005fb4 <__ieee754_pow+0x734>)
 8005e2a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e2e:	f7fa f9a7 	bl	8000180 <__adddf3>
 8005e32:	4632      	mov	r2, r6
 8005e34:	463b      	mov	r3, r7
 8005e36:	f7fa f9a3 	bl	8000180 <__adddf3>
 8005e3a:	9804      	ldr	r0, [sp, #16]
 8005e3c:	460d      	mov	r5, r1
 8005e3e:	4604      	mov	r4, r0
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4650      	mov	r0, sl
 8005e46:	4659      	mov	r1, fp
 8005e48:	f7fa fb50 	bl	80004ec <__aeabi_dmul>
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	4682      	mov	sl, r0
 8005e50:	468b      	mov	fp, r1
 8005e52:	4b58      	ldr	r3, [pc, #352]	; (8005fb4 <__ieee754_pow+0x734>)
 8005e54:	4620      	mov	r0, r4
 8005e56:	4629      	mov	r1, r5
 8005e58:	f7fa f990 	bl	800017c <__aeabi_dsub>
 8005e5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e60:	f7fa f98c 	bl	800017c <__aeabi_dsub>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4630      	mov	r0, r6
 8005e6a:	4639      	mov	r1, r7
 8005e6c:	f7fa f986 	bl	800017c <__aeabi_dsub>
 8005e70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e74:	f7fa fb3a 	bl	80004ec <__aeabi_dmul>
 8005e78:	4622      	mov	r2, r4
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	460f      	mov	r7, r1
 8005e7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e82:	462b      	mov	r3, r5
 8005e84:	f7fa fb32 	bl	80004ec <__aeabi_dmul>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	4639      	mov	r1, r7
 8005e90:	f7fa f976 	bl	8000180 <__adddf3>
 8005e94:	4606      	mov	r6, r0
 8005e96:	460f      	mov	r7, r1
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4650      	mov	r0, sl
 8005e9e:	4659      	mov	r1, fp
 8005ea0:	f7fa f96e 	bl	8000180 <__adddf3>
 8005ea4:	a338      	add	r3, pc, #224	; (adr r3, 8005f88 <__ieee754_pow+0x708>)
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	9804      	ldr	r0, [sp, #16]
 8005eac:	460d      	mov	r5, r1
 8005eae:	4604      	mov	r4, r0
 8005eb0:	f7fa fb1c 	bl	80004ec <__aeabi_dmul>
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005eba:	465b      	mov	r3, fp
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	f7fa f95c 	bl	800017c <__aeabi_dsub>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4630      	mov	r0, r6
 8005eca:	4639      	mov	r1, r7
 8005ecc:	f7fa f956 	bl	800017c <__aeabi_dsub>
 8005ed0:	a32f      	add	r3, pc, #188	; (adr r3, 8005f90 <__ieee754_pow+0x710>)
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	f7fa fb09 	bl	80004ec <__aeabi_dmul>
 8005eda:	a32f      	add	r3, pc, #188	; (adr r3, 8005f98 <__ieee754_pow+0x718>)
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	460f      	mov	r7, r1
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	f7fa fb00 	bl	80004ec <__aeabi_dmul>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	4639      	mov	r1, r7
 8005ef4:	f7fa f944 	bl	8000180 <__adddf3>
 8005ef8:	4b2f      	ldr	r3, [pc, #188]	; (8005fb8 <__ieee754_pow+0x738>)
 8005efa:	444b      	add	r3, r9
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa f93e 	bl	8000180 <__adddf3>
 8005f04:	4604      	mov	r4, r0
 8005f06:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005f08:	460d      	mov	r5, r1
 8005f0a:	f7fa fa85 	bl	8000418 <__aeabi_i2d>
 8005f0e:	4606      	mov	r6, r0
 8005f10:	460f      	mov	r7, r1
 8005f12:	4b2a      	ldr	r3, [pc, #168]	; (8005fbc <__ieee754_pow+0x73c>)
 8005f14:	4622      	mov	r2, r4
 8005f16:	444b      	add	r3, r9
 8005f18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f22:	f7fa f92d 	bl	8000180 <__adddf3>
 8005f26:	4642      	mov	r2, r8
 8005f28:	464b      	mov	r3, r9
 8005f2a:	f7fa f929 	bl	8000180 <__adddf3>
 8005f2e:	4632      	mov	r2, r6
 8005f30:	463b      	mov	r3, r7
 8005f32:	f7fa f925 	bl	8000180 <__adddf3>
 8005f36:	9804      	ldr	r0, [sp, #16]
 8005f38:	4632      	mov	r2, r6
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	4682      	mov	sl, r0
 8005f3e:	468b      	mov	fp, r1
 8005f40:	f7fa f91c 	bl	800017c <__aeabi_dsub>
 8005f44:	4642      	mov	r2, r8
 8005f46:	464b      	mov	r3, r9
 8005f48:	f7fa f918 	bl	800017c <__aeabi_dsub>
 8005f4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f50:	e60b      	b.n	8005b6a <__ieee754_pow+0x2ea>
 8005f52:	f04f 0801 	mov.w	r8, #1
 8005f56:	e6a8      	b.n	8005caa <__ieee754_pow+0x42a>
 8005f58:	4a454eef 	.word	0x4a454eef
 8005f5c:	3fca7e28 	.word	0x3fca7e28
 8005f60:	93c9db65 	.word	0x93c9db65
 8005f64:	3fcd864a 	.word	0x3fcd864a
 8005f68:	a91d4101 	.word	0xa91d4101
 8005f6c:	3fd17460 	.word	0x3fd17460
 8005f70:	518f264d 	.word	0x518f264d
 8005f74:	3fd55555 	.word	0x3fd55555
 8005f78:	db6fabff 	.word	0xdb6fabff
 8005f7c:	3fdb6db6 	.word	0x3fdb6db6
 8005f80:	33333303 	.word	0x33333303
 8005f84:	3fe33333 	.word	0x3fe33333
 8005f88:	e0000000 	.word	0xe0000000
 8005f8c:	3feec709 	.word	0x3feec709
 8005f90:	dc3a03fd 	.word	0xdc3a03fd
 8005f94:	3feec709 	.word	0x3feec709
 8005f98:	145b01f5 	.word	0x145b01f5
 8005f9c:	be3e2fe0 	.word	0xbe3e2fe0
 8005fa0:	43400000 	.word	0x43400000
 8005fa4:	0003988e 	.word	0x0003988e
 8005fa8:	000bb679 	.word	0x000bb679
 8005fac:	08006748 	.word	0x08006748
 8005fb0:	3ff00000 	.word	0x3ff00000
 8005fb4:	40080000 	.word	0x40080000
 8005fb8:	08006768 	.word	0x08006768
 8005fbc:	08006758 	.word	0x08006758
 8005fc0:	a39b      	add	r3, pc, #620	; (adr r3, 8006230 <__ieee754_pow+0x9b0>)
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	4649      	mov	r1, r9
 8005fca:	f7fa f8d9 	bl	8000180 <__adddf3>
 8005fce:	4622      	mov	r2, r4
 8005fd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fd4:	462b      	mov	r3, r5
 8005fd6:	4650      	mov	r0, sl
 8005fd8:	4639      	mov	r1, r7
 8005fda:	f7fa f8cf 	bl	800017c <__aeabi_dsub>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fe6:	f7fa fd11 	bl	8000a0c <__aeabi_dcmpgt>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	f47f ae0d 	bne.w	8005c0a <__ieee754_pow+0x38a>
 8005ff0:	4aa3      	ldr	r2, [pc, #652]	; (8006280 <__ieee754_pow+0xa00>)
 8005ff2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	f340 8103 	ble.w	8006202 <__ieee754_pow+0x982>
 8005ffc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006000:	2000      	movs	r0, #0
 8006002:	151b      	asrs	r3, r3, #20
 8006004:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006008:	fa4a f303 	asr.w	r3, sl, r3
 800600c:	4433      	add	r3, r6
 800600e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006012:	4f9c      	ldr	r7, [pc, #624]	; (8006284 <__ieee754_pow+0xa04>)
 8006014:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006018:	4117      	asrs	r7, r2
 800601a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800601e:	ea23 0107 	bic.w	r1, r3, r7
 8006022:	f1c2 0214 	rsb	r2, r2, #20
 8006026:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800602a:	fa4a fa02 	asr.w	sl, sl, r2
 800602e:	2e00      	cmp	r6, #0
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4620      	mov	r0, r4
 8006036:	4629      	mov	r1, r5
 8006038:	bfb8      	it	lt
 800603a:	f1ca 0a00 	rsblt	sl, sl, #0
 800603e:	f7fa f89d 	bl	800017c <__aeabi_dsub>
 8006042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800604a:	4642      	mov	r2, r8
 800604c:	464b      	mov	r3, r9
 800604e:	f7fa f897 	bl	8000180 <__adddf3>
 8006052:	a379      	add	r3, pc, #484	; (adr r3, 8006238 <__ieee754_pow+0x9b8>)
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	2000      	movs	r0, #0
 800605a:	460d      	mov	r5, r1
 800605c:	4604      	mov	r4, r0
 800605e:	f7fa fa45 	bl	80004ec <__aeabi_dmul>
 8006062:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006066:	4606      	mov	r6, r0
 8006068:	460f      	mov	r7, r1
 800606a:	4620      	mov	r0, r4
 800606c:	4629      	mov	r1, r5
 800606e:	f7fa f885 	bl	800017c <__aeabi_dsub>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4640      	mov	r0, r8
 8006078:	4649      	mov	r1, r9
 800607a:	f7fa f87f 	bl	800017c <__aeabi_dsub>
 800607e:	a370      	add	r3, pc, #448	; (adr r3, 8006240 <__ieee754_pow+0x9c0>)
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	f7fa fa32 	bl	80004ec <__aeabi_dmul>
 8006088:	a36f      	add	r3, pc, #444	; (adr r3, 8006248 <__ieee754_pow+0x9c8>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	4680      	mov	r8, r0
 8006090:	4689      	mov	r9, r1
 8006092:	4620      	mov	r0, r4
 8006094:	4629      	mov	r1, r5
 8006096:	f7fa fa29 	bl	80004ec <__aeabi_dmul>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4640      	mov	r0, r8
 80060a0:	4649      	mov	r1, r9
 80060a2:	f7fa f86d 	bl	8000180 <__adddf3>
 80060a6:	4604      	mov	r4, r0
 80060a8:	460d      	mov	r5, r1
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4630      	mov	r0, r6
 80060b0:	4639      	mov	r1, r7
 80060b2:	f7fa f865 	bl	8000180 <__adddf3>
 80060b6:	4632      	mov	r2, r6
 80060b8:	463b      	mov	r3, r7
 80060ba:	4680      	mov	r8, r0
 80060bc:	4689      	mov	r9, r1
 80060be:	f7fa f85d 	bl	800017c <__aeabi_dsub>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4620      	mov	r0, r4
 80060c8:	4629      	mov	r1, r5
 80060ca:	f7fa f857 	bl	800017c <__aeabi_dsub>
 80060ce:	4642      	mov	r2, r8
 80060d0:	4606      	mov	r6, r0
 80060d2:	460f      	mov	r7, r1
 80060d4:	464b      	mov	r3, r9
 80060d6:	4640      	mov	r0, r8
 80060d8:	4649      	mov	r1, r9
 80060da:	f7fa fa07 	bl	80004ec <__aeabi_dmul>
 80060de:	a35c      	add	r3, pc, #368	; (adr r3, 8006250 <__ieee754_pow+0x9d0>)
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	4604      	mov	r4, r0
 80060e6:	460d      	mov	r5, r1
 80060e8:	f7fa fa00 	bl	80004ec <__aeabi_dmul>
 80060ec:	a35a      	add	r3, pc, #360	; (adr r3, 8006258 <__ieee754_pow+0x9d8>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f7fa f843 	bl	800017c <__aeabi_dsub>
 80060f6:	4622      	mov	r2, r4
 80060f8:	462b      	mov	r3, r5
 80060fa:	f7fa f9f7 	bl	80004ec <__aeabi_dmul>
 80060fe:	a358      	add	r3, pc, #352	; (adr r3, 8006260 <__ieee754_pow+0x9e0>)
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f7fa f83c 	bl	8000180 <__adddf3>
 8006108:	4622      	mov	r2, r4
 800610a:	462b      	mov	r3, r5
 800610c:	f7fa f9ee 	bl	80004ec <__aeabi_dmul>
 8006110:	a355      	add	r3, pc, #340	; (adr r3, 8006268 <__ieee754_pow+0x9e8>)
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	f7fa f831 	bl	800017c <__aeabi_dsub>
 800611a:	4622      	mov	r2, r4
 800611c:	462b      	mov	r3, r5
 800611e:	f7fa f9e5 	bl	80004ec <__aeabi_dmul>
 8006122:	a353      	add	r3, pc, #332	; (adr r3, 8006270 <__ieee754_pow+0x9f0>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f7fa f82a 	bl	8000180 <__adddf3>
 800612c:	4622      	mov	r2, r4
 800612e:	462b      	mov	r3, r5
 8006130:	f7fa f9dc 	bl	80004ec <__aeabi_dmul>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4640      	mov	r0, r8
 800613a:	4649      	mov	r1, r9
 800613c:	f7fa f81e 	bl	800017c <__aeabi_dsub>
 8006140:	4604      	mov	r4, r0
 8006142:	460d      	mov	r5, r1
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4640      	mov	r0, r8
 800614a:	4649      	mov	r1, r9
 800614c:	f7fa f9ce 	bl	80004ec <__aeabi_dmul>
 8006150:	2200      	movs	r2, #0
 8006152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800615a:	4620      	mov	r0, r4
 800615c:	4629      	mov	r1, r5
 800615e:	f7fa f80d 	bl	800017c <__aeabi_dsub>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800616a:	f7fa fae9 	bl	8000740 <__aeabi_ddiv>
 800616e:	4632      	mov	r2, r6
 8006170:	4604      	mov	r4, r0
 8006172:	460d      	mov	r5, r1
 8006174:	463b      	mov	r3, r7
 8006176:	4640      	mov	r0, r8
 8006178:	4649      	mov	r1, r9
 800617a:	f7fa f9b7 	bl	80004ec <__aeabi_dmul>
 800617e:	4632      	mov	r2, r6
 8006180:	463b      	mov	r3, r7
 8006182:	f7f9 fffd 	bl	8000180 <__adddf3>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4620      	mov	r0, r4
 800618c:	4629      	mov	r1, r5
 800618e:	f7f9 fff5 	bl	800017c <__aeabi_dsub>
 8006192:	4642      	mov	r2, r8
 8006194:	464b      	mov	r3, r9
 8006196:	f7f9 fff1 	bl	800017c <__aeabi_dsub>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	2000      	movs	r0, #0
 80061a0:	4939      	ldr	r1, [pc, #228]	; (8006288 <__ieee754_pow+0xa08>)
 80061a2:	f7f9 ffeb 	bl	800017c <__aeabi_dsub>
 80061a6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80061aa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80061ae:	da2b      	bge.n	8006208 <__ieee754_pow+0x988>
 80061b0:	4652      	mov	r2, sl
 80061b2:	f000 f9b9 	bl	8006528 <scalbn>
 80061b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061ba:	f7ff bbf6 	b.w	80059aa <__ieee754_pow+0x12a>
 80061be:	4b33      	ldr	r3, [pc, #204]	; (800628c <__ieee754_pow+0xa0c>)
 80061c0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80061c4:	429f      	cmp	r7, r3
 80061c6:	f77f af13 	ble.w	8005ff0 <__ieee754_pow+0x770>
 80061ca:	4b31      	ldr	r3, [pc, #196]	; (8006290 <__ieee754_pow+0xa10>)
 80061cc:	440b      	add	r3, r1
 80061ce:	4303      	orrs	r3, r0
 80061d0:	d00b      	beq.n	80061ea <__ieee754_pow+0x96a>
 80061d2:	a329      	add	r3, pc, #164	; (adr r3, 8006278 <__ieee754_pow+0x9f8>)
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061dc:	f7fa f986 	bl	80004ec <__aeabi_dmul>
 80061e0:	a325      	add	r3, pc, #148	; (adr r3, 8006278 <__ieee754_pow+0x9f8>)
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	f7ff bbe0 	b.w	80059aa <__ieee754_pow+0x12a>
 80061ea:	4622      	mov	r2, r4
 80061ec:	462b      	mov	r3, r5
 80061ee:	f7f9 ffc5 	bl	800017c <__aeabi_dsub>
 80061f2:	4642      	mov	r2, r8
 80061f4:	464b      	mov	r3, r9
 80061f6:	f7fa fbff 	bl	80009f8 <__aeabi_dcmpge>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	f43f aef8 	beq.w	8005ff0 <__ieee754_pow+0x770>
 8006200:	e7e7      	b.n	80061d2 <__ieee754_pow+0x952>
 8006202:	f04f 0a00 	mov.w	sl, #0
 8006206:	e71e      	b.n	8006046 <__ieee754_pow+0x7c6>
 8006208:	4621      	mov	r1, r4
 800620a:	e7d4      	b.n	80061b6 <__ieee754_pow+0x936>
 800620c:	f04f 0b00 	mov.w	fp, #0
 8006210:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006288 <__ieee754_pow+0xa08>
 8006214:	f7ff bb95 	b.w	8005942 <__ieee754_pow+0xc2>
 8006218:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800621c:	f7ff bb91 	b.w	8005942 <__ieee754_pow+0xc2>
 8006220:	4638      	mov	r0, r7
 8006222:	4641      	mov	r1, r8
 8006224:	f7ff bbc3 	b.w	80059ae <__ieee754_pow+0x12e>
 8006228:	9200      	str	r2, [sp, #0]
 800622a:	f7ff bb9f 	b.w	800596c <__ieee754_pow+0xec>
 800622e:	bf00      	nop
 8006230:	652b82fe 	.word	0x652b82fe
 8006234:	3c971547 	.word	0x3c971547
 8006238:	00000000 	.word	0x00000000
 800623c:	3fe62e43 	.word	0x3fe62e43
 8006240:	fefa39ef 	.word	0xfefa39ef
 8006244:	3fe62e42 	.word	0x3fe62e42
 8006248:	0ca86c39 	.word	0x0ca86c39
 800624c:	be205c61 	.word	0xbe205c61
 8006250:	72bea4d0 	.word	0x72bea4d0
 8006254:	3e663769 	.word	0x3e663769
 8006258:	c5d26bf1 	.word	0xc5d26bf1
 800625c:	3ebbbd41 	.word	0x3ebbbd41
 8006260:	af25de2c 	.word	0xaf25de2c
 8006264:	3f11566a 	.word	0x3f11566a
 8006268:	16bebd93 	.word	0x16bebd93
 800626c:	3f66c16c 	.word	0x3f66c16c
 8006270:	5555553e 	.word	0x5555553e
 8006274:	3fc55555 	.word	0x3fc55555
 8006278:	c2f8f359 	.word	0xc2f8f359
 800627c:	01a56e1f 	.word	0x01a56e1f
 8006280:	3fe00000 	.word	0x3fe00000
 8006284:	000fffff 	.word	0x000fffff
 8006288:	3ff00000 	.word	0x3ff00000
 800628c:	4090cbff 	.word	0x4090cbff
 8006290:	3f6f3400 	.word	0x3f6f3400

08006294 <__ieee754_sqrt>:
 8006294:	4b54      	ldr	r3, [pc, #336]	; (80063e8 <__ieee754_sqrt+0x154>)
 8006296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800629a:	438b      	bics	r3, r1
 800629c:	4606      	mov	r6, r0
 800629e:	460d      	mov	r5, r1
 80062a0:	460a      	mov	r2, r1
 80062a2:	460c      	mov	r4, r1
 80062a4:	d10f      	bne.n	80062c6 <__ieee754_sqrt+0x32>
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	f7fa f91f 	bl	80004ec <__aeabi_dmul>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4630      	mov	r0, r6
 80062b4:	4629      	mov	r1, r5
 80062b6:	f7f9 ff63 	bl	8000180 <__adddf3>
 80062ba:	4606      	mov	r6, r0
 80062bc:	460d      	mov	r5, r1
 80062be:	4630      	mov	r0, r6
 80062c0:	4629      	mov	r1, r5
 80062c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c6:	2900      	cmp	r1, #0
 80062c8:	4607      	mov	r7, r0
 80062ca:	4603      	mov	r3, r0
 80062cc:	dc0e      	bgt.n	80062ec <__ieee754_sqrt+0x58>
 80062ce:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80062d2:	ea5c 0707 	orrs.w	r7, ip, r7
 80062d6:	d0f2      	beq.n	80062be <__ieee754_sqrt+0x2a>
 80062d8:	b141      	cbz	r1, 80062ec <__ieee754_sqrt+0x58>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	f7f9 ff4d 	bl	800017c <__aeabi_dsub>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	f7fa fa2b 	bl	8000740 <__aeabi_ddiv>
 80062ea:	e7e6      	b.n	80062ba <__ieee754_sqrt+0x26>
 80062ec:	1512      	asrs	r2, r2, #20
 80062ee:	d074      	beq.n	80063da <__ieee754_sqrt+0x146>
 80062f0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80062f4:	07d5      	lsls	r5, r2, #31
 80062f6:	f04f 0500 	mov.w	r5, #0
 80062fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80062fe:	bf48      	it	mi
 8006300:	0fd9      	lsrmi	r1, r3, #31
 8006302:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8006306:	bf44      	itt	mi
 8006308:	005b      	lslmi	r3, r3, #1
 800630a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800630e:	1051      	asrs	r1, r2, #1
 8006310:	0fda      	lsrs	r2, r3, #31
 8006312:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8006316:	4628      	mov	r0, r5
 8006318:	2216      	movs	r2, #22
 800631a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	1987      	adds	r7, r0, r6
 8006322:	42a7      	cmp	r7, r4
 8006324:	bfde      	ittt	le
 8006326:	19b8      	addle	r0, r7, r6
 8006328:	1be4      	suble	r4, r4, r7
 800632a:	19ad      	addle	r5, r5, r6
 800632c:	0fdf      	lsrs	r7, r3, #31
 800632e:	3a01      	subs	r2, #1
 8006330:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8006334:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006338:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800633c:	d1f0      	bne.n	8006320 <__ieee754_sqrt+0x8c>
 800633e:	f04f 0c20 	mov.w	ip, #32
 8006342:	4696      	mov	lr, r2
 8006344:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006348:	4284      	cmp	r4, r0
 800634a:	eb06 070e 	add.w	r7, r6, lr
 800634e:	dc02      	bgt.n	8006356 <__ieee754_sqrt+0xc2>
 8006350:	d112      	bne.n	8006378 <__ieee754_sqrt+0xe4>
 8006352:	429f      	cmp	r7, r3
 8006354:	d810      	bhi.n	8006378 <__ieee754_sqrt+0xe4>
 8006356:	2f00      	cmp	r7, #0
 8006358:	eb07 0e06 	add.w	lr, r7, r6
 800635c:	da42      	bge.n	80063e4 <__ieee754_sqrt+0x150>
 800635e:	f1be 0f00 	cmp.w	lr, #0
 8006362:	db3f      	blt.n	80063e4 <__ieee754_sqrt+0x150>
 8006364:	f100 0801 	add.w	r8, r0, #1
 8006368:	1a24      	subs	r4, r4, r0
 800636a:	4640      	mov	r0, r8
 800636c:	429f      	cmp	r7, r3
 800636e:	bf88      	it	hi
 8006370:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8006374:	1bdb      	subs	r3, r3, r7
 8006376:	4432      	add	r2, r6
 8006378:	0064      	lsls	r4, r4, #1
 800637a:	f1bc 0c01 	subs.w	ip, ip, #1
 800637e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8006382:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006386:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800638a:	d1dd      	bne.n	8006348 <__ieee754_sqrt+0xb4>
 800638c:	4323      	orrs	r3, r4
 800638e:	d006      	beq.n	800639e <__ieee754_sqrt+0x10a>
 8006390:	1c54      	adds	r4, r2, #1
 8006392:	bf0b      	itete	eq
 8006394:	4662      	moveq	r2, ip
 8006396:	3201      	addne	r2, #1
 8006398:	3501      	addeq	r5, #1
 800639a:	f022 0201 	bicne.w	r2, r2, #1
 800639e:	106b      	asrs	r3, r5, #1
 80063a0:	0852      	lsrs	r2, r2, #1
 80063a2:	07e8      	lsls	r0, r5, #31
 80063a4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80063a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80063ac:	bf48      	it	mi
 80063ae:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80063b2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80063b6:	4616      	mov	r6, r2
 80063b8:	e781      	b.n	80062be <__ieee754_sqrt+0x2a>
 80063ba:	0adc      	lsrs	r4, r3, #11
 80063bc:	3915      	subs	r1, #21
 80063be:	055b      	lsls	r3, r3, #21
 80063c0:	2c00      	cmp	r4, #0
 80063c2:	d0fa      	beq.n	80063ba <__ieee754_sqrt+0x126>
 80063c4:	02e6      	lsls	r6, r4, #11
 80063c6:	d50a      	bpl.n	80063de <__ieee754_sqrt+0x14a>
 80063c8:	f1c2 0020 	rsb	r0, r2, #32
 80063cc:	fa23 f000 	lsr.w	r0, r3, r0
 80063d0:	1e55      	subs	r5, r2, #1
 80063d2:	4093      	lsls	r3, r2
 80063d4:	4304      	orrs	r4, r0
 80063d6:	1b4a      	subs	r2, r1, r5
 80063d8:	e78a      	b.n	80062f0 <__ieee754_sqrt+0x5c>
 80063da:	4611      	mov	r1, r2
 80063dc:	e7f0      	b.n	80063c0 <__ieee754_sqrt+0x12c>
 80063de:	0064      	lsls	r4, r4, #1
 80063e0:	3201      	adds	r2, #1
 80063e2:	e7ef      	b.n	80063c4 <__ieee754_sqrt+0x130>
 80063e4:	4680      	mov	r8, r0
 80063e6:	e7bf      	b.n	8006368 <__ieee754_sqrt+0xd4>
 80063e8:	7ff00000 	.word	0x7ff00000

080063ec <fabs>:
 80063ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80063f0:	4619      	mov	r1, r3
 80063f2:	4770      	bx	lr

080063f4 <finite>:
 80063f4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80063f8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80063fc:	0fc0      	lsrs	r0, r0, #31
 80063fe:	4770      	bx	lr

08006400 <matherr>:
 8006400:	2000      	movs	r0, #0
 8006402:	4770      	bx	lr

08006404 <nan>:
 8006404:	2000      	movs	r0, #0
 8006406:	4901      	ldr	r1, [pc, #4]	; (800640c <nan+0x8>)
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	7ff80000 	.word	0x7ff80000

08006410 <rint>:
 8006410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006412:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006416:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800641a:	f1bc 0f13 	cmp.w	ip, #19
 800641e:	4604      	mov	r4, r0
 8006420:	460d      	mov	r5, r1
 8006422:	460b      	mov	r3, r1
 8006424:	4606      	mov	r6, r0
 8006426:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800642a:	dc5a      	bgt.n	80064e2 <rint+0xd2>
 800642c:	f1bc 0f00 	cmp.w	ip, #0
 8006430:	da2b      	bge.n	800648a <rint+0x7a>
 8006432:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006436:	4302      	orrs	r2, r0
 8006438:	d023      	beq.n	8006482 <rint+0x72>
 800643a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800643e:	4302      	orrs	r2, r0
 8006440:	4256      	negs	r6, r2
 8006442:	4316      	orrs	r6, r2
 8006444:	0c4b      	lsrs	r3, r1, #17
 8006446:	0b36      	lsrs	r6, r6, #12
 8006448:	4934      	ldr	r1, [pc, #208]	; (800651c <rint+0x10c>)
 800644a:	045b      	lsls	r3, r3, #17
 800644c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8006450:	ea46 0503 	orr.w	r5, r6, r3
 8006454:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8006458:	4602      	mov	r2, r0
 800645a:	462b      	mov	r3, r5
 800645c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006460:	4620      	mov	r0, r4
 8006462:	4629      	mov	r1, r5
 8006464:	f7f9 fe8c 	bl	8000180 <__adddf3>
 8006468:	e9cd 0100 	strd	r0, r1, [sp]
 800646c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006470:	462b      	mov	r3, r5
 8006472:	4622      	mov	r2, r4
 8006474:	f7f9 fe82 	bl	800017c <__aeabi_dsub>
 8006478:	4604      	mov	r4, r0
 800647a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800647e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8006482:	4620      	mov	r0, r4
 8006484:	4629      	mov	r1, r5
 8006486:	b003      	add	sp, #12
 8006488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648a:	4a25      	ldr	r2, [pc, #148]	; (8006520 <rint+0x110>)
 800648c:	fa42 f20c 	asr.w	r2, r2, ip
 8006490:	4011      	ands	r1, r2
 8006492:	4301      	orrs	r1, r0
 8006494:	d0f5      	beq.n	8006482 <rint+0x72>
 8006496:	0852      	lsrs	r2, r2, #1
 8006498:	ea05 0102 	and.w	r1, r5, r2
 800649c:	ea50 0601 	orrs.w	r6, r0, r1
 80064a0:	d00c      	beq.n	80064bc <rint+0xac>
 80064a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064a6:	f1bc 0f13 	cmp.w	ip, #19
 80064aa:	bf0c      	ite	eq
 80064ac:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80064b0:	2600      	movne	r6, #0
 80064b2:	ea25 0202 	bic.w	r2, r5, r2
 80064b6:	fa43 f30c 	asr.w	r3, r3, ip
 80064ba:	4313      	orrs	r3, r2
 80064bc:	4917      	ldr	r1, [pc, #92]	; (800651c <rint+0x10c>)
 80064be:	4632      	mov	r2, r6
 80064c0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80064c4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064c8:	4620      	mov	r0, r4
 80064ca:	4629      	mov	r1, r5
 80064cc:	f7f9 fe58 	bl	8000180 <__adddf3>
 80064d0:	e9cd 0100 	strd	r0, r1, [sp]
 80064d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064d8:	4622      	mov	r2, r4
 80064da:	462b      	mov	r3, r5
 80064dc:	f7f9 fe4e 	bl	800017c <__aeabi_dsub>
 80064e0:	e008      	b.n	80064f4 <rint+0xe4>
 80064e2:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 80064e6:	dd08      	ble.n	80064fa <rint+0xea>
 80064e8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80064ec:	d1c9      	bne.n	8006482 <rint+0x72>
 80064ee:	4602      	mov	r2, r0
 80064f0:	f7f9 fe46 	bl	8000180 <__adddf3>
 80064f4:	4604      	mov	r4, r0
 80064f6:	460d      	mov	r5, r1
 80064f8:	e7c3      	b.n	8006482 <rint+0x72>
 80064fa:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 80064fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006502:	40ca      	lsrs	r2, r1
 8006504:	4210      	tst	r0, r2
 8006506:	d0bc      	beq.n	8006482 <rint+0x72>
 8006508:	0852      	lsrs	r2, r2, #1
 800650a:	4210      	tst	r0, r2
 800650c:	bf1f      	itttt	ne
 800650e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8006512:	ea20 0202 	bicne.w	r2, r0, r2
 8006516:	410e      	asrne	r6, r1
 8006518:	4316      	orrne	r6, r2
 800651a:	e7cf      	b.n	80064bc <rint+0xac>
 800651c:	08006778 	.word	0x08006778
 8006520:	000fffff 	.word	0x000fffff
 8006524:	00000000 	.word	0x00000000

08006528 <scalbn>:
 8006528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652a:	4616      	mov	r6, r2
 800652c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006530:	4604      	mov	r4, r0
 8006532:	460d      	mov	r5, r1
 8006534:	460b      	mov	r3, r1
 8006536:	b982      	cbnz	r2, 800655a <scalbn+0x32>
 8006538:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800653c:	4303      	orrs	r3, r0
 800653e:	d034      	beq.n	80065aa <scalbn+0x82>
 8006540:	4b2d      	ldr	r3, [pc, #180]	; (80065f8 <scalbn+0xd0>)
 8006542:	2200      	movs	r2, #0
 8006544:	f7f9 ffd2 	bl	80004ec <__aeabi_dmul>
 8006548:	4b2c      	ldr	r3, [pc, #176]	; (80065fc <scalbn+0xd4>)
 800654a:	4604      	mov	r4, r0
 800654c:	429e      	cmp	r6, r3
 800654e:	460d      	mov	r5, r1
 8006550:	da0d      	bge.n	800656e <scalbn+0x46>
 8006552:	a325      	add	r3, pc, #148	; (adr r3, 80065e8 <scalbn+0xc0>)
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	e01c      	b.n	8006594 <scalbn+0x6c>
 800655a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800655e:	42ba      	cmp	r2, r7
 8006560:	d109      	bne.n	8006576 <scalbn+0x4e>
 8006562:	4602      	mov	r2, r0
 8006564:	f7f9 fe0c 	bl	8000180 <__adddf3>
 8006568:	4604      	mov	r4, r0
 800656a:	460d      	mov	r5, r1
 800656c:	e01d      	b.n	80065aa <scalbn+0x82>
 800656e:	460b      	mov	r3, r1
 8006570:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006574:	3a36      	subs	r2, #54	; 0x36
 8006576:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800657a:	4432      	add	r2, r6
 800657c:	428a      	cmp	r2, r1
 800657e:	dd0c      	ble.n	800659a <scalbn+0x72>
 8006580:	4622      	mov	r2, r4
 8006582:	462b      	mov	r3, r5
 8006584:	a11a      	add	r1, pc, #104	; (adr r1, 80065f0 <scalbn+0xc8>)
 8006586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800658a:	f000 f83b 	bl	8006604 <copysign>
 800658e:	a318      	add	r3, pc, #96	; (adr r3, 80065f0 <scalbn+0xc8>)
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	f7f9 ffaa 	bl	80004ec <__aeabi_dmul>
 8006598:	e7e6      	b.n	8006568 <scalbn+0x40>
 800659a:	2a00      	cmp	r2, #0
 800659c:	dd08      	ble.n	80065b0 <scalbn+0x88>
 800659e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80065a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065a6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065aa:	4620      	mov	r0, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065b0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80065b4:	da0b      	bge.n	80065ce <scalbn+0xa6>
 80065b6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80065ba:	429e      	cmp	r6, r3
 80065bc:	4622      	mov	r2, r4
 80065be:	462b      	mov	r3, r5
 80065c0:	dce0      	bgt.n	8006584 <scalbn+0x5c>
 80065c2:	a109      	add	r1, pc, #36	; (adr r1, 80065e8 <scalbn+0xc0>)
 80065c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065c8:	f000 f81c 	bl	8006604 <copysign>
 80065cc:	e7c1      	b.n	8006552 <scalbn+0x2a>
 80065ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80065d2:	3236      	adds	r2, #54	; 0x36
 80065d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065dc:	4620      	mov	r0, r4
 80065de:	4629      	mov	r1, r5
 80065e0:	2200      	movs	r2, #0
 80065e2:	4b07      	ldr	r3, [pc, #28]	; (8006600 <scalbn+0xd8>)
 80065e4:	e7d6      	b.n	8006594 <scalbn+0x6c>
 80065e6:	bf00      	nop
 80065e8:	c2f8f359 	.word	0xc2f8f359
 80065ec:	01a56e1f 	.word	0x01a56e1f
 80065f0:	8800759c 	.word	0x8800759c
 80065f4:	7e37e43c 	.word	0x7e37e43c
 80065f8:	43500000 	.word	0x43500000
 80065fc:	ffff3cb0 	.word	0xffff3cb0
 8006600:	3c900000 	.word	0x3c900000

08006604 <copysign>:
 8006604:	b530      	push	{r4, r5, lr}
 8006606:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800660a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800660e:	ea42 0503 	orr.w	r5, r2, r3
 8006612:	4629      	mov	r1, r5
 8006614:	bd30      	pop	{r4, r5, pc}
	...

08006618 <_init>:
 8006618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661a:	bf00      	nop
 800661c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661e:	bc08      	pop	{r3}
 8006620:	469e      	mov	lr, r3
 8006622:	4770      	bx	lr

08006624 <_fini>:
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	bf00      	nop
 8006628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662a:	bc08      	pop	{r3}
 800662c:	469e      	mov	lr, r3
 800662e:	4770      	bx	lr
